-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_changeARate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AStreamWide_V_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    AStreamWide_V_V_empty_n : IN STD_LOGIC;
    AStreamWide_V_V_read : OUT STD_LOGIC;
    AStream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    AStream_V_full_n : IN STD_LOGIC;
    AStream_V_write : OUT STD_LOGIC;
    N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC;
    N_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    N_out_full_n : IN STD_LOGIC;
    N_out_write : OUT STD_LOGIC );
end;


architecture behav of mm_changeARate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv100_0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv100_1 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal AStreamWide_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln13_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal AStream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln19_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal N_blk_n : STD_LOGIC;
    signal N_out_blk_n : STD_LOGIC;
    signal i_0_i_reg_164 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_s_reg_413 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_reg_418 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln13_fu_221_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln13_reg_423 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal bound16_reg_440 : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal bound36_reg_455 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state12 : BOOLEAN;
    signal add_ln13_fu_273_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal add_ln13_reg_464 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Val2_s_reg_469 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln19_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_285_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sub_ln647_2_fu_373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln647_2_reg_484 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln647_fu_383_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln647_reg_489 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state13 : STD_LOGIC;
    signal indvar_flatten59_reg_153 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln13_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_209_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln13_1_fu_212_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln13_1_fu_218_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_fu_231_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln13_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_238_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (74 downto 0);
    signal trunc_ln21_fu_291_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Lo_assign_fu_295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln21_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln647_fu_315_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln647_1_fu_319_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln647_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_fu_332_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln647_1_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_323_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln647_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln647_fu_350_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln647_2_fu_365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln647_1_fu_358_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln647_2_fu_379_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln647_3_fu_389_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln647_1_fu_392_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_398_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_250_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_250_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_262_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_262_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component mm_mm_mul_32ns_43ns_75_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component mm_mm_mul_25ns_75ns_100_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (74 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;



begin
    mm_mul_32ns_43ns_75_4_1_U23 : component mm_mm_mul_32ns_43ns_75_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 43,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    mm_mul_25ns_75ns_100_5_1_U24 : component mm_mm_mul_25ns_75ns_100_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 25,
        din1_WIDTH => 75,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state13) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_reg_164 <= i_fu_285_p2;
            elsif ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_i_reg_164 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten59_reg_153 <= add_ln13_reg_464;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten59_reg_153 <= ap_const_lv100_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln13_reg_464 <= add_ln13_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound16_reg_440 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                bound36_reg_455 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln19_reg_475 <= icmp_ln19_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lshr_ln647_reg_489 <= lshr_ln647_fu_383_p2;
                    sub_ln647_2_reg_484(9 downto 1) <= sub_ln647_2_fu_373_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                p_Val2_s_reg_469 <= AStreamWide_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln13_reg_423 <= select_ln13_fu_221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = N_out_full_n) or (ap_const_logic_0 = N_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_3_reg_418 <= N_dout(31 downto 8);
                tmp_reg_408 <= N_dout(31 downto 31);
                tmp_s_reg_413 <= sub_ln13_fu_183_p2(31 downto 8);
            end if;
        end if;
    end process;
    sub_ln647_2_reg_484(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, AStreamWide_V_V_empty_n, N_empty_n, N_out_full_n, ap_CS_fsm_state12, icmp_ln13_fu_268_p2, icmp_ln19_fu_279_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = N_out_full_n) or (ap_const_logic_0 = N_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln19_fu_279_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln19_fu_279_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    AStreamWide_V_V_blk_n_assign_proc : process(AStreamWide_V_V_empty_n, ap_CS_fsm_state12, icmp_ln13_fu_268_p2)
    begin
        if (((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AStreamWide_V_V_blk_n <= AStreamWide_V_V_empty_n;
        else 
            AStreamWide_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    AStreamWide_V_V_read_assign_proc : process(AStreamWide_V_V_empty_n, ap_CS_fsm_state12, icmp_ln13_fu_268_p2)
    begin
        if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            AStreamWide_V_V_read <= ap_const_logic_1;
        else 
            AStreamWide_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    AStream_V_blk_n_assign_proc : process(AStream_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln19_reg_475)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            AStream_V_blk_n <= AStream_V_full_n;
        else 
            AStream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    AStream_V_din <= p_Result_s_fu_398_p2(16 - 1 downto 0);

    AStream_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln19_reg_475, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AStream_V_write <= ap_const_logic_1;
        else 
            AStream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    Lo_assign_fu_295_p3 <= (trunc_ln21_fu_291_p1 & ap_const_lv4_0);

    N_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_out_blk_n <= N_out_full_n;
        else 
            N_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    N_out_din <= N_dout;

    N_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n, N_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = N_out_full_n) or (ap_const_logic_0 = N_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_out_write <= ap_const_logic_1;
        else 
            N_out_write <= ap_const_logic_0;
        end if; 
    end process;


    N_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n, N_out_full_n)
    begin
        if ((not(((ap_const_logic_0 = N_out_full_n) or (ap_const_logic_0 = N_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln13_fu_273_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_153) + unsigned(ap_const_lv100_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(AStream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln19_reg_475)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_const_logic_0 = AStream_V_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(AStream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln19_reg_475)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_const_logic_0 = AStream_V_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(AStream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln19_reg_475)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_const_logic_0 = AStream_V_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, N_empty_n, N_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = N_out_full_n) or (ap_const_logic_0 = N_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state12_assign_proc : process(AStreamWide_V_V_empty_n, icmp_ln13_fu_268_p2)
    begin
                ap_block_state12 <= ((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n));
    end process;

        ap_block_state13_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter1_assign_proc : process(AStream_V_full_n, icmp_ln19_reg_475)
    begin
                ap_block_state14_pp0_stage0_iter1 <= ((icmp_ln19_reg_475 = ap_const_lv1_0) and (ap_const_logic_0 = AStream_V_full_n));
    end process;


    ap_condition_pp0_exit_iter0_state13_assign_proc : process(icmp_ln19_fu_279_p2)
    begin
        if ((icmp_ln19_fu_279_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, AStreamWide_V_V_empty_n, ap_CS_fsm_state12, icmp_ln13_fu_268_p2)
    begin
        if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(AStreamWide_V_V_empty_n, ap_CS_fsm_state12, icmp_ln13_fu_268_p2)
    begin
        if ((not(((icmp_ln13_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_0 = AStreamWide_V_V_empty_n))) and (icmp_ln13_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        empty_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_231_p3),43));

    grp_fu_250_p0 <= grp_fu_250_p00(32 - 1 downto 0);
    grp_fu_250_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln13_fu_228_p1),75));
    grp_fu_250_p1 <= grp_fu_250_p10(43 - 1 downto 0);
    grp_fu_250_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_238_p1),75));
    grp_fu_262_p0 <= grp_fu_262_p00(25 - 1 downto 0);
    grp_fu_262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_423),100));
    grp_fu_262_p1 <= grp_fu_262_p10(75 - 1 downto 0);
    grp_fu_262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound16_reg_440),100));
    i_fu_285_p2 <= std_logic_vector(unsigned(i_0_i_reg_164) + unsigned(ap_const_lv6_1));
    icmp_ln13_fu_268_p2 <= "1" when (indvar_flatten59_reg_153 = bound36_reg_455) else "0";
    icmp_ln19_fu_279_p2 <= "1" when (i_0_i_reg_164 = ap_const_lv6_20) else "0";
    icmp_ln647_fu_309_p2 <= "1" when (unsigned(Lo_assign_fu_295_p3) > unsigned(or_ln21_fu_303_p2)) else "0";
    lshr_ln647_1_fu_392_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln647_3_fu_389_p1(31-1 downto 0)))));
    lshr_ln647_fu_383_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_358_p3),to_integer(unsigned('0' & zext_ln647_2_fu_379_p1(31-1 downto 0)))));
    or_ln21_fu_303_p2 <= (ap_const_lv9_F or Lo_assign_fu_295_p3);
    p_Result_s_fu_398_p2 <= (lshr_ln647_reg_489 and lshr_ln647_1_fu_392_p2);
    select_ln13_fu_221_p3 <= 
        sub_ln13_1_fu_212_p2 when (tmp_reg_408(0) = '1') else 
        zext_ln13_1_fu_218_p1;
    select_ln647_1_fu_358_p3 <= 
        tmp_23_fu_323_p4 when (icmp_ln647_fu_309_p2(0) = '1') else 
        p_Val2_s_reg_469;
    select_ln647_2_fu_365_p3 <= 
        xor_ln647_fu_338_p2 when (icmp_ln647_fu_309_p2(0) = '1') else 
        zext_ln647_fu_315_p1;
    select_ln647_fu_350_p3 <= 
        sub_ln647_fu_332_p2 when (icmp_ln647_fu_309_p2(0) = '1') else 
        sub_ln647_1_fu_344_p2;
        sext_ln13_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln13_reg_423),32));

    sub_ln13_1_fu_212_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(zext_ln13_fu_209_p1));
    sub_ln13_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(N_dout));
    sub_ln647_1_fu_344_p2 <= std_logic_vector(unsigned(zext_ln647_1_fu_319_p1) - unsigned(zext_ln647_fu_315_p1));
    sub_ln647_2_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln647_fu_350_p3));
    sub_ln647_fu_332_p2 <= std_logic_vector(unsigned(zext_ln647_fu_315_p1) - unsigned(zext_ln647_1_fu_319_p1));
    
    tmp_23_fu_323_p4_proc : process(p_Val2_s_reg_469)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_23_fu_323_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_Val2_s_reg_469;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_23_fu_323_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_23_fu_323_p4_i) := p_Val2_s_reg_469(512-1-tmp_23_fu_323_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_23_fu_323_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_4_fu_231_p3 <= (select_ln13_reg_423 & ap_const_lv11_0);
    trunc_ln21_fu_291_p1 <= i_0_i_reg_164(5 - 1 downto 0);
    xor_ln647_fu_338_p2 <= (zext_ln647_fu_315_p1 xor ap_const_lv10_1FF);
    zext_ln13_1_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_418),25));
    zext_ln13_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_413),25));
    zext_ln647_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_303_p2),10));
    zext_ln647_2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_365_p3),512));
    zext_ln647_3_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_2_reg_484),512));
    zext_ln647_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_295_p3),10));
end behav;
