// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_readA (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_A_p_V_AWVALID,
        m_axi_A_p_V_AWREADY,
        m_axi_A_p_V_AWADDR,
        m_axi_A_p_V_AWID,
        m_axi_A_p_V_AWLEN,
        m_axi_A_p_V_AWSIZE,
        m_axi_A_p_V_AWBURST,
        m_axi_A_p_V_AWLOCK,
        m_axi_A_p_V_AWCACHE,
        m_axi_A_p_V_AWPROT,
        m_axi_A_p_V_AWQOS,
        m_axi_A_p_V_AWREGION,
        m_axi_A_p_V_AWUSER,
        m_axi_A_p_V_WVALID,
        m_axi_A_p_V_WREADY,
        m_axi_A_p_V_WDATA,
        m_axi_A_p_V_WSTRB,
        m_axi_A_p_V_WLAST,
        m_axi_A_p_V_WID,
        m_axi_A_p_V_WUSER,
        m_axi_A_p_V_ARVALID,
        m_axi_A_p_V_ARREADY,
        m_axi_A_p_V_ARADDR,
        m_axi_A_p_V_ARID,
        m_axi_A_p_V_ARLEN,
        m_axi_A_p_V_ARSIZE,
        m_axi_A_p_V_ARBURST,
        m_axi_A_p_V_ARLOCK,
        m_axi_A_p_V_ARCACHE,
        m_axi_A_p_V_ARPROT,
        m_axi_A_p_V_ARQOS,
        m_axi_A_p_V_ARREGION,
        m_axi_A_p_V_ARUSER,
        m_axi_A_p_V_RVALID,
        m_axi_A_p_V_RREADY,
        m_axi_A_p_V_RDATA,
        m_axi_A_p_V_RLAST,
        m_axi_A_p_V_RID,
        m_axi_A_p_V_RUSER,
        m_axi_A_p_V_RRESP,
        m_axi_A_p_V_BVALID,
        m_axi_A_p_V_BREADY,
        m_axi_A_p_V_BRESP,
        m_axi_A_p_V_BID,
        m_axi_A_p_V_BUSER,
        A_p_V_offset_dout,
        A_p_V_offset_empty_n,
        A_p_V_offset_read,
        AStreamWide_V_V_din,
        AStreamWide_V_V_full_n,
        AStreamWide_V_V_write,
        N_dout,
        N_empty_n,
        N_read,
        N_out_din,
        N_out_full_n,
        N_out_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2048;
parameter    ap_ST_fsm_state29 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_A_p_V_AWVALID;
input   m_axi_A_p_V_AWREADY;
output  [63:0] m_axi_A_p_V_AWADDR;
output  [0:0] m_axi_A_p_V_AWID;
output  [31:0] m_axi_A_p_V_AWLEN;
output  [2:0] m_axi_A_p_V_AWSIZE;
output  [1:0] m_axi_A_p_V_AWBURST;
output  [1:0] m_axi_A_p_V_AWLOCK;
output  [3:0] m_axi_A_p_V_AWCACHE;
output  [2:0] m_axi_A_p_V_AWPROT;
output  [3:0] m_axi_A_p_V_AWQOS;
output  [3:0] m_axi_A_p_V_AWREGION;
output  [0:0] m_axi_A_p_V_AWUSER;
output   m_axi_A_p_V_WVALID;
input   m_axi_A_p_V_WREADY;
output  [511:0] m_axi_A_p_V_WDATA;
output  [63:0] m_axi_A_p_V_WSTRB;
output   m_axi_A_p_V_WLAST;
output  [0:0] m_axi_A_p_V_WID;
output  [0:0] m_axi_A_p_V_WUSER;
output   m_axi_A_p_V_ARVALID;
input   m_axi_A_p_V_ARREADY;
output  [63:0] m_axi_A_p_V_ARADDR;
output  [0:0] m_axi_A_p_V_ARID;
output  [31:0] m_axi_A_p_V_ARLEN;
output  [2:0] m_axi_A_p_V_ARSIZE;
output  [1:0] m_axi_A_p_V_ARBURST;
output  [1:0] m_axi_A_p_V_ARLOCK;
output  [3:0] m_axi_A_p_V_ARCACHE;
output  [2:0] m_axi_A_p_V_ARPROT;
output  [3:0] m_axi_A_p_V_ARQOS;
output  [3:0] m_axi_A_p_V_ARREGION;
output  [0:0] m_axi_A_p_V_ARUSER;
input   m_axi_A_p_V_RVALID;
output   m_axi_A_p_V_RREADY;
input  [511:0] m_axi_A_p_V_RDATA;
input   m_axi_A_p_V_RLAST;
input  [0:0] m_axi_A_p_V_RID;
input  [0:0] m_axi_A_p_V_RUSER;
input  [1:0] m_axi_A_p_V_RRESP;
input   m_axi_A_p_V_BVALID;
output   m_axi_A_p_V_BREADY;
input  [1:0] m_axi_A_p_V_BRESP;
input  [0:0] m_axi_A_p_V_BID;
input  [0:0] m_axi_A_p_V_BUSER;
input  [63:0] A_p_V_offset_dout;
input   A_p_V_offset_empty_n;
output   A_p_V_offset_read;
output  [511:0] AStreamWide_V_V_din;
input   AStreamWide_V_V_full_n;
output   AStreamWide_V_V_write;
input  [31:0] N_dout;
input   N_empty_n;
output   N_read;
output  [31:0] N_out_din;
input   N_out_full_n;
output   N_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_A_p_V_ARVALID;
reg m_axi_A_p_V_RREADY;
reg A_p_V_offset_read;
reg AStreamWide_V_V_write;
reg N_read;
reg N_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    A_p_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_22_reg_1203;
reg   [0:0] empty_22_reg_1203_pp0_iter7_reg;
reg    A_p_V_blk_n_R;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] icmp_ln33_reg_1169;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter14_reg;
reg    A_p_V_offset_blk_n;
reg    AStreamWide_V_V_blk_n;
reg    ap_enable_reg_pp0_iter16;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter15_reg;
reg    N_blk_n;
reg    N_out_blk_n;
reg   [99:0] indvar_flatten160_i_reg_209;
reg   [75:0] indvar_flatten98_i_reg_220;
reg   [43:0] indvar_flatten44_i_reg_231;
reg   [31:0] kb_0_i_i_reg_242;
reg   [12:0] indvar_flatten_i_reg_253;
reg   [8:0] k_0_i_i_reg_264;
reg   [3:0] ii_0_i_i_reg_275;
reg   [23:0] ib_0_i_i_reg_286;
reg   [57:0] tmp_reg_1082;
reg    ap_block_state1;
reg  signed [31:0] N_read_reg_1087;
reg   [0:0] tmp_14_reg_1095;
reg   [23:0] tmp_28_i_reg_1100;
wire  signed [24:0] select_ln33_fu_353_p3;
reg  signed [24:0] select_ln33_reg_1105;
wire    ap_CS_fsm_state2;
wire  signed [42:0] empty_fu_370_p1;
reg  signed [42:0] empty_reg_1113;
wire    ap_CS_fsm_state3;
wire   [74:0] grp_fu_382_p2;
reg   [74:0] bound49_i_reg_1128;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln35_fu_400_p2;
reg   [0:0] icmp_ln35_reg_1144;
wire   [59:0] zext_ln32_cast_i_fu_405_p1;
reg   [59:0] zext_ln32_cast_i_reg_1149;
wire    ap_CS_fsm_state11;
wire   [43:0] bound5_i_fu_408_p1;
reg   [43:0] bound5_i_reg_1154;
wire   [75:0] bound49_cast_i_fu_411_p1;
reg   [75:0] bound49_cast_i_reg_1159;
wire   [99:0] grp_fu_394_p2;
reg   [99:0] bound103_i_reg_1164;
wire   [0:0] icmp_ln33_fu_414_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_state16_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state18_pp0_stage0_iter6;
wire    ap_block_state19_pp0_stage0_iter7;
wire    ap_block_state20_pp0_stage0_iter8;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter9;
wire    ap_block_state22_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state24_pp0_stage0_iter12;
wire    ap_block_state25_pp0_stage0_iter13;
wire    ap_block_state26_pp0_stage0_iter14;
reg    ap_block_state27_pp0_stage0_iter15;
reg    ap_block_state28_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter2_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter3_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter4_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter5_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter6_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter7_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter8_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter9_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter10_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter11_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter12_reg;
reg   [0:0] icmp_ln33_reg_1169_pp0_iter13_reg;
wire   [99:0] add_ln33_fu_419_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln34_fu_425_p2;
reg   [0:0] icmp_ln34_reg_1178;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter1_reg;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter2_reg;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter3_reg;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter4_reg;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter5_reg;
reg   [0:0] icmp_ln34_reg_1178_pp0_iter6_reg;
wire   [0:0] select_ln33_2_fu_435_p3;
reg   [0:0] select_ln33_2_reg_1188;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter1_reg;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter2_reg;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter3_reg;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter4_reg;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter5_reg;
reg   [0:0] select_ln33_2_reg_1188_pp0_iter6_reg;
wire   [0:0] or_ln35_fu_442_p2;
reg   [0:0] or_ln35_reg_1196;
wire   [0:0] empty_22_fu_460_p2;
reg   [0:0] empty_22_reg_1203_pp0_iter1_reg;
reg   [0:0] empty_22_reg_1203_pp0_iter2_reg;
reg   [0:0] empty_22_reg_1203_pp0_iter3_reg;
reg   [0:0] empty_22_reg_1203_pp0_iter4_reg;
reg   [0:0] empty_22_reg_1203_pp0_iter5_reg;
reg   [0:0] empty_22_reg_1203_pp0_iter6_reg;
wire   [43:0] select_ln35_4_fu_472_p3;
wire   [75:0] select_ln34_fu_486_p3;
wire  signed [31:0] add_ln39_fu_504_p2;
reg  signed [31:0] add_ln39_reg_1217;
wire   [0:0] and_ln35_1_fu_564_p2;
reg   [0:0] and_ln35_1_reg_1222;
reg   [0:0] and_ln35_1_reg_1222_pp0_iter2_reg;
reg   [0:0] and_ln35_1_reg_1222_pp0_iter3_reg;
reg   [0:0] and_ln35_1_reg_1222_pp0_iter4_reg;
reg   [0:0] and_ln35_1_reg_1222_pp0_iter5_reg;
reg   [0:0] and_ln35_1_reg_1222_pp0_iter6_reg;
wire  signed [31:0] add_ln35_fu_570_p2;
reg  signed [31:0] add_ln35_reg_1227;
wire   [0:0] and_ln39_fu_624_p2;
reg   [0:0] and_ln39_reg_1232;
reg   [0:0] and_ln39_reg_1232_pp0_iter2_reg;
reg   [0:0] and_ln39_reg_1232_pp0_iter3_reg;
reg   [0:0] and_ln39_reg_1232_pp0_iter4_reg;
reg   [0:0] and_ln39_reg_1232_pp0_iter5_reg;
reg   [0:0] and_ln39_reg_1232_pp0_iter6_reg;
wire   [31:0] select_ln35_2_fu_630_p3;
reg    ap_enable_reg_pp0_iter1;
wire  signed [31:0] add_ln39_3_fu_659_p2;
reg  signed [31:0] add_ln39_3_reg_1242;
wire   [8:0] select_ln36_1_fu_665_p3;
wire   [3:0] ii_fu_679_p3;
wire   [12:0] select_ln36_2_fu_693_p3;
wire   [31:0] grp_fu_701_p2;
reg   [31:0] mul_ln39_reg_1262;
wire   [31:0] grp_fu_705_p2;
reg   [31:0] mul_ln39_1_reg_1267;
wire   [31:0] grp_fu_709_p2;
reg   [31:0] mul_ln39_2_reg_1272;
wire   [27:0] select_ln39_fu_774_p3;
reg   [27:0] select_ln39_reg_1277;
wire   [23:0] add_ln33_1_fu_782_p2;
reg   [23:0] add_ln33_1_reg_1282;
wire   [31:0] select_ln33_1_fu_796_p3;
reg   [31:0] select_ln33_1_reg_1288;
reg   [26:0] tmp_33_i_reg_1294;
wire   [23:0] select_ln33_3_fu_819_p3;
reg    ap_enable_reg_pp0_iter6;
reg   [26:0] tmp_35_i_reg_1304;
wire   [31:0] add_ln39_2_fu_847_p2;
reg   [31:0] add_ln39_2_reg_1309;
wire   [31:0] add_ln39_4_fu_853_p2;
reg   [31:0] add_ln39_4_reg_1316;
wire   [59:0] add_ln176_fu_1067_p2;
reg   [59:0] add_ln176_reg_1323;
reg   [511:0] tmp_V_reg_1334;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_condition_pp0_exit_iter6_state18;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
wire  signed [63:0] sext_ln176_fu_1072_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] tmp_14_fu_307_p1;
wire  signed [31:0] tmp_28_i_fu_315_p1;
wire   [31:0] sub_ln33_fu_325_p2;
wire   [23:0] tmp_i_fu_330_p4;
wire   [24:0] zext_ln33_fu_340_p1;
wire   [24:0] sub_ln33_1_fu_344_p2;
wire   [24:0] zext_ln33_1_fu_350_p1;
wire   [35:0] tmp_29_i_fu_363_p3;
wire  signed [31:0] sext_ln33_fu_360_p1;
wire   [31:0] grp_fu_382_p0;
wire   [42:0] grp_fu_382_p1;
wire   [24:0] grp_fu_394_p0;
wire   [74:0] grp_fu_394_p1;
wire   [0:0] icmp_ln35_1_fu_430_p2;
wire   [2:0] empty_21_fu_448_p1;
wire   [99:0] tmp_20_fu_452_p3;
wire   [43:0] add_ln35_1_fu_466_p2;
wire   [75:0] add_ln34_fu_480_p2;
wire   [31:0] zext_ln36_fu_500_p1;
wire   [31:0] shl_ln39_fu_494_p2;
wire   [0:0] icmp_ln37_fu_515_p2;
wire   [0:0] xor_ln33_fu_510_p2;
wire   [0:0] icmp_ln36_fu_527_p2;
wire   [0:0] and_ln33_fu_521_p2;
wire   [0:0] xor_ln35_fu_553_p2;
wire   [0:0] and_ln33_1_fu_533_p2;
wire   [31:0] select_ln35_fu_539_p3;
wire   [0:0] or_ln39_fu_576_p2;
wire   [0:0] or_ln39_1_fu_581_p2;
wire   [31:0] shl_ln39_1_fu_594_p2;
wire   [31:0] select_ln35_1_fu_546_p3;
wire   [0:0] xor_ln39_fu_608_p2;
wire   [0:0] or_ln39_2_fu_614_p2;
wire   [0:0] and_ln35_fu_558_p2;
wire   [0:0] or_ln39_3_fu_619_p2;
wire   [8:0] select_ln39_1_fu_586_p3;
wire   [0:0] or_ln36_fu_644_p2;
wire   [8:0] add_ln36_fu_638_p2;
wire   [31:0] zext_ln36_1_fu_655_p1;
wire   [31:0] select_ln39_2_fu_600_p3;
wire   [0:0] or_ln36_1_fu_650_p2;
wire   [3:0] add_ln37_fu_673_p2;
wire   [12:0] add_ln36_1_fu_687_p2;
wire   [31:0] shl_ln_i_fu_713_p3;
wire   [31:0] add_ln39_1_fu_721_p2;
wire   [31:0] sub_ln39_fu_734_p2;
wire   [26:0] tmp_31_i_fu_740_p4;
wire   [27:0] zext_ln39_fu_750_p1;
wire   [26:0] tmp_32_i_fu_760_p4;
wire   [0:0] tmp_15_fu_726_p3;
wire   [27:0] sub_ln39_1_fu_754_p2;
wire   [27:0] zext_ln39_1_fu_770_p1;
wire   [31:0] shl_ln39_mid1_i_fu_788_p3;
wire   [31:0] sub_ln39_2_fu_803_p2;
wire   [31:0] sub_ln39_4_fu_826_p2;
wire   [31:0] shl_ln39_2_fu_842_p2;
wire   [27:0] zext_ln39_2_fu_865_p1;
wire   [26:0] tmp_34_i_fu_874_p3;
wire   [27:0] zext_ln39_4_fu_892_p1;
wire   [26:0] tmp_36_i_fu_901_p4;
wire   [31:0] sub_ln39_6_fu_921_p2;
wire   [26:0] tmp_39_i_fu_926_p4;
wire   [27:0] zext_ln39_6_fu_936_p1;
wire   [26:0] tmp_40_i_fu_946_p4;
wire   [31:0] sub_ln39_8_fu_966_p2;
wire   [26:0] tmp_41_i_fu_971_p4;
wire   [27:0] zext_ln39_8_fu_981_p1;
wire   [26:0] tmp_42_i_fu_991_p4;
wire   [0:0] tmp_19_fu_959_p3;
wire   [27:0] sub_ln39_9_fu_985_p2;
wire   [27:0] zext_ln39_9_fu_1000_p1;
wire   [0:0] tmp_18_fu_914_p3;
wire   [27:0] sub_ln39_7_fu_940_p2;
wire   [27:0] zext_ln39_7_fu_955_p1;
wire   [0:0] tmp_17_fu_885_p3;
wire   [27:0] sub_ln39_5_fu_895_p2;
wire   [27:0] zext_ln39_5_fu_910_p1;
wire   [0:0] tmp_16_fu_858_p3;
wire   [27:0] sub_ln39_3_fu_868_p2;
wire   [27:0] zext_ln39_3_fu_881_p1;
wire   [27:0] select_ln39_6_fu_1028_p3;
wire   [27:0] select_ln39_5_fu_1020_p3;
wire   [27:0] select_ln33_4_fu_1036_p3;
wire   [27:0] select_ln39_4_fu_1012_p3;
wire   [27:0] select_ln35_3_fu_1042_p3;
wire   [27:0] select_ln39_3_fu_1004_p3;
wire   [27:0] select_ln39_7_fu_1049_p3;
wire   [27:0] select_ln36_fu_1056_p3;
wire  signed [59:0] sext_ln36_fu_1063_p1;
reg    grp_fu_701_ce;
reg    grp_fu_705_ce;
reg    grp_fu_709_ce;
wire    ap_CS_fsm_state29;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [74:0] grp_fu_382_p00;
wire   [74:0] grp_fu_382_p10;
wire   [99:0] grp_fu_394_p00;
wire   [99:0] grp_fu_394_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
end

mm_mm_mul_32ns_43ns_75_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 43 ),
    .dout_WIDTH( 75 ))
mm_mul_32ns_43ns_75_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_382_p0),
    .din1(grp_fu_382_p1),
    .ce(1'b1),
    .dout(grp_fu_382_p2)
);

mm_mm_mul_25ns_75ns_100_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 75 ),
    .dout_WIDTH( 100 ))
mm_mul_25ns_75ns_100_5_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(grp_fu_394_p1),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln39_reg_1217),
    .din1(N_read_reg_1087),
    .ce(grp_fu_701_ce),
    .dout(grp_fu_701_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(N_read_reg_1087),
    .din1(add_ln35_reg_1227),
    .ce(grp_fu_705_ce),
    .dout(grp_fu_705_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln39_3_reg_1242),
    .din1(N_read_reg_1087),
    .ce(grp_fu_709_ce),
    .dout(grp_fu_709_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_414_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter6_state18)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        ib_0_i_i_reg_286 <= select_ln33_3_fu_819_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ib_0_i_i_reg_286 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_1169 == 1'd0))) begin
        ii_0_i_i_reg_275 <= ii_fu_679_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ii_0_i_i_reg_275 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_414_p2 == 1'd0))) begin
        indvar_flatten160_i_reg_209 <= add_ln33_fu_419_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten160_i_reg_209 <= 100'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_414_p2 == 1'd0))) begin
        indvar_flatten44_i_reg_231 <= select_ln35_4_fu_472_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten44_i_reg_231 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_414_p2 == 1'd0))) begin
        indvar_flatten98_i_reg_220 <= select_ln34_fu_486_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten98_i_reg_220 <= 76'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_1169 == 1'd0))) begin
        indvar_flatten_i_reg_253 <= select_ln36_2_fu_693_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_i_reg_253 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_1169 == 1'd0))) begin
        k_0_i_i_reg_264 <= select_ln36_1_fu_665_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_0_i_i_reg_264 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_1169 == 1'd0))) begin
        kb_0_i_i_reg_242 <= select_ln35_2_fu_630_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        kb_0_i_i_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read_reg_1087 <= N_dout;
        tmp_14_reg_1095 <= tmp_14_fu_307_p1[32'd31];
        tmp_28_i_reg_1100 <= {{tmp_28_i_fu_315_p1[31:8]}};
        tmp_reg_1082 <= {{A_p_V_offset_dout[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1169_pp0_iter6_reg == 1'd0))) begin
        add_ln176_reg_1323 <= add_ln176_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        add_ln33_1_reg_1282 <= add_ln33_1_fu_782_p2;
        select_ln33_1_reg_1288[31 : 8] <= select_ln33_1_fu_796_p3[31 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_reg_1169 == 1'd0))) begin
        add_ln35_reg_1227 <= add_ln35_fu_570_p2;
        add_ln39_3_reg_1242 <= add_ln39_3_fu_659_p2;
        and_ln35_1_reg_1222 <= and_ln35_1_fu_564_p2;
        and_ln39_reg_1232 <= and_ln39_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln35_1_reg_1222_pp0_iter5_reg) & (1'd0 == and_ln39_reg_1232_pp0_iter5_reg) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        add_ln39_2_reg_1309[31 : 8] <= add_ln39_2_fu_847_p2[31 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln39_reg_1232_pp0_iter5_reg) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        add_ln39_4_reg_1316 <= add_ln39_4_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln33_2_reg_1188 == 1'd0) & (icmp_ln34_reg_1178 == 1'd0))) begin
        add_ln39_reg_1217 <= add_ln39_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln35_1_reg_1222_pp0_iter2_reg <= and_ln35_1_reg_1222;
        and_ln35_1_reg_1222_pp0_iter3_reg <= and_ln35_1_reg_1222_pp0_iter2_reg;
        and_ln35_1_reg_1222_pp0_iter4_reg <= and_ln35_1_reg_1222_pp0_iter3_reg;
        and_ln35_1_reg_1222_pp0_iter5_reg <= and_ln35_1_reg_1222_pp0_iter4_reg;
        and_ln35_1_reg_1222_pp0_iter6_reg <= and_ln35_1_reg_1222_pp0_iter5_reg;
        and_ln39_reg_1232_pp0_iter2_reg <= and_ln39_reg_1232;
        and_ln39_reg_1232_pp0_iter3_reg <= and_ln39_reg_1232_pp0_iter2_reg;
        and_ln39_reg_1232_pp0_iter4_reg <= and_ln39_reg_1232_pp0_iter3_reg;
        and_ln39_reg_1232_pp0_iter5_reg <= and_ln39_reg_1232_pp0_iter4_reg;
        and_ln39_reg_1232_pp0_iter6_reg <= and_ln39_reg_1232_pp0_iter5_reg;
        empty_22_reg_1203_pp0_iter2_reg <= empty_22_reg_1203_pp0_iter1_reg;
        empty_22_reg_1203_pp0_iter3_reg <= empty_22_reg_1203_pp0_iter2_reg;
        empty_22_reg_1203_pp0_iter4_reg <= empty_22_reg_1203_pp0_iter3_reg;
        empty_22_reg_1203_pp0_iter5_reg <= empty_22_reg_1203_pp0_iter4_reg;
        empty_22_reg_1203_pp0_iter6_reg <= empty_22_reg_1203_pp0_iter5_reg;
        empty_22_reg_1203_pp0_iter7_reg <= empty_22_reg_1203_pp0_iter6_reg;
        icmp_ln33_reg_1169_pp0_iter10_reg <= icmp_ln33_reg_1169_pp0_iter9_reg;
        icmp_ln33_reg_1169_pp0_iter11_reg <= icmp_ln33_reg_1169_pp0_iter10_reg;
        icmp_ln33_reg_1169_pp0_iter12_reg <= icmp_ln33_reg_1169_pp0_iter11_reg;
        icmp_ln33_reg_1169_pp0_iter13_reg <= icmp_ln33_reg_1169_pp0_iter12_reg;
        icmp_ln33_reg_1169_pp0_iter14_reg <= icmp_ln33_reg_1169_pp0_iter13_reg;
        icmp_ln33_reg_1169_pp0_iter15_reg <= icmp_ln33_reg_1169_pp0_iter14_reg;
        icmp_ln33_reg_1169_pp0_iter2_reg <= icmp_ln33_reg_1169_pp0_iter1_reg;
        icmp_ln33_reg_1169_pp0_iter3_reg <= icmp_ln33_reg_1169_pp0_iter2_reg;
        icmp_ln33_reg_1169_pp0_iter4_reg <= icmp_ln33_reg_1169_pp0_iter3_reg;
        icmp_ln33_reg_1169_pp0_iter5_reg <= icmp_ln33_reg_1169_pp0_iter4_reg;
        icmp_ln33_reg_1169_pp0_iter6_reg <= icmp_ln33_reg_1169_pp0_iter5_reg;
        icmp_ln33_reg_1169_pp0_iter7_reg <= icmp_ln33_reg_1169_pp0_iter6_reg;
        icmp_ln33_reg_1169_pp0_iter8_reg <= icmp_ln33_reg_1169_pp0_iter7_reg;
        icmp_ln33_reg_1169_pp0_iter9_reg <= icmp_ln33_reg_1169_pp0_iter8_reg;
        icmp_ln34_reg_1178_pp0_iter2_reg <= icmp_ln34_reg_1178_pp0_iter1_reg;
        icmp_ln34_reg_1178_pp0_iter3_reg <= icmp_ln34_reg_1178_pp0_iter2_reg;
        icmp_ln34_reg_1178_pp0_iter4_reg <= icmp_ln34_reg_1178_pp0_iter3_reg;
        icmp_ln34_reg_1178_pp0_iter5_reg <= icmp_ln34_reg_1178_pp0_iter4_reg;
        icmp_ln34_reg_1178_pp0_iter6_reg <= icmp_ln34_reg_1178_pp0_iter5_reg;
        select_ln33_2_reg_1188_pp0_iter2_reg <= select_ln33_2_reg_1188_pp0_iter1_reg;
        select_ln33_2_reg_1188_pp0_iter3_reg <= select_ln33_2_reg_1188_pp0_iter2_reg;
        select_ln33_2_reg_1188_pp0_iter4_reg <= select_ln33_2_reg_1188_pp0_iter3_reg;
        select_ln33_2_reg_1188_pp0_iter5_reg <= select_ln33_2_reg_1188_pp0_iter4_reg;
        select_ln33_2_reg_1188_pp0_iter6_reg <= select_ln33_2_reg_1188_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bound103_i_reg_1164 <= grp_fu_394_p2;
        bound49_cast_i_reg_1159[74 : 0] <= bound49_cast_i_fu_411_p1[74 : 0];
        bound5_i_reg_1154[42 : 11] <= bound5_i_fu_408_p1[42 : 11];
        zext_ln32_cast_i_reg_1149[57 : 0] <= zext_ln32_cast_i_fu_405_p1[57 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound49_i_reg_1128 <= grp_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_414_p2 == 1'd0))) begin
        empty_22_reg_1203 <= empty_22_fu_460_p2;
        icmp_ln34_reg_1178 <= icmp_ln34_fu_425_p2;
        or_ln35_reg_1196 <= or_ln35_fu_442_p2;
        select_ln33_2_reg_1188 <= select_ln33_2_fu_435_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_22_reg_1203_pp0_iter1_reg <= empty_22_reg_1203;
        icmp_ln33_reg_1169 <= icmp_ln33_fu_414_p2;
        icmp_ln33_reg_1169_pp0_iter1_reg <= icmp_ln33_reg_1169;
        icmp_ln34_reg_1178_pp0_iter1_reg <= icmp_ln34_reg_1178;
        select_ln33_2_reg_1188_pp0_iter1_reg <= select_ln33_2_reg_1188;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_1113[42 : 11] <= empty_fu_370_p1[42 : 11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln35_reg_1144 <= icmp_ln35_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln35_1_reg_1222_pp0_iter4_reg) & (1'd0 == and_ln39_reg_1232_pp0_iter4_reg) & (icmp_ln33_reg_1169_pp0_iter4_reg == 1'd0))) begin
        mul_ln39_1_reg_1267 <= grp_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln39_reg_1232_pp0_iter4_reg) & (icmp_ln33_reg_1169_pp0_iter4_reg == 1'd0))) begin
        mul_ln39_2_reg_1272 <= grp_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln39_reg_1232_pp0_iter4_reg) & (1'd0 == and_ln35_1_reg_1222_pp0_iter4_reg) & (select_ln33_2_reg_1188_pp0_iter4_reg == 1'd0) & (icmp_ln34_reg_1178_pp0_iter4_reg == 1'd0))) begin
        mul_ln39_reg_1262 <= grp_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln33_reg_1105 <= select_ln33_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln39_reg_1232_pp0_iter5_reg) & (1'd0 == and_ln35_1_reg_1222_pp0_iter5_reg) & (select_ln33_2_reg_1188_pp0_iter5_reg == 1'd0) & (icmp_ln34_reg_1178_pp0_iter5_reg == 1'd0))) begin
        select_ln39_reg_1277 <= select_ln39_fu_774_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_1178_pp0_iter5_reg == 1'd1) & (1'd0 == and_ln39_reg_1232_pp0_iter5_reg) & (1'd0 == and_ln35_1_reg_1222_pp0_iter5_reg) & (select_ln33_2_reg_1188_pp0_iter5_reg == 1'd0) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        tmp_33_i_reg_1294 <= {{sub_ln39_2_fu_803_p2[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln33_2_reg_1188_pp0_iter5_reg == 1'd1) & (1'd0 == and_ln39_reg_1232_pp0_iter5_reg) & (1'd0 == and_ln35_1_reg_1222_pp0_iter5_reg) & (icmp_ln33_reg_1169_pp0_iter5_reg == 1'd0))) begin
        tmp_35_i_reg_1304 <= {{sub_ln39_4_fu_826_p2[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0))) begin
        tmp_V_reg_1334 <= m_axi_A_p_V_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0))) begin
        AStreamWide_V_V_blk_n = AStreamWide_V_V_full_n;
    end else begin
        AStreamWide_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0))) begin
        AStreamWide_V_V_write = 1'b1;
    end else begin
        AStreamWide_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (empty_22_reg_1203_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        A_p_V_blk_n_AR = m_axi_A_p_V_ARREADY;
    end else begin
        A_p_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0))) begin
        A_p_V_blk_n_R = m_axi_A_p_V_RVALID;
    end else begin
        A_p_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_p_V_offset_blk_n = A_p_V_offset_empty_n;
    end else begin
        A_p_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        A_p_V_offset_read = 1'b1;
    end else begin
        A_p_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_blk_n = N_out_full_n;
    end else begin
        N_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_write = 1'b1;
    end else begin
        N_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_condition_pp0_exit_iter6_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter6_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_701_ce = 1'b1;
    end else begin
        grp_fu_701_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_705_ce = 1'b1;
    end else begin
        grp_fu_705_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_709_ce = 1'b1;
    end else begin
        grp_fu_709_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (empty_22_reg_1203_pp0_iter7_reg == 1'd1))) begin
        m_axi_A_p_V_ARVALID = 1'b1;
    end else begin
        m_axi_A_p_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0))) begin
        m_axi_A_p_V_RREADY = 1'b1;
    end else begin
        m_axi_A_p_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AStreamWide_V_V_din = tmp_V_reg_1334;

assign N_out_din = N_dout;

assign add_ln176_fu_1067_p2 = ($signed(zext_ln32_cast_i_reg_1149) + $signed(sext_ln36_fu_1063_p1));

assign add_ln33_1_fu_782_p2 = (24'd1 + ib_0_i_i_reg_286);

assign add_ln33_fu_419_p2 = (100'd1 + indvar_flatten160_i_reg_209);

assign add_ln34_fu_480_p2 = (indvar_flatten98_i_reg_220 + 76'd1);

assign add_ln35_1_fu_466_p2 = (indvar_flatten44_i_reg_231 + 44'd1);

assign add_ln35_fu_570_p2 = (32'd1 + select_ln35_fu_539_p3);

assign add_ln36_1_fu_687_p2 = (indvar_flatten_i_reg_253 + 13'd1);

assign add_ln36_fu_638_p2 = (9'd1 + select_ln39_1_fu_586_p3);

assign add_ln37_fu_673_p2 = (ii_0_i_i_reg_275 + 4'd1);

assign add_ln39_1_fu_721_p2 = (mul_ln39_reg_1262 + shl_ln_i_fu_713_p3);

assign add_ln39_2_fu_847_p2 = (shl_ln39_2_fu_842_p2 + select_ln33_1_fu_796_p3);

assign add_ln39_3_fu_659_p2 = (zext_ln36_1_fu_655_p1 + select_ln39_2_fu_600_p3);

assign add_ln39_4_fu_853_p2 = (mul_ln39_2_reg_1272 + select_ln33_1_fu_796_p3);

assign add_ln39_fu_504_p2 = (zext_ln36_fu_500_p1 + shl_ln39_fu_494_p2);

assign and_ln33_1_fu_533_p2 = (xor_ln33_fu_510_p2 & icmp_ln36_fu_527_p2);

assign and_ln33_fu_521_p2 = (xor_ln33_fu_510_p2 & icmp_ln37_fu_515_p2);

assign and_ln35_1_fu_564_p2 = (xor_ln35_fu_553_p2 & and_ln33_1_fu_533_p2);

assign and_ln35_fu_558_p2 = (xor_ln35_fu_553_p2 & and_ln33_fu_521_p2);

assign and_ln39_fu_624_p2 = (or_ln39_3_fu_619_p2 & and_ln35_fu_558_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == AStreamWide_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0)) | ((m_axi_A_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == AStreamWide_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0)) | ((m_axi_A_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == AStreamWide_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0)) | ((m_axi_A_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (1'b0 == A_p_V_offset_empty_n));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((m_axi_A_p_V_ARREADY == 1'b0) & (empty_22_reg_1203_pp0_iter7_reg == 1'd1));
end

assign ap_block_state20_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp0_stage0_iter15 = ((m_axi_A_p_V_RVALID == 1'b0) & (icmp_ln33_reg_1169_pp0_iter14_reg == 1'd0));
end

always @ (*) begin
    ap_block_state28_pp0_stage0_iter16 = ((1'b0 == AStreamWide_V_V_full_n) & (icmp_ln33_reg_1169_pp0_iter15_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound49_cast_i_fu_411_p1 = bound49_i_reg_1128;

assign bound5_i_fu_408_p1 = $unsigned(empty_reg_1113);

assign empty_21_fu_448_p1 = indvar_flatten160_i_reg_209[2:0];

assign empty_22_fu_460_p2 = ((tmp_20_fu_452_p3 == 100'd0) ? 1'b1 : 1'b0);

assign empty_fu_370_p1 = $signed(tmp_29_i_fu_363_p3);

assign grp_fu_382_p0 = grp_fu_382_p00;

assign grp_fu_382_p00 = $unsigned(sext_ln33_fu_360_p1);

assign grp_fu_382_p1 = grp_fu_382_p10;

assign grp_fu_382_p10 = $unsigned(empty_fu_370_p1);

assign grp_fu_394_p0 = grp_fu_394_p00;

assign grp_fu_394_p00 = $unsigned(select_ln33_reg_1105);

assign grp_fu_394_p1 = grp_fu_394_p10;

assign grp_fu_394_p10 = bound49_i_reg_1128;

assign icmp_ln33_fu_414_p2 = ((indvar_flatten160_i_reg_209 == bound103_i_reg_1164) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_425_p2 = ((indvar_flatten98_i_reg_220 == bound49_cast_i_reg_1159) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_430_p2 = ((indvar_flatten44_i_reg_231 == bound5_i_reg_1154) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_400_p2 = ((select_ln33_reg_1105 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_527_p2 = ((indvar_flatten_i_reg_253 == 13'd2048) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_515_p2 = ((ii_0_i_i_reg_275 == 4'd8) ? 1'b1 : 1'b0);

assign ii_fu_679_p3 = ((or_ln36_1_fu_650_p2[0:0] === 1'b1) ? 4'd1 : add_ln37_fu_673_p2);

assign m_axi_A_p_V_ARADDR = sext_ln176_fu_1072_p1;

assign m_axi_A_p_V_ARBURST = 2'd0;

assign m_axi_A_p_V_ARCACHE = 4'd0;

assign m_axi_A_p_V_ARID = 1'd0;

assign m_axi_A_p_V_ARLEN = 32'd8;

assign m_axi_A_p_V_ARLOCK = 2'd0;

assign m_axi_A_p_V_ARPROT = 3'd0;

assign m_axi_A_p_V_ARQOS = 4'd0;

assign m_axi_A_p_V_ARREGION = 4'd0;

assign m_axi_A_p_V_ARSIZE = 3'd0;

assign m_axi_A_p_V_ARUSER = 1'd0;

assign m_axi_A_p_V_AWADDR = 64'd0;

assign m_axi_A_p_V_AWBURST = 2'd0;

assign m_axi_A_p_V_AWCACHE = 4'd0;

assign m_axi_A_p_V_AWID = 1'd0;

assign m_axi_A_p_V_AWLEN = 32'd0;

assign m_axi_A_p_V_AWLOCK = 2'd0;

assign m_axi_A_p_V_AWPROT = 3'd0;

assign m_axi_A_p_V_AWQOS = 4'd0;

assign m_axi_A_p_V_AWREGION = 4'd0;

assign m_axi_A_p_V_AWSIZE = 3'd0;

assign m_axi_A_p_V_AWUSER = 1'd0;

assign m_axi_A_p_V_AWVALID = 1'b0;

assign m_axi_A_p_V_BREADY = 1'b0;

assign m_axi_A_p_V_WDATA = 512'd0;

assign m_axi_A_p_V_WID = 1'd0;

assign m_axi_A_p_V_WLAST = 1'b0;

assign m_axi_A_p_V_WSTRB = 64'd0;

assign m_axi_A_p_V_WUSER = 1'd0;

assign m_axi_A_p_V_WVALID = 1'b0;

assign or_ln35_fu_442_p2 = (select_ln33_2_fu_435_p3 | icmp_ln34_fu_425_p2);

assign or_ln36_1_fu_650_p2 = (or_ln36_fu_644_p2 | or_ln35_reg_1196);

assign or_ln36_fu_644_p2 = (and_ln39_fu_624_p2 | and_ln35_1_fu_564_p2);

assign or_ln39_1_fu_581_p2 = (or_ln39_fu_576_p2 | icmp_ln34_reg_1178);

assign or_ln39_2_fu_614_p2 = (xor_ln39_fu_608_p2 | icmp_ln34_reg_1178);

assign or_ln39_3_fu_619_p2 = (select_ln33_2_reg_1188 | or_ln39_2_fu_614_p2);

assign or_ln39_fu_576_p2 = (select_ln33_2_reg_1188 | and_ln35_1_fu_564_p2);

assign select_ln33_1_fu_796_p3 = ((icmp_ln34_reg_1178_pp0_iter5_reg[0:0] === 1'b1) ? shl_ln39_mid1_i_fu_788_p3 : shl_ln_i_fu_713_p3);

assign select_ln33_2_fu_435_p3 = ((icmp_ln34_fu_425_p2[0:0] === 1'b1) ? icmp_ln35_reg_1144 : icmp_ln35_1_fu_430_p2);

assign select_ln33_3_fu_819_p3 = ((icmp_ln34_reg_1178_pp0_iter5_reg[0:0] === 1'b1) ? add_ln33_1_fu_782_p2 : ib_0_i_i_reg_286);

assign select_ln33_4_fu_1036_p3 = ((icmp_ln34_reg_1178_pp0_iter6_reg[0:0] === 1'b1) ? select_ln39_6_fu_1028_p3 : select_ln39_reg_1277);

assign select_ln33_fu_353_p3 = ((tmp_14_reg_1095[0:0] === 1'b1) ? sub_ln33_1_fu_344_p2 : zext_ln33_1_fu_350_p1);

assign select_ln34_fu_486_p3 = ((icmp_ln34_fu_425_p2[0:0] === 1'b1) ? 76'd1 : add_ln34_fu_480_p2);

assign select_ln35_1_fu_546_p3 = ((or_ln35_reg_1196[0:0] === 1'b1) ? 32'd0 : shl_ln39_fu_494_p2);

assign select_ln35_2_fu_630_p3 = ((and_ln35_1_fu_564_p2[0:0] === 1'b1) ? add_ln35_fu_570_p2 : select_ln35_fu_539_p3);

assign select_ln35_3_fu_1042_p3 = ((select_ln33_2_reg_1188_pp0_iter6_reg[0:0] === 1'b1) ? select_ln39_5_fu_1020_p3 : select_ln33_4_fu_1036_p3);

assign select_ln35_4_fu_472_p3 = ((or_ln35_fu_442_p2[0:0] === 1'b1) ? 44'd1 : add_ln35_1_fu_466_p2);

assign select_ln35_fu_539_p3 = ((or_ln35_reg_1196[0:0] === 1'b1) ? 32'd0 : kb_0_i_i_reg_242);

assign select_ln36_1_fu_665_p3 = ((and_ln39_fu_624_p2[0:0] === 1'b1) ? add_ln36_fu_638_p2 : select_ln39_1_fu_586_p3);

assign select_ln36_2_fu_693_p3 = ((or_ln39_1_fu_581_p2[0:0] === 1'b1) ? 13'd1 : add_ln36_1_fu_687_p2);

assign select_ln36_fu_1056_p3 = ((and_ln39_reg_1232_pp0_iter6_reg[0:0] === 1'b1) ? select_ln39_3_fu_1004_p3 : select_ln39_7_fu_1049_p3);

assign select_ln39_1_fu_586_p3 = ((or_ln39_1_fu_581_p2[0:0] === 1'b1) ? 9'd0 : k_0_i_i_reg_264);

assign select_ln39_2_fu_600_p3 = ((and_ln35_1_fu_564_p2[0:0] === 1'b1) ? shl_ln39_1_fu_594_p2 : select_ln35_1_fu_546_p3);

assign select_ln39_3_fu_1004_p3 = ((tmp_19_fu_959_p3[0:0] === 1'b1) ? sub_ln39_9_fu_985_p2 : zext_ln39_9_fu_1000_p1);

assign select_ln39_4_fu_1012_p3 = ((tmp_18_fu_914_p3[0:0] === 1'b1) ? sub_ln39_7_fu_940_p2 : zext_ln39_7_fu_955_p1);

assign select_ln39_5_fu_1020_p3 = ((tmp_17_fu_885_p3[0:0] === 1'b1) ? sub_ln39_5_fu_895_p2 : zext_ln39_5_fu_910_p1);

assign select_ln39_6_fu_1028_p3 = ((tmp_16_fu_858_p3[0:0] === 1'b1) ? sub_ln39_3_fu_868_p2 : zext_ln39_3_fu_881_p1);

assign select_ln39_7_fu_1049_p3 = ((and_ln35_1_reg_1222_pp0_iter6_reg[0:0] === 1'b1) ? select_ln39_4_fu_1012_p3 : select_ln35_3_fu_1042_p3);

assign select_ln39_fu_774_p3 = ((tmp_15_fu_726_p3[0:0] === 1'b1) ? sub_ln39_1_fu_754_p2 : zext_ln39_1_fu_770_p1);

assign sext_ln176_fu_1072_p1 = $signed(add_ln176_reg_1323);

assign sext_ln33_fu_360_p1 = select_ln33_reg_1105;

assign sext_ln36_fu_1063_p1 = $signed(select_ln36_fu_1056_p3);

assign shl_ln39_1_fu_594_p2 = add_ln35_fu_570_p2 << 32'd8;

assign shl_ln39_2_fu_842_p2 = mul_ln39_1_reg_1267 << 32'd8;

assign shl_ln39_fu_494_p2 = kb_0_i_i_reg_242 << 32'd8;

assign shl_ln39_mid1_i_fu_788_p3 = {{add_ln33_1_fu_782_p2}, {8'd0}};

assign shl_ln_i_fu_713_p3 = {{ib_0_i_i_reg_286}, {8'd0}};

assign start_out = real_start;

assign sub_ln33_1_fu_344_p2 = (25'd0 - zext_ln33_fu_340_p1);

assign sub_ln33_fu_325_p2 = ($signed(32'd0) - $signed(N_read_reg_1087));

assign sub_ln39_1_fu_754_p2 = (28'd0 - zext_ln39_fu_750_p1);

assign sub_ln39_2_fu_803_p2 = (32'd0 - shl_ln39_mid1_i_fu_788_p3);

assign sub_ln39_3_fu_868_p2 = (28'd0 - zext_ln39_2_fu_865_p1);

assign sub_ln39_4_fu_826_p2 = (32'd0 - select_ln33_1_fu_796_p3);

assign sub_ln39_5_fu_895_p2 = (28'd0 - zext_ln39_4_fu_892_p1);

assign sub_ln39_6_fu_921_p2 = (32'd0 - add_ln39_2_reg_1309);

assign sub_ln39_7_fu_940_p2 = (28'd0 - zext_ln39_6_fu_936_p1);

assign sub_ln39_8_fu_966_p2 = (32'd0 - add_ln39_4_reg_1316);

assign sub_ln39_9_fu_985_p2 = (28'd0 - zext_ln39_8_fu_981_p1);

assign sub_ln39_fu_734_p2 = (32'd0 - add_ln39_1_fu_721_p2);

assign tmp_14_fu_307_p1 = N_dout;

assign tmp_15_fu_726_p3 = add_ln39_1_fu_721_p2[32'd31];

assign tmp_16_fu_858_p3 = add_ln33_1_reg_1282[32'd23];

assign tmp_17_fu_885_p3 = select_ln33_1_reg_1288[32'd31];

assign tmp_18_fu_914_p3 = add_ln39_2_reg_1309[32'd31];

assign tmp_19_fu_959_p3 = add_ln39_4_reg_1316[32'd31];

assign tmp_20_fu_452_p3 = {{97'd0}, {empty_21_fu_448_p1}};

assign tmp_28_i_fu_315_p1 = N_dout;

assign tmp_29_i_fu_363_p3 = {{select_ln33_reg_1105}, {11'd0}};

assign tmp_31_i_fu_740_p4 = {{sub_ln39_fu_734_p2[31:5]}};

assign tmp_32_i_fu_760_p4 = {{add_ln39_1_fu_721_p2[31:5]}};

assign tmp_34_i_fu_874_p3 = {{add_ln33_1_reg_1282}, {3'd0}};

assign tmp_36_i_fu_901_p4 = {{select_ln33_1_reg_1288[31:5]}};

assign tmp_39_i_fu_926_p4 = {{sub_ln39_6_fu_921_p2[31:5]}};

assign tmp_40_i_fu_946_p4 = {{add_ln39_2_reg_1309[31:5]}};

assign tmp_41_i_fu_971_p4 = {{sub_ln39_8_fu_966_p2[31:5]}};

assign tmp_42_i_fu_991_p4 = {{add_ln39_4_reg_1316[31:5]}};

assign tmp_i_fu_330_p4 = {{sub_ln33_fu_325_p2[31:8]}};

assign xor_ln33_fu_510_p2 = (icmp_ln34_reg_1178 ^ 1'd1);

assign xor_ln35_fu_553_p2 = (select_ln33_2_reg_1188 ^ 1'd1);

assign xor_ln39_fu_608_p2 = (icmp_ln36_fu_527_p2 ^ 1'd1);

assign zext_ln32_cast_i_fu_405_p1 = tmp_reg_1082;

assign zext_ln33_1_fu_350_p1 = tmp_28_i_reg_1100;

assign zext_ln33_fu_340_p1 = tmp_i_fu_330_p4;

assign zext_ln36_1_fu_655_p1 = add_ln36_fu_638_p2;

assign zext_ln36_fu_500_p1 = k_0_i_i_reg_264;

assign zext_ln39_1_fu_770_p1 = tmp_32_i_fu_760_p4;

assign zext_ln39_2_fu_865_p1 = tmp_33_i_reg_1294;

assign zext_ln39_3_fu_881_p1 = tmp_34_i_fu_874_p3;

assign zext_ln39_4_fu_892_p1 = tmp_35_i_reg_1304;

assign zext_ln39_5_fu_910_p1 = tmp_36_i_fu_901_p4;

assign zext_ln39_6_fu_936_p1 = tmp_39_i_fu_926_p4;

assign zext_ln39_7_fu_955_p1 = tmp_40_i_fu_946_p4;

assign zext_ln39_8_fu_981_p1 = tmp_41_i_fu_971_p4;

assign zext_ln39_9_fu_1000_p1 = tmp_42_i_fu_991_p4;

assign zext_ln39_fu_750_p1 = tmp_31_i_fu_740_p4;

always @ (posedge ap_clk) begin
    empty_reg_1113[10:0] <= 11'b00000000000;
    zext_ln32_cast_i_reg_1149[59:58] <= 2'b00;
    bound5_i_reg_1154[10:0] <= 11'b00000000000;
    bound5_i_reg_1154[43] <= 1'b0;
    bound49_cast_i_reg_1159[75] <= 1'b0;
    select_ln33_1_reg_1288[7:0] <= 8'b00000000;
    add_ln39_2_reg_1309[7:0] <= 8'b00000000;
end

endmodule //mm_readA
