// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_writeAB (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ABStream_V_V_dout,
        ABStream_V_V_empty_n,
        ABStream_V_V_read,
        m_axi_AB_V_AWVALID,
        m_axi_AB_V_AWREADY,
        m_axi_AB_V_AWADDR,
        m_axi_AB_V_AWID,
        m_axi_AB_V_AWLEN,
        m_axi_AB_V_AWSIZE,
        m_axi_AB_V_AWBURST,
        m_axi_AB_V_AWLOCK,
        m_axi_AB_V_AWCACHE,
        m_axi_AB_V_AWPROT,
        m_axi_AB_V_AWQOS,
        m_axi_AB_V_AWREGION,
        m_axi_AB_V_AWUSER,
        m_axi_AB_V_WVALID,
        m_axi_AB_V_WREADY,
        m_axi_AB_V_WDATA,
        m_axi_AB_V_WSTRB,
        m_axi_AB_V_WLAST,
        m_axi_AB_V_WID,
        m_axi_AB_V_WUSER,
        m_axi_AB_V_ARVALID,
        m_axi_AB_V_ARREADY,
        m_axi_AB_V_ARADDR,
        m_axi_AB_V_ARID,
        m_axi_AB_V_ARLEN,
        m_axi_AB_V_ARSIZE,
        m_axi_AB_V_ARBURST,
        m_axi_AB_V_ARLOCK,
        m_axi_AB_V_ARCACHE,
        m_axi_AB_V_ARPROT,
        m_axi_AB_V_ARQOS,
        m_axi_AB_V_ARREGION,
        m_axi_AB_V_ARUSER,
        m_axi_AB_V_RVALID,
        m_axi_AB_V_RREADY,
        m_axi_AB_V_RDATA,
        m_axi_AB_V_RLAST,
        m_axi_AB_V_RID,
        m_axi_AB_V_RUSER,
        m_axi_AB_V_RRESP,
        m_axi_AB_V_BVALID,
        m_axi_AB_V_BREADY,
        m_axi_AB_V_BRESP,
        m_axi_AB_V_BID,
        m_axi_AB_V_BUSER,
        AB_V_offset_dout,
        AB_V_offset_empty_n,
        AB_V_offset_read,
        N_dout,
        N_empty_n,
        N_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_pp0_stage0 = 8'd64;
parameter    ap_ST_fsm_state22 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] ABStream_V_V_dout;
input   ABStream_V_V_empty_n;
output   ABStream_V_V_read;
output   m_axi_AB_V_AWVALID;
input   m_axi_AB_V_AWREADY;
output  [63:0] m_axi_AB_V_AWADDR;
output  [0:0] m_axi_AB_V_AWID;
output  [31:0] m_axi_AB_V_AWLEN;
output  [2:0] m_axi_AB_V_AWSIZE;
output  [1:0] m_axi_AB_V_AWBURST;
output  [1:0] m_axi_AB_V_AWLOCK;
output  [3:0] m_axi_AB_V_AWCACHE;
output  [2:0] m_axi_AB_V_AWPROT;
output  [3:0] m_axi_AB_V_AWQOS;
output  [3:0] m_axi_AB_V_AWREGION;
output  [0:0] m_axi_AB_V_AWUSER;
output   m_axi_AB_V_WVALID;
input   m_axi_AB_V_WREADY;
output  [511:0] m_axi_AB_V_WDATA;
output  [63:0] m_axi_AB_V_WSTRB;
output   m_axi_AB_V_WLAST;
output  [0:0] m_axi_AB_V_WID;
output  [0:0] m_axi_AB_V_WUSER;
output   m_axi_AB_V_ARVALID;
input   m_axi_AB_V_ARREADY;
output  [63:0] m_axi_AB_V_ARADDR;
output  [0:0] m_axi_AB_V_ARID;
output  [31:0] m_axi_AB_V_ARLEN;
output  [2:0] m_axi_AB_V_ARSIZE;
output  [1:0] m_axi_AB_V_ARBURST;
output  [1:0] m_axi_AB_V_ARLOCK;
output  [3:0] m_axi_AB_V_ARCACHE;
output  [2:0] m_axi_AB_V_ARPROT;
output  [3:0] m_axi_AB_V_ARQOS;
output  [3:0] m_axi_AB_V_ARREGION;
output  [0:0] m_axi_AB_V_ARUSER;
input   m_axi_AB_V_RVALID;
output   m_axi_AB_V_RREADY;
input  [511:0] m_axi_AB_V_RDATA;
input   m_axi_AB_V_RLAST;
input  [0:0] m_axi_AB_V_RID;
input  [0:0] m_axi_AB_V_RUSER;
input  [1:0] m_axi_AB_V_RRESP;
input   m_axi_AB_V_BVALID;
output   m_axi_AB_V_BREADY;
input  [1:0] m_axi_AB_V_BRESP;
input  [0:0] m_axi_AB_V_BID;
input  [0:0] m_axi_AB_V_BUSER;
input  [63:0] AB_V_offset_dout;
input   AB_V_offset_empty_n;
output   AB_V_offset_read;
input  [31:0] N_dout;
input   N_empty_n;
output   N_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ABStream_V_V_read;
reg m_axi_AB_V_AWVALID;
reg m_axi_AB_V_WVALID;
reg m_axi_AB_V_BREADY;
reg AB_V_offset_read;
reg N_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ABStream_V_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln120_reg_993;
reg   [0:0] icmp_ln120_reg_993_pp0_iter7_reg;
reg    AB_V_blk_n_AW;
reg   [0:0] empty_14_reg_1016;
reg   [0:0] empty_14_reg_1016_pp0_iter7_reg;
reg    AB_V_blk_n_W;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln120_reg_993_pp0_iter8_reg;
reg    AB_V_blk_n_B;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] empty_17_reg_1077;
reg   [0:0] empty_17_reg_1077_pp0_iter13_reg;
reg    AB_V_offset_blk_n;
reg    N_blk_n;
reg   [67:0] indvar_flatten98_i_reg_188;
reg   [43:0] indvar_flatten44_i_reg_199;
reg   [23:0] ib_0_i_i_reg_210;
reg   [12:0] indvar_flatten_i_reg_221;
reg   [8:0] i_0_i_i_reg_232;
reg   [3:0] jj_0_i_i_reg_243;
reg   [31:0] jb_0_i_i_reg_254;
reg   [57:0] tmp_reg_933;
reg    ap_block_state1;
reg  signed [31:0] N_read_reg_938;
reg   [0:0] tmp_1_reg_947;
reg   [23:0] tmp_1_i_reg_952;
wire   [24:0] select_ln120_fu_321_p3;
reg   [24:0] select_ln120_reg_957;
wire    ap_CS_fsm_state2;
wire  signed [42:0] empty_fu_335_p1;
reg  signed [42:0] empty_reg_963;
wire    ap_CS_fsm_state3;
wire   [59:0] zext_ln119_cast_i_fu_352_p1;
reg   [59:0] zext_ln119_cast_i_reg_978;
wire    ap_CS_fsm_state6;
wire   [43:0] bound5_i_fu_355_p1;
reg   [43:0] bound5_i_reg_983;
wire   [67:0] grp_fu_346_p2;
reg   [67:0] bound49_i_reg_988;
wire   [0:0] icmp_ln120_fu_358_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state14_pp0_stage0_iter7;
reg    ap_block_state15_pp0_stage0_iter8;
reg    ap_block_state15_io;
wire    ap_block_state16_pp0_stage0_iter9;
reg    ap_block_state16_io;
wire    ap_block_state17_pp0_stage0_iter10;
wire    ap_block_state18_pp0_stage0_iter11;
wire    ap_block_state19_pp0_stage0_iter12;
wire    ap_block_state20_pp0_stage0_iter13;
reg    ap_block_state21_pp0_stage0_iter14;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_993_pp0_iter1_reg;
reg   [0:0] icmp_ln120_reg_993_pp0_iter2_reg;
reg   [0:0] icmp_ln120_reg_993_pp0_iter3_reg;
reg   [0:0] icmp_ln120_reg_993_pp0_iter4_reg;
reg   [0:0] icmp_ln120_reg_993_pp0_iter5_reg;
reg   [0:0] icmp_ln120_reg_993_pp0_iter6_reg;
wire   [67:0] add_ln120_fu_363_p2;
reg   [67:0] add_ln120_reg_997;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln121_fu_369_p2;
reg   [0:0] icmp_ln121_reg_1003;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter1_reg;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter3_reg;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter4_reg;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter5_reg;
reg   [0:0] icmp_ln121_reg_1003_pp0_iter6_reg;
wire   [0:0] empty_14_fu_386_p2;
reg   [0:0] empty_14_reg_1016_pp0_iter1_reg;
reg   [0:0] empty_14_reg_1016_pp0_iter2_reg;
reg   [0:0] empty_14_reg_1016_pp0_iter3_reg;
reg   [0:0] empty_14_reg_1016_pp0_iter4_reg;
reg   [0:0] empty_14_reg_1016_pp0_iter5_reg;
reg   [0:0] empty_14_reg_1016_pp0_iter6_reg;
wire   [43:0] select_ln121_1_fu_398_p3;
wire  signed [31:0] add_ln125_fu_418_p2;
reg  signed [31:0] add_ln125_reg_1025;
wire   [23:0] add_ln120_1_fu_424_p2;
reg   [23:0] add_ln120_1_reg_1030;
wire  signed [31:0] select_ln120_2_fu_438_p3;
reg  signed [31:0] select_ln120_2_reg_1035;
wire   [0:0] and_ln120_1_fu_468_p2;
reg   [0:0] and_ln120_1_reg_1040;
reg   [0:0] and_ln120_1_reg_1040_pp0_iter2_reg;
reg   [0:0] and_ln120_1_reg_1040_pp0_iter3_reg;
reg   [0:0] and_ln120_1_reg_1040_pp0_iter4_reg;
reg   [0:0] and_ln120_1_reg_1040_pp0_iter5_reg;
reg   [0:0] and_ln120_1_reg_1040_pp0_iter6_reg;
wire   [23:0] select_ln120_4_fu_474_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] and_ln125_fu_505_p2;
reg   [0:0] and_ln125_reg_1052;
reg   [0:0] and_ln125_reg_1052_pp0_iter2_reg;
reg   [0:0] and_ln125_reg_1052_pp0_iter3_reg;
reg   [0:0] and_ln125_reg_1052_pp0_iter4_reg;
reg   [0:0] and_ln125_reg_1052_pp0_iter5_reg;
reg   [0:0] and_ln125_reg_1052_pp0_iter6_reg;
wire  signed [31:0] add_ln125_3_fu_532_p2;
reg  signed [31:0] add_ln125_3_reg_1057;
wire   [8:0] select_ln122_1_fu_538_p3;
wire   [3:0] jj_fu_552_p3;
wire   [12:0] select_ln122_2_fu_566_p3;
wire   [0:0] empty_17_fu_585_p2;
reg   [0:0] empty_17_reg_1077_pp0_iter2_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter3_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter4_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter5_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter6_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter7_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter8_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter9_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter10_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter11_reg;
reg   [0:0] empty_17_reg_1077_pp0_iter12_reg;
wire   [31:0] grp_fu_591_p2;
reg   [31:0] mul_ln125_reg_1086;
wire   [31:0] grp_fu_598_p2;
reg   [31:0] mul_ln125_1_reg_1091;
reg   [31:0] mul_ln125_1_reg_1091_pp0_iter6_reg;
wire   [31:0] grp_fu_603_p2;
reg   [31:0] mul_ln125_2_reg_1098;
wire   [31:0] grp_fu_607_p2;
reg   [31:0] mul_ln125_3_reg_1103;
wire   [27:0] select_ln125_fu_670_p3;
reg   [27:0] select_ln125_reg_1108;
reg   [26:0] tmp_7_i_reg_1113;
wire   [31:0] add_ln125_2_fu_732_p2;
reg   [31:0] add_ln125_2_reg_1118;
wire   [31:0] select_ln121_fu_737_p3;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] add_ln125_4_fu_744_p2;
reg   [31:0] add_ln125_4_reg_1130;
wire   [59:0] add_ln180_fu_918_p2;
reg   [59:0] add_ln180_reg_1137;
reg   [511:0] tmp_V_reg_1142;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_condition_pp0_exit_iter6_state13;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg   [67:0] ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4;
wire  signed [63:0] sext_ln180_fu_923_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] tmp_1_fu_275_p1;
wire  signed [31:0] tmp_1_i_fu_283_p1;
wire   [31:0] sub_ln120_fu_293_p2;
wire   [23:0] tmp_i_fu_298_p4;
wire   [24:0] zext_ln120_fu_308_p1;
wire   [24:0] sub_ln120_1_fu_312_p2;
wire   [24:0] zext_ln120_1_fu_318_p1;
wire   [35:0] tmp_2_i_fu_328_p3;
wire   [24:0] grp_fu_346_p0;
wire   [42:0] grp_fu_346_p1;
wire   [2:0] empty_13_fu_374_p1;
wire   [67:0] tmp_6_fu_378_p3;
wire   [43:0] add_ln121_1_fu_392_p2;
wire   [31:0] zext_ln122_fu_414_p1;
wire   [31:0] shl_ln_i_fu_406_p3;
wire   [31:0] shl_ln125_mid1_i_fu_430_p3;
wire   [0:0] icmp_ln123_fu_450_p2;
wire   [0:0] xor_ln120_fu_445_p2;
wire   [0:0] icmp_ln122_fu_462_p2;
wire   [0:0] or_ln125_fu_481_p2;
wire   [0:0] xor_ln125_fu_494_p2;
wire   [0:0] and_ln120_fu_456_p2;
wire   [0:0] or_ln125_1_fu_500_p2;
wire   [8:0] select_ln125_1_fu_486_p3;
wire   [0:0] or_ln122_fu_517_p2;
wire   [8:0] add_ln122_fu_511_p2;
wire   [31:0] zext_ln122_1_fu_528_p1;
wire   [0:0] or_ln122_1_fu_523_p2;
wire   [3:0] add_ln123_fu_546_p2;
wire   [12:0] add_ln122_1_fu_560_p2;
wire   [2:0] empty_16_fu_574_p1;
wire   [67:0] tmp_7_fu_577_p3;
wire   [23:0] grp_fu_598_p1;
wire   [31:0] shl_ln125_fu_611_p2;
wire   [31:0] add_ln125_1_fu_617_p2;
wire   [31:0] sub_ln125_fu_630_p2;
wire   [26:0] tmp_4_i_fu_636_p4;
wire   [27:0] zext_ln125_fu_646_p1;
wire   [26:0] tmp_5_i_fu_656_p4;
wire   [0:0] tmp_2_fu_622_p3;
wire   [27:0] sub_ln125_1_fu_650_p2;
wire   [27:0] zext_ln125_1_fu_666_p1;
wire   [31:0] shl_ln125_1_fu_692_p2;
wire   [31:0] sub_ln125_2_fu_697_p2;
wire   [31:0] select_ln120_1_fu_678_p3;
wire   [31:0] add_ln121_fu_713_p2;
wire   [31:0] shl_ln125_2_fu_719_p2;
wire   [31:0] select_ln120_3_fu_685_p3;
wire   [31:0] select_ln125_2_fu_725_p3;
wire   [27:0] zext_ln125_2_fu_759_p1;
wire   [23:0] trunc_ln125_fu_749_p1;
wire   [26:0] lshr_ln125_2_mid_i_fu_768_p3;
wire   [31:0] sub_ln125_4_fu_787_p2;
wire   [26:0] tmp_9_i_fu_792_p4;
wire   [27:0] zext_ln125_4_fu_802_p1;
wire   [26:0] tmp_10_i_fu_812_p4;
wire   [31:0] sub_ln125_6_fu_832_p2;
wire   [26:0] tmp_11_i_fu_837_p4;
wire   [27:0] zext_ln125_6_fu_847_p1;
wire   [26:0] tmp_12_i_fu_857_p4;
wire   [0:0] tmp_5_fu_825_p3;
wire   [27:0] sub_ln125_7_fu_851_p2;
wire   [27:0] zext_ln125_7_fu_866_p1;
wire   [0:0] tmp_4_fu_780_p3;
wire   [27:0] sub_ln125_5_fu_806_p2;
wire   [27:0] zext_ln125_5_fu_821_p1;
wire   [0:0] tmp_3_fu_752_p3;
wire   [27:0] sub_ln125_3_fu_762_p2;
wire   [27:0] zext_ln125_3_fu_776_p1;
wire   [27:0] select_ln125_5_fu_886_p3;
wire   [27:0] select_ln125_4_fu_878_p3;
wire   [27:0] select_ln120_5_fu_894_p3;
wire   [27:0] select_ln125_3_fu_870_p3;
wire   [27:0] select_ln125_6_fu_900_p3;
wire   [27:0] select_ln122_fu_907_p3;
wire  signed [59:0] sext_ln122_fu_914_p1;
reg    grp_fu_591_ce;
reg    grp_fu_598_ce;
reg    grp_fu_603_ce;
reg    grp_fu_607_ce;
wire    ap_CS_fsm_state22;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [67:0] grp_fu_346_p00;
wire   [67:0] grp_fu_346_p10;
wire   [31:0] grp_fu_598_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

mm_mm_mul_25ns_43ns_68_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 43 ),
    .dout_WIDTH( 68 ))
mm_mul_25ns_43ns_68_4_1_U335(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_346_p0),
    .din1(grp_fu_346_p1),
    .ce(1'b1),
    .dout(grp_fu_346_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U336(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln125_reg_1025),
    .din1(N_read_reg_938),
    .ce(grp_fu_591_ce),
    .dout(grp_fu_591_p2)
);

mm_mm_mul_32s_24ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_24ns_32_4_1_U337(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(N_read_reg_938),
    .din1(grp_fu_598_p1),
    .ce(grp_fu_598_ce),
    .dout(grp_fu_598_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U338(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln120_2_reg_1035),
    .din1(N_read_reg_938),
    .ce(grp_fu_603_ce),
    .dout(grp_fu_603_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U339(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln125_3_reg_1057),
    .din1(N_read_reg_938),
    .ce(grp_fu_607_ce),
    .dout(grp_fu_607_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_358_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter6_state13)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_i_reg_232 <= select_ln122_1_fu_538_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_i_reg_232 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ib_0_i_i_reg_210 <= select_ln120_4_fu_474_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ib_0_i_i_reg_210 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_358_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten44_i_reg_199 <= select_ln121_1_fu_398_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten44_i_reg_199 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten98_i_reg_188 <= add_ln120_reg_997;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten98_i_reg_188 <= 68'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_i_reg_221 <= select_ln122_2_fu_566_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_i_reg_221 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        jb_0_i_i_reg_254 <= select_ln121_fu_737_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        jb_0_i_i_reg_254 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        jj_0_i_i_reg_243 <= jj_fu_552_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        jj_0_i_i_reg_243 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == N_empty_n) | (1'b0 == AB_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read_reg_938 <= N_dout;
        tmp_1_i_reg_952 <= {{tmp_1_i_fu_283_p1[31:8]}};
        tmp_1_reg_947 <= tmp_1_fu_275_p1[32'd31];
        tmp_reg_933 <= {{AB_V_offset_dout[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln120_1_reg_1030 <= add_ln120_1_fu_424_p2;
        add_ln125_3_reg_1057 <= add_ln125_3_fu_532_p2;
        and_ln120_1_reg_1040 <= and_ln120_1_fu_468_p2;
        and_ln125_reg_1052 <= and_ln125_fu_505_p2;
        empty_17_reg_1077 <= empty_17_fu_585_p2;
        select_ln120_2_reg_1035[31 : 8] <= select_ln120_2_fu_438_p3[31 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln120_reg_997 <= add_ln120_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter5_reg) & (icmp_ln120_reg_993_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln120_1_reg_1040_pp0_iter5_reg))) begin
        add_ln125_2_reg_1118 <= add_ln125_2_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln125_reg_1052_pp0_iter5_reg))) begin
        add_ln125_4_reg_1130 <= add_ln125_4_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_reg_1003 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln125_reg_1025 <= add_ln125_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln180_reg_1137 <= add_ln180_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln120_1_reg_1040_pp0_iter2_reg <= and_ln120_1_reg_1040;
        and_ln120_1_reg_1040_pp0_iter3_reg <= and_ln120_1_reg_1040_pp0_iter2_reg;
        and_ln120_1_reg_1040_pp0_iter4_reg <= and_ln120_1_reg_1040_pp0_iter3_reg;
        and_ln120_1_reg_1040_pp0_iter5_reg <= and_ln120_1_reg_1040_pp0_iter4_reg;
        and_ln120_1_reg_1040_pp0_iter6_reg <= and_ln120_1_reg_1040_pp0_iter5_reg;
        and_ln125_reg_1052_pp0_iter2_reg <= and_ln125_reg_1052;
        and_ln125_reg_1052_pp0_iter3_reg <= and_ln125_reg_1052_pp0_iter2_reg;
        and_ln125_reg_1052_pp0_iter4_reg <= and_ln125_reg_1052_pp0_iter3_reg;
        and_ln125_reg_1052_pp0_iter5_reg <= and_ln125_reg_1052_pp0_iter4_reg;
        and_ln125_reg_1052_pp0_iter6_reg <= and_ln125_reg_1052_pp0_iter5_reg;
        empty_14_reg_1016_pp0_iter2_reg <= empty_14_reg_1016_pp0_iter1_reg;
        empty_14_reg_1016_pp0_iter3_reg <= empty_14_reg_1016_pp0_iter2_reg;
        empty_14_reg_1016_pp0_iter4_reg <= empty_14_reg_1016_pp0_iter3_reg;
        empty_14_reg_1016_pp0_iter5_reg <= empty_14_reg_1016_pp0_iter4_reg;
        empty_14_reg_1016_pp0_iter6_reg <= empty_14_reg_1016_pp0_iter5_reg;
        empty_14_reg_1016_pp0_iter7_reg <= empty_14_reg_1016_pp0_iter6_reg;
        empty_17_reg_1077_pp0_iter10_reg <= empty_17_reg_1077_pp0_iter9_reg;
        empty_17_reg_1077_pp0_iter11_reg <= empty_17_reg_1077_pp0_iter10_reg;
        empty_17_reg_1077_pp0_iter12_reg <= empty_17_reg_1077_pp0_iter11_reg;
        empty_17_reg_1077_pp0_iter13_reg <= empty_17_reg_1077_pp0_iter12_reg;
        empty_17_reg_1077_pp0_iter2_reg <= empty_17_reg_1077;
        empty_17_reg_1077_pp0_iter3_reg <= empty_17_reg_1077_pp0_iter2_reg;
        empty_17_reg_1077_pp0_iter4_reg <= empty_17_reg_1077_pp0_iter3_reg;
        empty_17_reg_1077_pp0_iter5_reg <= empty_17_reg_1077_pp0_iter4_reg;
        empty_17_reg_1077_pp0_iter6_reg <= empty_17_reg_1077_pp0_iter5_reg;
        empty_17_reg_1077_pp0_iter7_reg <= empty_17_reg_1077_pp0_iter6_reg;
        empty_17_reg_1077_pp0_iter8_reg <= empty_17_reg_1077_pp0_iter7_reg;
        empty_17_reg_1077_pp0_iter9_reg <= empty_17_reg_1077_pp0_iter8_reg;
        icmp_ln120_reg_993_pp0_iter2_reg <= icmp_ln120_reg_993_pp0_iter1_reg;
        icmp_ln120_reg_993_pp0_iter3_reg <= icmp_ln120_reg_993_pp0_iter2_reg;
        icmp_ln120_reg_993_pp0_iter4_reg <= icmp_ln120_reg_993_pp0_iter3_reg;
        icmp_ln120_reg_993_pp0_iter5_reg <= icmp_ln120_reg_993_pp0_iter4_reg;
        icmp_ln120_reg_993_pp0_iter6_reg <= icmp_ln120_reg_993_pp0_iter5_reg;
        icmp_ln120_reg_993_pp0_iter7_reg <= icmp_ln120_reg_993_pp0_iter6_reg;
        icmp_ln120_reg_993_pp0_iter8_reg <= icmp_ln120_reg_993_pp0_iter7_reg;
        icmp_ln121_reg_1003_pp0_iter2_reg <= icmp_ln121_reg_1003_pp0_iter1_reg;
        icmp_ln121_reg_1003_pp0_iter3_reg <= icmp_ln121_reg_1003_pp0_iter2_reg;
        icmp_ln121_reg_1003_pp0_iter4_reg <= icmp_ln121_reg_1003_pp0_iter3_reg;
        icmp_ln121_reg_1003_pp0_iter5_reg <= icmp_ln121_reg_1003_pp0_iter4_reg;
        icmp_ln121_reg_1003_pp0_iter6_reg <= icmp_ln121_reg_1003_pp0_iter5_reg;
        mul_ln125_1_reg_1091_pp0_iter6_reg <= mul_ln125_1_reg_1091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound49_i_reg_988 <= grp_fu_346_p2;
        bound5_i_reg_983[42 : 11] <= bound5_i_fu_355_p1[42 : 11];
        zext_ln119_cast_i_reg_978[57 : 0] <= zext_ln119_cast_i_fu_352_p1[57 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_358_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_14_reg_1016 <= empty_14_fu_386_p2;
        icmp_ln121_reg_1003 <= icmp_ln121_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_14_reg_1016_pp0_iter1_reg <= empty_14_reg_1016;
        icmp_ln120_reg_993 <= icmp_ln120_fu_358_p2;
        icmp_ln120_reg_993_pp0_iter1_reg <= icmp_ln120_reg_993;
        icmp_ln121_reg_1003_pp0_iter1_reg <= icmp_ln121_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_963[42 : 11] <= empty_fu_335_p1[42 : 11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter4_reg) & (1'd0 == and_ln120_1_reg_1040_pp0_iter4_reg) & (icmp_ln120_reg_993_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1003_pp0_iter4_reg == 1'd1))) begin
        mul_ln125_1_reg_1091 <= grp_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter4_reg) & (icmp_ln120_reg_993_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln120_1_reg_1040_pp0_iter4_reg))) begin
        mul_ln125_2_reg_1098 <= grp_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln125_reg_1052_pp0_iter4_reg))) begin
        mul_ln125_3_reg_1103 <= grp_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter4_reg) & (1'd0 == and_ln120_1_reg_1040_pp0_iter4_reg) & (icmp_ln121_reg_1003_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln125_reg_1086 <= grp_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln120_reg_957 <= select_ln120_fu_321_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter5_reg) & (1'd0 == and_ln120_1_reg_1040_pp0_iter5_reg) & (icmp_ln121_reg_1003_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln125_reg_1108 <= select_ln125_fu_670_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln125_reg_1052_pp0_iter5_reg) & (1'd0 == and_ln120_1_reg_1040_pp0_iter5_reg) & (icmp_ln120_reg_993_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln121_reg_1003_pp0_iter5_reg == 1'd1))) begin
        tmp_7_i_reg_1113 <= {{sub_ln125_2_fu_697_p2[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_1142 <= ABStream_V_V_dout;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ABStream_V_V_blk_n = ABStream_V_V_empty_n;
    end else begin
        ABStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        ABStream_V_V_read = 1'b1;
    end else begin
        ABStream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (empty_14_reg_1016_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        AB_V_blk_n_AW = m_axi_AB_V_AWREADY;
    end else begin
        AB_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        AB_V_blk_n_B = m_axi_AB_V_BVALID;
    end else begin
        AB_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_993_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        AB_V_blk_n_W = m_axi_AB_V_WREADY;
    end else begin
        AB_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_V_offset_blk_n = AB_V_offset_empty_n;
    end else begin
        AB_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == N_empty_n) | (1'b0 == AB_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_V_offset_read = 1'b1;
    end else begin
        AB_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == N_empty_n) | (1'b0 == AB_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_condition_pp0_exit_iter6_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter6_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_993 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 = add_ln120_reg_997;
    end else begin
        ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 = indvar_flatten98_i_reg_188;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_591_ce = 1'b1;
    end else begin
        grp_fu_591_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_598_ce = 1'b1;
    end else begin
        grp_fu_598_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_603_ce = 1'b1;
    end else begin
        grp_fu_603_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_607_ce = 1'b1;
    end else begin
        grp_fu_607_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (empty_14_reg_1016_pp0_iter7_reg == 1'd1))) begin
        m_axi_AB_V_AWVALID = 1'b1;
    end else begin
        m_axi_AB_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter14 == 1'b1) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1))) begin
        m_axi_AB_V_BREADY = 1'b1;
    end else begin
        m_axi_AB_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_993_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        m_axi_AB_V_WVALID = 1'b1;
    end else begin
        m_axi_AB_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == N_empty_n) | (1'b0 == AB_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) & ~((ap_enable_reg_pp0_iter13 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter13 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_1_fu_424_p2 = (24'd1 + ib_0_i_i_reg_210);

assign add_ln120_fu_363_p2 = (68'd1 + ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4);

assign add_ln121_1_fu_392_p2 = (44'd1 + indvar_flatten44_i_reg_199);

assign add_ln121_fu_713_p2 = (32'd1 + select_ln120_1_fu_678_p3);

assign add_ln122_1_fu_560_p2 = (13'd1 + indvar_flatten_i_reg_221);

assign add_ln122_fu_511_p2 = (9'd1 + select_ln125_1_fu_486_p3);

assign add_ln123_fu_546_p2 = (4'd1 + jj_0_i_i_reg_243);

assign add_ln125_1_fu_617_p2 = (mul_ln125_reg_1086 + shl_ln125_fu_611_p2);

assign add_ln125_2_fu_732_p2 = (mul_ln125_2_reg_1098 + shl_ln125_2_fu_719_p2);

assign add_ln125_3_fu_532_p2 = ($signed(zext_ln122_1_fu_528_p1) + $signed(select_ln120_2_fu_438_p3));

assign add_ln125_4_fu_744_p2 = (mul_ln125_3_reg_1103 + select_ln125_2_fu_725_p3);

assign add_ln125_fu_418_p2 = (zext_ln122_fu_414_p1 + shl_ln_i_fu_406_p3);

assign add_ln180_fu_918_p2 = ($signed(zext_ln119_cast_i_reg_978) + $signed(sext_ln122_fu_914_p1));

assign and_ln120_1_fu_468_p2 = (xor_ln120_fu_445_p2 & icmp_ln122_fu_462_p2);

assign and_ln120_fu_456_p2 = (xor_ln120_fu_445_p2 & icmp_ln123_fu_450_p2);

assign and_ln125_fu_505_p2 = (or_ln125_1_fu_500_p2 & and_ln120_fu_456_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((m_axi_AB_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1)) | ((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ABStream_V_V_empty_n) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_AB_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ABStream_V_V_empty_n)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_AB_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ABStream_V_V_empty_n)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == N_empty_n) | (1'b0 == AB_V_offset_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_AB_V_AWREADY == 1'b0) & (empty_14_reg_1016_pp0_iter7_reg == 1'd1));
end

always @ (*) begin
    ap_block_state15_pp0_stage0_iter8 = ((icmp_ln120_reg_993_pp0_iter7_reg == 1'd0) & (1'b0 == ABStream_V_V_empty_n));
end

always @ (*) begin
    ap_block_state16_io = ((icmp_ln120_reg_993_pp0_iter8_reg == 1'd0) & (m_axi_AB_V_WREADY == 1'b0));
end

assign ap_block_state16_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage0_iter14 = ((m_axi_AB_V_BVALID == 1'b0) & (empty_17_reg_1077_pp0_iter13_reg == 1'd1));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound5_i_fu_355_p1 = $unsigned(empty_reg_963);

assign empty_13_fu_374_p1 = ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4[2:0];

assign empty_14_fu_386_p2 = ((tmp_6_fu_378_p3 == 68'd0) ? 1'b1 : 1'b0);

assign empty_16_fu_574_p1 = add_ln120_reg_997[2:0];

assign empty_17_fu_585_p2 = ((tmp_7_fu_577_p3 == 68'd0) ? 1'b1 : 1'b0);

assign empty_fu_335_p1 = $signed(tmp_2_i_fu_328_p3);

assign grp_fu_346_p0 = grp_fu_346_p00;

assign grp_fu_346_p00 = select_ln120_reg_957;

assign grp_fu_346_p1 = grp_fu_346_p10;

assign grp_fu_346_p10 = $unsigned(empty_fu_335_p1);

assign grp_fu_598_p1 = grp_fu_598_p10;

assign grp_fu_598_p10 = add_ln120_1_reg_1030;

assign icmp_ln120_fu_358_p2 = ((ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 == bound49_i_reg_988) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_369_p2 = ((indvar_flatten44_i_reg_199 == bound5_i_reg_983) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_462_p2 = ((indvar_flatten_i_reg_221 == 13'd2048) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_450_p2 = ((jj_0_i_i_reg_243 == 4'd8) ? 1'b1 : 1'b0);

assign jj_fu_552_p3 = ((or_ln122_1_fu_523_p2[0:0] === 1'b1) ? 4'd1 : add_ln123_fu_546_p2);

assign lshr_ln125_2_mid_i_fu_768_p3 = {{trunc_ln125_fu_749_p1}, {3'd0}};

assign m_axi_AB_V_ARADDR = 64'd0;

assign m_axi_AB_V_ARBURST = 2'd0;

assign m_axi_AB_V_ARCACHE = 4'd0;

assign m_axi_AB_V_ARID = 1'd0;

assign m_axi_AB_V_ARLEN = 32'd0;

assign m_axi_AB_V_ARLOCK = 2'd0;

assign m_axi_AB_V_ARPROT = 3'd0;

assign m_axi_AB_V_ARQOS = 4'd0;

assign m_axi_AB_V_ARREGION = 4'd0;

assign m_axi_AB_V_ARSIZE = 3'd0;

assign m_axi_AB_V_ARUSER = 1'd0;

assign m_axi_AB_V_ARVALID = 1'b0;

assign m_axi_AB_V_AWADDR = sext_ln180_fu_923_p1;

assign m_axi_AB_V_AWBURST = 2'd0;

assign m_axi_AB_V_AWCACHE = 4'd0;

assign m_axi_AB_V_AWID = 1'd0;

assign m_axi_AB_V_AWLEN = 32'd8;

assign m_axi_AB_V_AWLOCK = 2'd0;

assign m_axi_AB_V_AWPROT = 3'd0;

assign m_axi_AB_V_AWQOS = 4'd0;

assign m_axi_AB_V_AWREGION = 4'd0;

assign m_axi_AB_V_AWSIZE = 3'd0;

assign m_axi_AB_V_AWUSER = 1'd0;

assign m_axi_AB_V_RREADY = 1'b0;

assign m_axi_AB_V_WDATA = tmp_V_reg_1142;

assign m_axi_AB_V_WID = 1'd0;

assign m_axi_AB_V_WLAST = 1'b0;

assign m_axi_AB_V_WSTRB = 64'd18446744073709551615;

assign m_axi_AB_V_WUSER = 1'd0;

assign or_ln122_1_fu_523_p2 = (or_ln122_fu_517_p2 | icmp_ln121_reg_1003);

assign or_ln122_fu_517_p2 = (and_ln125_fu_505_p2 | and_ln120_1_fu_468_p2);

assign or_ln125_1_fu_500_p2 = (xor_ln125_fu_494_p2 | icmp_ln121_reg_1003);

assign or_ln125_fu_481_p2 = (icmp_ln121_reg_1003 | and_ln120_1_fu_468_p2);

assign select_ln120_1_fu_678_p3 = ((icmp_ln121_reg_1003_pp0_iter5_reg[0:0] === 1'b1) ? 32'd0 : jb_0_i_i_reg_254);

assign select_ln120_2_fu_438_p3 = ((icmp_ln121_reg_1003[0:0] === 1'b1) ? shl_ln125_mid1_i_fu_430_p3 : shl_ln_i_fu_406_p3);

assign select_ln120_3_fu_685_p3 = ((icmp_ln121_reg_1003_pp0_iter5_reg[0:0] === 1'b1) ? 32'd0 : shl_ln125_fu_611_p2);

assign select_ln120_4_fu_474_p3 = ((icmp_ln121_reg_1003[0:0] === 1'b1) ? add_ln120_1_fu_424_p2 : ib_0_i_i_reg_210);

assign select_ln120_5_fu_894_p3 = ((icmp_ln121_reg_1003_pp0_iter6_reg[0:0] === 1'b1) ? select_ln125_5_fu_886_p3 : select_ln125_reg_1108);

assign select_ln120_fu_321_p3 = ((tmp_1_reg_947[0:0] === 1'b1) ? sub_ln120_1_fu_312_p2 : zext_ln120_1_fu_318_p1);

assign select_ln121_1_fu_398_p3 = ((icmp_ln121_fu_369_p2[0:0] === 1'b1) ? 44'd1 : add_ln121_1_fu_392_p2);

assign select_ln121_fu_737_p3 = ((and_ln120_1_reg_1040_pp0_iter5_reg[0:0] === 1'b1) ? add_ln121_fu_713_p2 : select_ln120_1_fu_678_p3);

assign select_ln122_1_fu_538_p3 = ((and_ln125_fu_505_p2[0:0] === 1'b1) ? add_ln122_fu_511_p2 : select_ln125_1_fu_486_p3);

assign select_ln122_2_fu_566_p3 = ((or_ln125_fu_481_p2[0:0] === 1'b1) ? 13'd1 : add_ln122_1_fu_560_p2);

assign select_ln122_fu_907_p3 = ((and_ln125_reg_1052_pp0_iter6_reg[0:0] === 1'b1) ? select_ln125_3_fu_870_p3 : select_ln125_6_fu_900_p3);

assign select_ln125_1_fu_486_p3 = ((or_ln125_fu_481_p2[0:0] === 1'b1) ? 9'd0 : i_0_i_i_reg_232);

assign select_ln125_2_fu_725_p3 = ((and_ln120_1_reg_1040_pp0_iter5_reg[0:0] === 1'b1) ? shl_ln125_2_fu_719_p2 : select_ln120_3_fu_685_p3);

assign select_ln125_3_fu_870_p3 = ((tmp_5_fu_825_p3[0:0] === 1'b1) ? sub_ln125_7_fu_851_p2 : zext_ln125_7_fu_866_p1);

assign select_ln125_4_fu_878_p3 = ((tmp_4_fu_780_p3[0:0] === 1'b1) ? sub_ln125_5_fu_806_p2 : zext_ln125_5_fu_821_p1);

assign select_ln125_5_fu_886_p3 = ((tmp_3_fu_752_p3[0:0] === 1'b1) ? sub_ln125_3_fu_762_p2 : zext_ln125_3_fu_776_p1);

assign select_ln125_6_fu_900_p3 = ((and_ln120_1_reg_1040_pp0_iter6_reg[0:0] === 1'b1) ? select_ln125_4_fu_878_p3 : select_ln120_5_fu_894_p3);

assign select_ln125_fu_670_p3 = ((tmp_2_fu_622_p3[0:0] === 1'b1) ? sub_ln125_1_fu_650_p2 : zext_ln125_1_fu_666_p1);

assign sext_ln122_fu_914_p1 = $signed(select_ln122_fu_907_p3);

assign sext_ln180_fu_923_p1 = $signed(add_ln180_reg_1137);

assign shl_ln125_1_fu_692_p2 = mul_ln125_1_reg_1091 << 32'd8;

assign shl_ln125_2_fu_719_p2 = add_ln121_fu_713_p2 << 32'd8;

assign shl_ln125_fu_611_p2 = jb_0_i_i_reg_254 << 32'd8;

assign shl_ln125_mid1_i_fu_430_p3 = {{add_ln120_1_fu_424_p2}, {8'd0}};

assign shl_ln_i_fu_406_p3 = {{ib_0_i_i_reg_210}, {8'd0}};

assign sub_ln120_1_fu_312_p2 = (25'd0 - zext_ln120_fu_308_p1);

assign sub_ln120_fu_293_p2 = ($signed(32'd0) - $signed(N_read_reg_938));

assign sub_ln125_1_fu_650_p2 = (28'd0 - zext_ln125_fu_646_p1);

assign sub_ln125_2_fu_697_p2 = (32'd0 - shl_ln125_1_fu_692_p2);

assign sub_ln125_3_fu_762_p2 = (28'd0 - zext_ln125_2_fu_759_p1);

assign sub_ln125_4_fu_787_p2 = (32'd0 - add_ln125_2_reg_1118);

assign sub_ln125_5_fu_806_p2 = (28'd0 - zext_ln125_4_fu_802_p1);

assign sub_ln125_6_fu_832_p2 = (32'd0 - add_ln125_4_reg_1130);

assign sub_ln125_7_fu_851_p2 = (28'd0 - zext_ln125_6_fu_847_p1);

assign sub_ln125_fu_630_p2 = (32'd0 - add_ln125_1_fu_617_p2);

assign tmp_10_i_fu_812_p4 = {{add_ln125_2_reg_1118[31:5]}};

assign tmp_11_i_fu_837_p4 = {{sub_ln125_6_fu_832_p2[31:5]}};

assign tmp_12_i_fu_857_p4 = {{add_ln125_4_reg_1130[31:5]}};

assign tmp_1_fu_275_p1 = N_dout;

assign tmp_1_i_fu_283_p1 = N_dout;

assign tmp_2_fu_622_p3 = add_ln125_1_fu_617_p2[32'd31];

assign tmp_2_i_fu_328_p3 = {{select_ln120_reg_957}, {11'd0}};

assign tmp_3_fu_752_p3 = mul_ln125_1_reg_1091_pp0_iter6_reg[32'd23];

assign tmp_4_fu_780_p3 = add_ln125_2_reg_1118[32'd31];

assign tmp_4_i_fu_636_p4 = {{sub_ln125_fu_630_p2[31:5]}};

assign tmp_5_fu_825_p3 = add_ln125_4_reg_1130[32'd31];

assign tmp_5_i_fu_656_p4 = {{add_ln125_1_fu_617_p2[31:5]}};

assign tmp_6_fu_378_p3 = {{65'd0}, {empty_13_fu_374_p1}};

assign tmp_7_fu_577_p3 = {{65'd0}, {empty_16_fu_574_p1}};

assign tmp_9_i_fu_792_p4 = {{sub_ln125_4_fu_787_p2[31:5]}};

assign tmp_i_fu_298_p4 = {{sub_ln120_fu_293_p2[31:8]}};

assign trunc_ln125_fu_749_p1 = mul_ln125_1_reg_1091_pp0_iter6_reg[23:0];

assign xor_ln120_fu_445_p2 = (icmp_ln121_reg_1003 ^ 1'd1);

assign xor_ln125_fu_494_p2 = (icmp_ln122_fu_462_p2 ^ 1'd1);

assign zext_ln119_cast_i_fu_352_p1 = tmp_reg_933;

assign zext_ln120_1_fu_318_p1 = tmp_1_i_reg_952;

assign zext_ln120_fu_308_p1 = tmp_i_fu_298_p4;

assign zext_ln122_1_fu_528_p1 = add_ln122_fu_511_p2;

assign zext_ln122_fu_414_p1 = i_0_i_i_reg_232;

assign zext_ln125_1_fu_666_p1 = tmp_5_i_fu_656_p4;

assign zext_ln125_2_fu_759_p1 = tmp_7_i_reg_1113;

assign zext_ln125_3_fu_776_p1 = lshr_ln125_2_mid_i_fu_768_p3;

assign zext_ln125_4_fu_802_p1 = tmp_9_i_fu_792_p4;

assign zext_ln125_5_fu_821_p1 = tmp_10_i_fu_812_p4;

assign zext_ln125_6_fu_847_p1 = tmp_11_i_fu_837_p4;

assign zext_ln125_7_fu_866_p1 = tmp_12_i_fu_857_p4;

assign zext_ln125_fu_646_p1 = tmp_4_i_fu_636_p4;

always @ (posedge ap_clk) begin
    empty_reg_963[10:0] <= 11'b00000000000;
    zext_ln119_cast_i_reg_978[59:58] <= 2'b00;
    bound5_i_reg_983[10:0] <= 11'b00000000000;
    bound5_i_reg_983[43] <= 1'b0;
    select_ln120_2_reg_1035[7:0] <= 8'b00000000;
end

endmodule //mm_writeAB
