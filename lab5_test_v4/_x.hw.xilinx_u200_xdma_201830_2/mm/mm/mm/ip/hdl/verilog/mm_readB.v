// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_readB (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_B_p_V_AWVALID,
        m_axi_B_p_V_AWREADY,
        m_axi_B_p_V_AWADDR,
        m_axi_B_p_V_AWID,
        m_axi_B_p_V_AWLEN,
        m_axi_B_p_V_AWSIZE,
        m_axi_B_p_V_AWBURST,
        m_axi_B_p_V_AWLOCK,
        m_axi_B_p_V_AWCACHE,
        m_axi_B_p_V_AWPROT,
        m_axi_B_p_V_AWQOS,
        m_axi_B_p_V_AWREGION,
        m_axi_B_p_V_AWUSER,
        m_axi_B_p_V_WVALID,
        m_axi_B_p_V_WREADY,
        m_axi_B_p_V_WDATA,
        m_axi_B_p_V_WSTRB,
        m_axi_B_p_V_WLAST,
        m_axi_B_p_V_WID,
        m_axi_B_p_V_WUSER,
        m_axi_B_p_V_ARVALID,
        m_axi_B_p_V_ARREADY,
        m_axi_B_p_V_ARADDR,
        m_axi_B_p_V_ARID,
        m_axi_B_p_V_ARLEN,
        m_axi_B_p_V_ARSIZE,
        m_axi_B_p_V_ARBURST,
        m_axi_B_p_V_ARLOCK,
        m_axi_B_p_V_ARCACHE,
        m_axi_B_p_V_ARPROT,
        m_axi_B_p_V_ARQOS,
        m_axi_B_p_V_ARREGION,
        m_axi_B_p_V_ARUSER,
        m_axi_B_p_V_RVALID,
        m_axi_B_p_V_RREADY,
        m_axi_B_p_V_RDATA,
        m_axi_B_p_V_RLAST,
        m_axi_B_p_V_RID,
        m_axi_B_p_V_RUSER,
        m_axi_B_p_V_RRESP,
        m_axi_B_p_V_BVALID,
        m_axi_B_p_V_BREADY,
        m_axi_B_p_V_BRESP,
        m_axi_B_p_V_BID,
        m_axi_B_p_V_BUSER,
        B_p_V_offset_dout,
        B_p_V_offset_empty_n,
        B_p_V_offset_read,
        BStream_V_V_din,
        BStream_V_V_full_n,
        BStream_V_V_write,
        N_dout,
        N_empty_n,
        N_read
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 13'd2048;
parameter    ap_ST_fsm_state29 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_B_p_V_AWVALID;
input   m_axi_B_p_V_AWREADY;
output  [63:0] m_axi_B_p_V_AWADDR;
output  [0:0] m_axi_B_p_V_AWID;
output  [31:0] m_axi_B_p_V_AWLEN;
output  [2:0] m_axi_B_p_V_AWSIZE;
output  [1:0] m_axi_B_p_V_AWBURST;
output  [1:0] m_axi_B_p_V_AWLOCK;
output  [3:0] m_axi_B_p_V_AWCACHE;
output  [2:0] m_axi_B_p_V_AWPROT;
output  [3:0] m_axi_B_p_V_AWQOS;
output  [3:0] m_axi_B_p_V_AWREGION;
output  [0:0] m_axi_B_p_V_AWUSER;
output   m_axi_B_p_V_WVALID;
input   m_axi_B_p_V_WREADY;
output  [511:0] m_axi_B_p_V_WDATA;
output  [63:0] m_axi_B_p_V_WSTRB;
output   m_axi_B_p_V_WLAST;
output  [0:0] m_axi_B_p_V_WID;
output  [0:0] m_axi_B_p_V_WUSER;
output   m_axi_B_p_V_ARVALID;
input   m_axi_B_p_V_ARREADY;
output  [63:0] m_axi_B_p_V_ARADDR;
output  [0:0] m_axi_B_p_V_ARID;
output  [31:0] m_axi_B_p_V_ARLEN;
output  [2:0] m_axi_B_p_V_ARSIZE;
output  [1:0] m_axi_B_p_V_ARBURST;
output  [1:0] m_axi_B_p_V_ARLOCK;
output  [3:0] m_axi_B_p_V_ARCACHE;
output  [2:0] m_axi_B_p_V_ARPROT;
output  [3:0] m_axi_B_p_V_ARQOS;
output  [3:0] m_axi_B_p_V_ARREGION;
output  [0:0] m_axi_B_p_V_ARUSER;
input   m_axi_B_p_V_RVALID;
output   m_axi_B_p_V_RREADY;
input  [511:0] m_axi_B_p_V_RDATA;
input   m_axi_B_p_V_RLAST;
input  [0:0] m_axi_B_p_V_RID;
input  [0:0] m_axi_B_p_V_RUSER;
input  [1:0] m_axi_B_p_V_RRESP;
input   m_axi_B_p_V_BVALID;
output   m_axi_B_p_V_BREADY;
input  [1:0] m_axi_B_p_V_BRESP;
input  [0:0] m_axi_B_p_V_BID;
input  [0:0] m_axi_B_p_V_BUSER;
input  [63:0] B_p_V_offset_dout;
input   B_p_V_offset_empty_n;
output   B_p_V_offset_read;
output  [511:0] BStream_V_V_din;
input   BStream_V_V_full_n;
output   BStream_V_V_write;
input  [31:0] N_dout;
input   N_empty_n;
output   N_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_B_p_V_ARVALID;
reg m_axi_B_p_V_RREADY;
reg B_p_V_offset_read;
reg BStream_V_V_write;
reg N_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    B_p_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_19_reg_1134;
reg   [0:0] empty_19_reg_1134_pp0_iter7_reg;
reg    B_p_V_blk_n_R;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] icmp_ln48_reg_1098;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter14_reg;
reg    B_p_V_offset_blk_n;
reg    BStream_V_V_blk_n;
reg    ap_enable_reg_pp0_iter16;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter15_reg;
reg    N_blk_n;
reg   [99:0] indvar_flatten162_i_reg_179;
reg   [75:0] indvar_flatten98_i_reg_190;
reg   [43:0] indvar_flatten44_i_reg_201;
reg   [31:0] kb_0_i_i_reg_212;
reg   [12:0] indvar_flatten_i_reg_223;
reg   [8:0] k_0_i_i_reg_234;
reg   [3:0] jj_0_i_i_reg_245;
reg   [31:0] jb_0_i_i_reg_256;
reg   [57:0] tmp_reg_1011;
reg    ap_block_state1;
reg  signed [31:0] N_read_reg_1016;
reg   [0:0] tmp_8_reg_1024;
reg   [23:0] tmp_13_i_reg_1029;
wire  signed [24:0] select_ln48_fu_323_p3;
reg  signed [24:0] select_ln48_reg_1034;
wire    ap_CS_fsm_state2;
wire  signed [42:0] empty_fu_340_p1;
reg  signed [42:0] empty_reg_1042;
wire    ap_CS_fsm_state3;
wire   [74:0] grp_fu_352_p2;
reg   [74:0] bound49_i_reg_1057;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln50_fu_370_p2;
reg   [0:0] icmp_ln50_reg_1073;
wire   [59:0] zext_ln47_cast_i_fu_375_p1;
reg   [59:0] zext_ln47_cast_i_reg_1078;
wire    ap_CS_fsm_state11;
wire   [43:0] bound5_i_fu_378_p1;
reg   [43:0] bound5_i_reg_1083;
wire   [75:0] bound49_cast_i_fu_381_p1;
reg   [75:0] bound49_cast_i_reg_1088;
wire   [99:0] grp_fu_364_p2;
reg   [99:0] bound103_i_reg_1093;
wire   [0:0] icmp_ln48_fu_384_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_state16_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state18_pp0_stage0_iter6;
wire    ap_block_state19_pp0_stage0_iter7;
wire    ap_block_state20_pp0_stage0_iter8;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter9;
wire    ap_block_state22_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
wire    ap_block_state24_pp0_stage0_iter12;
wire    ap_block_state25_pp0_stage0_iter13;
wire    ap_block_state26_pp0_stage0_iter14;
reg    ap_block_state27_pp0_stage0_iter15;
reg    ap_block_state28_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter1_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter2_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter3_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter4_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter5_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter6_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter7_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter8_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter9_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter10_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter11_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter12_reg;
reg   [0:0] icmp_ln48_reg_1098_pp0_iter13_reg;
wire   [99:0] add_ln48_fu_389_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln49_fu_395_p2;
reg   [0:0] icmp_ln49_reg_1107;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter1_reg;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter2_reg;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter3_reg;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter4_reg;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter5_reg;
reg   [0:0] icmp_ln49_reg_1107_pp0_iter6_reg;
wire   [0:0] select_ln49_3_fu_405_p3;
reg   [0:0] select_ln49_3_reg_1117;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter1_reg;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter2_reg;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter3_reg;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter4_reg;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter5_reg;
reg   [0:0] select_ln49_3_reg_1117_pp0_iter6_reg;
wire   [0:0] or_ln54_fu_412_p2;
reg   [0:0] or_ln54_reg_1127;
wire   [0:0] empty_19_fu_430_p2;
reg   [0:0] empty_19_reg_1134_pp0_iter1_reg;
reg   [0:0] empty_19_reg_1134_pp0_iter2_reg;
reg   [0:0] empty_19_reg_1134_pp0_iter3_reg;
reg   [0:0] empty_19_reg_1134_pp0_iter4_reg;
reg   [0:0] empty_19_reg_1134_pp0_iter5_reg;
reg   [0:0] empty_19_reg_1134_pp0_iter6_reg;
wire   [43:0] select_ln50_1_fu_442_p3;
wire   [75:0] select_ln49_5_fu_456_p3;
wire  signed [31:0] add_ln54_fu_474_p2;
reg  signed [31:0] add_ln54_reg_1148;
wire   [0:0] and_ln54_1_fu_534_p2;
reg   [0:0] and_ln54_1_reg_1153;
reg   [0:0] and_ln54_1_reg_1153_pp0_iter2_reg;
reg   [0:0] and_ln54_1_reg_1153_pp0_iter3_reg;
reg   [0:0] and_ln54_1_reg_1153_pp0_iter4_reg;
reg   [0:0] and_ln54_1_reg_1153_pp0_iter5_reg;
reg   [0:0] and_ln54_1_reg_1153_pp0_iter6_reg;
wire  signed [31:0] add_ln50_fu_540_p2;
reg  signed [31:0] add_ln50_reg_1158;
wire   [0:0] and_ln54_2_fu_594_p2;
reg   [0:0] and_ln54_2_reg_1163;
reg   [0:0] and_ln54_2_reg_1163_pp0_iter2_reg;
reg   [0:0] and_ln54_2_reg_1163_pp0_iter3_reg;
reg   [0:0] and_ln54_2_reg_1163_pp0_iter4_reg;
reg   [0:0] and_ln54_2_reg_1163_pp0_iter5_reg;
reg   [0:0] and_ln54_2_reg_1163_pp0_iter6_reg;
wire   [31:0] select_ln50_fu_600_p3;
reg    ap_enable_reg_pp0_iter1;
wire  signed [31:0] add_ln54_3_fu_629_p2;
reg  signed [31:0] add_ln54_3_reg_1173;
wire   [8:0] select_ln51_1_fu_635_p3;
wire   [3:0] jj_fu_649_p3;
wire   [12:0] select_ln51_2_fu_663_p3;
wire   [31:0] grp_fu_671_p2;
reg   [31:0] mul_ln54_reg_1193;
wire   [31:0] grp_fu_675_p2;
reg   [31:0] mul_ln54_1_reg_1198;
wire   [31:0] grp_fu_679_p2;
reg   [31:0] mul_ln54_2_reg_1203;
wire   [27:0] select_ln54_fu_742_p3;
reg   [27:0] select_ln54_reg_1208;
wire   [31:0] add_ln49_fu_764_p2;
reg   [31:0] add_ln49_reg_1213;
reg   [26:0] tmp_20_i_reg_1219;
wire   [31:0] select_ln49_4_fu_799_p3;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] add_ln54_2_fu_811_p2;
reg   [31:0] add_ln54_2_reg_1229;
wire   [31:0] add_ln54_4_fu_817_p2;
reg   [31:0] add_ln54_4_reg_1236;
wire   [59:0] add_ln176_fu_996_p2;
reg   [59:0] add_ln176_reg_1243;
reg   [511:0] tmp_V_reg_1254;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_condition_pp0_exit_iter6_state18;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
wire  signed [63:0] sext_ln176_fu_1001_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] tmp_8_fu_277_p1;
wire  signed [31:0] tmp_13_i_fu_285_p1;
wire   [31:0] sub_ln48_fu_295_p2;
wire   [23:0] tmp_i_fu_300_p4;
wire   [24:0] zext_ln48_fu_310_p1;
wire   [24:0] sub_ln48_1_fu_314_p2;
wire   [24:0] zext_ln48_1_fu_320_p1;
wire   [35:0] tmp_14_i_fu_333_p3;
wire  signed [31:0] sext_ln48_fu_330_p1;
wire   [31:0] grp_fu_352_p0;
wire   [42:0] grp_fu_352_p1;
wire   [24:0] grp_fu_364_p0;
wire   [74:0] grp_fu_364_p1;
wire   [0:0] icmp_ln50_1_fu_400_p2;
wire   [2:0] empty_18_fu_418_p1;
wire   [99:0] tmp_13_fu_422_p3;
wire   [43:0] add_ln50_1_fu_436_p2;
wire   [75:0] add_ln49_1_fu_450_p2;
wire   [31:0] shl_ln54_1_fu_464_p2;
wire   [31:0] zext_ln51_fu_470_p1;
wire   [0:0] icmp_ln52_fu_485_p2;
wire   [0:0] xor_ln49_fu_480_p2;
wire   [0:0] icmp_ln51_fu_497_p2;
wire   [0:0] and_ln49_fu_491_p2;
wire   [0:0] xor_ln54_fu_523_p2;
wire   [0:0] and_ln49_1_fu_503_p2;
wire   [31:0] select_ln54_1_fu_509_p3;
wire   [0:0] or_ln54_1_fu_546_p2;
wire   [0:0] or_ln54_2_fu_551_p2;
wire   [31:0] shl_ln54_3_fu_564_p2;
wire   [31:0] select_ln54_3_fu_516_p3;
wire   [0:0] xor_ln54_1_fu_578_p2;
wire   [0:0] or_ln54_3_fu_584_p2;
wire   [0:0] and_ln54_fu_528_p2;
wire   [0:0] or_ln54_4_fu_589_p2;
wire   [8:0] select_ln54_6_fu_556_p3;
wire   [0:0] or_ln51_fu_614_p2;
wire   [8:0] add_ln51_fu_608_p2;
wire   [31:0] zext_ln51_1_fu_625_p1;
wire   [31:0] select_ln54_7_fu_570_p3;
wire   [0:0] or_ln51_1_fu_620_p2;
wire   [3:0] add_ln52_fu_643_p2;
wire   [12:0] add_ln51_1_fu_657_p2;
wire   [31:0] shl_ln54_fu_683_p2;
wire   [31:0] add_ln54_1_fu_689_p2;
wire   [31:0] sub_ln54_fu_702_p2;
wire   [26:0] tmp_17_i_fu_708_p4;
wire   [27:0] zext_ln54_fu_718_p1;
wire   [26:0] tmp_18_i_fu_728_p4;
wire   [0:0] tmp_9_fu_694_p3;
wire   [27:0] sub_ln54_1_fu_722_p2;
wire   [27:0] zext_ln54_1_fu_738_p1;
wire   [31:0] select_ln49_fu_750_p3;
wire   [31:0] shl_ln54_2_fu_770_p2;
wire   [31:0] select_ln49_1_fu_757_p3;
wire   [31:0] sub_ln54_2_fu_783_p2;
wire   [31:0] shl_ln54_4_fu_806_p2;
wire   [31:0] select_ln54_2_fu_776_p3;
wire   [27:0] zext_ln54_2_fu_838_p1;
wire   [23:0] trunc_ln54_fu_828_p1;
wire   [0:0] tmp_10_fu_831_p3;
wire   [27:0] sub_ln54_3_fu_841_p2;
wire   [27:0] trunc_ln54_2_mid_i_fu_847_p4;
wire   [27:0] select_ln54_4_fu_857_p3;
wire   [27:0] select_ln49_2_fu_822_p3;
wire   [31:0] sub_ln54_4_fu_879_p2;
wire   [26:0] tmp_24_i_fu_884_p4;
wire   [27:0] zext_ln54_3_fu_894_p1;
wire   [26:0] tmp_25_i_fu_904_p4;
wire   [0:0] tmp_11_fu_872_p3;
wire   [27:0] sub_ln54_5_fu_898_p2;
wire   [27:0] zext_ln54_4_fu_913_p1;
wire   [27:0] select_ln54_8_fu_917_p3;
wire   [27:0] select_ln54_5_fu_865_p3;
wire   [31:0] sub_ln54_6_fu_939_p2;
wire   [26:0] tmp_26_i_fu_944_p4;
wire   [27:0] zext_ln54_5_fu_954_p1;
wire   [26:0] tmp_27_i_fu_964_p4;
wire   [0:0] tmp_12_fu_932_p3;
wire   [27:0] sub_ln54_7_fu_958_p2;
wire   [27:0] zext_ln54_6_fu_973_p1;
wire   [27:0] select_ln54_10_fu_977_p3;
wire   [27:0] select_ln54_9_fu_925_p3;
wire   [27:0] select_ln51_fu_985_p3;
wire  signed [59:0] sext_ln51_fu_992_p1;
reg    grp_fu_671_ce;
reg    grp_fu_675_ce;
reg    grp_fu_679_ce;
wire    ap_CS_fsm_state29;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [74:0] grp_fu_352_p00;
wire   [74:0] grp_fu_352_p10;
wire   [99:0] grp_fu_364_p00;
wire   [99:0] grp_fu_364_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
end

mm_mm_mul_32ns_43ns_75_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 43 ),
    .dout_WIDTH( 75 ))
mm_mul_32ns_43ns_75_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_352_p0),
    .din1(grp_fu_352_p1),
    .ce(1'b1),
    .dout(grp_fu_352_p2)
);

mm_mm_mul_25ns_75ns_100_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 75 ),
    .dout_WIDTH( 100 ))
mm_mul_25ns_75ns_100_5_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_364_p0),
    .din1(grp_fu_364_p1),
    .ce(1'b1),
    .dout(grp_fu_364_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(N_read_reg_1016),
    .din1(add_ln54_reg_1148),
    .ce(grp_fu_671_ce),
    .dout(grp_fu_671_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(N_read_reg_1016),
    .din1(add_ln50_reg_1158),
    .ce(grp_fu_675_ce),
    .dout(grp_fu_675_p2)
);

mm_mm_mul_32s_32s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mm_mul_32s_32s_32_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln54_3_reg_1173),
    .din1(N_read_reg_1016),
    .ce(grp_fu_679_ce),
    .dout(grp_fu_679_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_fu_384_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter6_state18)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_fu_384_p2 == 1'd0))) begin
        indvar_flatten162_i_reg_179 <= add_ln48_fu_389_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten162_i_reg_179 <= 100'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_fu_384_p2 == 1'd0))) begin
        indvar_flatten44_i_reg_201 <= select_ln50_1_fu_442_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten44_i_reg_201 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_fu_384_p2 == 1'd0))) begin
        indvar_flatten98_i_reg_190 <= select_ln49_5_fu_456_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten98_i_reg_190 <= 76'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_reg_1098 == 1'd0))) begin
        indvar_flatten_i_reg_223 <= select_ln51_2_fu_663_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_i_reg_223 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter5_reg == 1'd0))) begin
        jb_0_i_i_reg_256 <= select_ln49_4_fu_799_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        jb_0_i_i_reg_256 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_reg_1098 == 1'd0))) begin
        jj_0_i_i_reg_245 <= jj_fu_649_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        jj_0_i_i_reg_245 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_reg_1098 == 1'd0))) begin
        k_0_i_i_reg_234 <= select_ln51_1_fu_635_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_0_i_i_reg_234 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_reg_1098 == 1'd0))) begin
        kb_0_i_i_reg_212 <= select_ln50_fu_600_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        kb_0_i_i_reg_212 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_empty_n) | (1'b0 == B_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read_reg_1016 <= N_dout;
        tmp_13_i_reg_1029 <= {{tmp_13_i_fu_285_p1[31:8]}};
        tmp_8_reg_1024 <= tmp_8_fu_277_p1[32'd31];
        tmp_reg_1011 <= {{B_p_V_offset_dout[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_1098_pp0_iter6_reg == 1'd0))) begin
        add_ln176_reg_1243 <= add_ln176_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_1098_pp0_iter5_reg == 1'd0))) begin
        add_ln49_reg_1213 <= add_ln49_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_reg_1098 == 1'd0))) begin
        add_ln50_reg_1158 <= add_ln50_fu_540_p2;
        add_ln54_3_reg_1173 <= add_ln54_3_fu_629_p2;
        and_ln54_1_reg_1153 <= and_ln54_1_fu_534_p2;
        and_ln54_2_reg_1163 <= and_ln54_2_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln54_1_reg_1153_pp0_iter5_reg) & (1'd0 == and_ln54_2_reg_1163_pp0_iter5_reg) & (icmp_ln48_reg_1098_pp0_iter5_reg == 1'd0))) begin
        add_ln54_2_reg_1229[31 : 8] <= add_ln54_2_fu_811_p2[31 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln54_2_reg_1163_pp0_iter5_reg) & (icmp_ln48_reg_1098_pp0_iter5_reg == 1'd0))) begin
        add_ln54_4_reg_1236 <= add_ln54_4_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln49_3_reg_1117 == 1'd0) & (icmp_ln49_reg_1107 == 1'd0))) begin
        add_ln54_reg_1148 <= add_ln54_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln54_1_reg_1153_pp0_iter2_reg <= and_ln54_1_reg_1153;
        and_ln54_1_reg_1153_pp0_iter3_reg <= and_ln54_1_reg_1153_pp0_iter2_reg;
        and_ln54_1_reg_1153_pp0_iter4_reg <= and_ln54_1_reg_1153_pp0_iter3_reg;
        and_ln54_1_reg_1153_pp0_iter5_reg <= and_ln54_1_reg_1153_pp0_iter4_reg;
        and_ln54_1_reg_1153_pp0_iter6_reg <= and_ln54_1_reg_1153_pp0_iter5_reg;
        and_ln54_2_reg_1163_pp0_iter2_reg <= and_ln54_2_reg_1163;
        and_ln54_2_reg_1163_pp0_iter3_reg <= and_ln54_2_reg_1163_pp0_iter2_reg;
        and_ln54_2_reg_1163_pp0_iter4_reg <= and_ln54_2_reg_1163_pp0_iter3_reg;
        and_ln54_2_reg_1163_pp0_iter5_reg <= and_ln54_2_reg_1163_pp0_iter4_reg;
        and_ln54_2_reg_1163_pp0_iter6_reg <= and_ln54_2_reg_1163_pp0_iter5_reg;
        empty_19_reg_1134_pp0_iter2_reg <= empty_19_reg_1134_pp0_iter1_reg;
        empty_19_reg_1134_pp0_iter3_reg <= empty_19_reg_1134_pp0_iter2_reg;
        empty_19_reg_1134_pp0_iter4_reg <= empty_19_reg_1134_pp0_iter3_reg;
        empty_19_reg_1134_pp0_iter5_reg <= empty_19_reg_1134_pp0_iter4_reg;
        empty_19_reg_1134_pp0_iter6_reg <= empty_19_reg_1134_pp0_iter5_reg;
        empty_19_reg_1134_pp0_iter7_reg <= empty_19_reg_1134_pp0_iter6_reg;
        icmp_ln48_reg_1098_pp0_iter10_reg <= icmp_ln48_reg_1098_pp0_iter9_reg;
        icmp_ln48_reg_1098_pp0_iter11_reg <= icmp_ln48_reg_1098_pp0_iter10_reg;
        icmp_ln48_reg_1098_pp0_iter12_reg <= icmp_ln48_reg_1098_pp0_iter11_reg;
        icmp_ln48_reg_1098_pp0_iter13_reg <= icmp_ln48_reg_1098_pp0_iter12_reg;
        icmp_ln48_reg_1098_pp0_iter14_reg <= icmp_ln48_reg_1098_pp0_iter13_reg;
        icmp_ln48_reg_1098_pp0_iter15_reg <= icmp_ln48_reg_1098_pp0_iter14_reg;
        icmp_ln48_reg_1098_pp0_iter2_reg <= icmp_ln48_reg_1098_pp0_iter1_reg;
        icmp_ln48_reg_1098_pp0_iter3_reg <= icmp_ln48_reg_1098_pp0_iter2_reg;
        icmp_ln48_reg_1098_pp0_iter4_reg <= icmp_ln48_reg_1098_pp0_iter3_reg;
        icmp_ln48_reg_1098_pp0_iter5_reg <= icmp_ln48_reg_1098_pp0_iter4_reg;
        icmp_ln48_reg_1098_pp0_iter6_reg <= icmp_ln48_reg_1098_pp0_iter5_reg;
        icmp_ln48_reg_1098_pp0_iter7_reg <= icmp_ln48_reg_1098_pp0_iter6_reg;
        icmp_ln48_reg_1098_pp0_iter8_reg <= icmp_ln48_reg_1098_pp0_iter7_reg;
        icmp_ln48_reg_1098_pp0_iter9_reg <= icmp_ln48_reg_1098_pp0_iter8_reg;
        icmp_ln49_reg_1107_pp0_iter2_reg <= icmp_ln49_reg_1107_pp0_iter1_reg;
        icmp_ln49_reg_1107_pp0_iter3_reg <= icmp_ln49_reg_1107_pp0_iter2_reg;
        icmp_ln49_reg_1107_pp0_iter4_reg <= icmp_ln49_reg_1107_pp0_iter3_reg;
        icmp_ln49_reg_1107_pp0_iter5_reg <= icmp_ln49_reg_1107_pp0_iter4_reg;
        icmp_ln49_reg_1107_pp0_iter6_reg <= icmp_ln49_reg_1107_pp0_iter5_reg;
        select_ln49_3_reg_1117_pp0_iter2_reg <= select_ln49_3_reg_1117_pp0_iter1_reg;
        select_ln49_3_reg_1117_pp0_iter3_reg <= select_ln49_3_reg_1117_pp0_iter2_reg;
        select_ln49_3_reg_1117_pp0_iter4_reg <= select_ln49_3_reg_1117_pp0_iter3_reg;
        select_ln49_3_reg_1117_pp0_iter5_reg <= select_ln49_3_reg_1117_pp0_iter4_reg;
        select_ln49_3_reg_1117_pp0_iter6_reg <= select_ln49_3_reg_1117_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bound103_i_reg_1093 <= grp_fu_364_p2;
        bound49_cast_i_reg_1088[74 : 0] <= bound49_cast_i_fu_381_p1[74 : 0];
        bound5_i_reg_1083[42 : 11] <= bound5_i_fu_378_p1[42 : 11];
        zext_ln47_cast_i_reg_1078[57 : 0] <= zext_ln47_cast_i_fu_375_p1[57 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound49_i_reg_1057 <= grp_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln48_fu_384_p2 == 1'd0))) begin
        empty_19_reg_1134 <= empty_19_fu_430_p2;
        icmp_ln49_reg_1107 <= icmp_ln49_fu_395_p2;
        or_ln54_reg_1127 <= or_ln54_fu_412_p2;
        select_ln49_3_reg_1117 <= select_ln49_3_fu_405_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_19_reg_1134_pp0_iter1_reg <= empty_19_reg_1134;
        icmp_ln48_reg_1098 <= icmp_ln48_fu_384_p2;
        icmp_ln48_reg_1098_pp0_iter1_reg <= icmp_ln48_reg_1098;
        icmp_ln49_reg_1107_pp0_iter1_reg <= icmp_ln49_reg_1107;
        select_ln49_3_reg_1117_pp0_iter1_reg <= select_ln49_3_reg_1117;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_1042[42 : 11] <= empty_fu_340_p1[42 : 11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln50_reg_1073 <= icmp_ln50_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln54_1_reg_1153_pp0_iter4_reg) & (1'd0 == and_ln54_2_reg_1163_pp0_iter4_reg) & (icmp_ln48_reg_1098_pp0_iter4_reg == 1'd0))) begin
        mul_ln54_1_reg_1198 <= grp_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln54_2_reg_1163_pp0_iter4_reg) & (icmp_ln48_reg_1098_pp0_iter4_reg == 1'd0))) begin
        mul_ln54_2_reg_1203 <= grp_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln54_2_reg_1163_pp0_iter4_reg) & (1'd0 == and_ln54_1_reg_1153_pp0_iter4_reg) & (select_ln49_3_reg_1117_pp0_iter4_reg == 1'd0) & (icmp_ln49_reg_1107_pp0_iter4_reg == 1'd0))) begin
        mul_ln54_reg_1193 <= grp_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln48_reg_1034 <= select_ln48_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln54_2_reg_1163_pp0_iter5_reg) & (1'd0 == and_ln54_1_reg_1153_pp0_iter5_reg) & (select_ln49_3_reg_1117_pp0_iter5_reg == 1'd0) & (icmp_ln49_reg_1107_pp0_iter5_reg == 1'd0))) begin
        select_ln54_reg_1208 <= select_ln54_fu_742_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln49_3_reg_1117_pp0_iter5_reg == 1'd1) & (1'd0 == and_ln54_2_reg_1163_pp0_iter5_reg) & (1'd0 == and_ln54_1_reg_1153_pp0_iter5_reg) & (icmp_ln48_reg_1098_pp0_iter5_reg == 1'd0))) begin
        tmp_20_i_reg_1219 <= {{sub_ln54_2_fu_783_p2[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0))) begin
        tmp_V_reg_1254 <= m_axi_B_p_V_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0))) begin
        BStream_V_V_blk_n = BStream_V_V_full_n;
    end else begin
        BStream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0))) begin
        BStream_V_V_write = 1'b1;
    end else begin
        BStream_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (empty_19_reg_1134_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_p_V_blk_n_AR = m_axi_B_p_V_ARREADY;
    end else begin
        B_p_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0))) begin
        B_p_V_blk_n_R = m_axi_B_p_V_RVALID;
    end else begin
        B_p_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_p_V_offset_blk_n = B_p_V_offset_empty_n;
    end else begin
        B_p_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_empty_n) | (1'b0 == B_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        B_p_V_offset_read = 1'b1;
    end else begin
        B_p_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_empty_n) | (1'b0 == B_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_condition_pp0_exit_iter6_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter6_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_671_ce = 1'b1;
    end else begin
        grp_fu_671_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_675_ce = 1'b1;
    end else begin
        grp_fu_675_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_679_ce = 1'b1;
    end else begin
        grp_fu_679_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (empty_19_reg_1134_pp0_iter7_reg == 1'd1))) begin
        m_axi_B_p_V_ARVALID = 1'b1;
    end else begin
        m_axi_B_p_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0))) begin
        m_axi_B_p_V_RREADY = 1'b1;
    end else begin
        m_axi_B_p_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_empty_n) | (1'b0 == B_p_V_offset_empty_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BStream_V_V_din = tmp_V_reg_1254;

assign add_ln176_fu_996_p2 = ($signed(zext_ln47_cast_i_reg_1078) + $signed(sext_ln51_fu_992_p1));

assign add_ln48_fu_389_p2 = (100'd1 + indvar_flatten162_i_reg_179);

assign add_ln49_1_fu_450_p2 = (indvar_flatten98_i_reg_190 + 76'd1);

assign add_ln49_fu_764_p2 = (32'd1 + select_ln49_fu_750_p3);

assign add_ln50_1_fu_436_p2 = (indvar_flatten44_i_reg_201 + 44'd1);

assign add_ln50_fu_540_p2 = (32'd1 + select_ln54_1_fu_509_p3);

assign add_ln51_1_fu_657_p2 = (indvar_flatten_i_reg_223 + 13'd1);

assign add_ln51_fu_608_p2 = (9'd1 + select_ln54_6_fu_556_p3);

assign add_ln52_fu_643_p2 = (jj_0_i_i_reg_245 + 4'd1);

assign add_ln54_1_fu_689_p2 = (shl_ln54_fu_683_p2 + mul_ln54_reg_1193);

assign add_ln54_2_fu_811_p2 = (shl_ln54_4_fu_806_p2 + select_ln54_2_fu_776_p3);

assign add_ln54_3_fu_629_p2 = (zext_ln51_1_fu_625_p1 + select_ln54_7_fu_570_p3);

assign add_ln54_4_fu_817_p2 = (mul_ln54_2_reg_1203 + select_ln54_2_fu_776_p3);

assign add_ln54_fu_474_p2 = (shl_ln54_1_fu_464_p2 + zext_ln51_fu_470_p1);

assign and_ln49_1_fu_503_p2 = (xor_ln49_fu_480_p2 & icmp_ln51_fu_497_p2);

assign and_ln49_fu_491_p2 = (xor_ln49_fu_480_p2 & icmp_ln52_fu_485_p2);

assign and_ln54_1_fu_534_p2 = (xor_ln54_fu_523_p2 & and_ln49_1_fu_503_p2);

assign and_ln54_2_fu_594_p2 = (or_ln54_4_fu_589_p2 & and_ln54_fu_528_p2);

assign and_ln54_fu_528_p2 = (xor_ln54_fu_523_p2 & and_ln49_fu_491_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == BStream_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0)) | ((m_axi_B_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == BStream_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0)) | ((m_axi_B_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == BStream_V_V_full_n) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0)) | ((m_axi_B_p_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == N_empty_n) | (1'b0 == B_p_V_offset_empty_n));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((m_axi_B_p_V_ARREADY == 1'b0) & (empty_19_reg_1134_pp0_iter7_reg == 1'd1));
end

assign ap_block_state20_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp0_stage0_iter15 = ((m_axi_B_p_V_RVALID == 1'b0) & (icmp_ln48_reg_1098_pp0_iter14_reg == 1'd0));
end

always @ (*) begin
    ap_block_state28_pp0_stage0_iter16 = ((1'b0 == BStream_V_V_full_n) & (icmp_ln48_reg_1098_pp0_iter15_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound49_cast_i_fu_381_p1 = bound49_i_reg_1057;

assign bound5_i_fu_378_p1 = $unsigned(empty_reg_1042);

assign empty_18_fu_418_p1 = indvar_flatten162_i_reg_179[2:0];

assign empty_19_fu_430_p2 = ((tmp_13_fu_422_p3 == 100'd0) ? 1'b1 : 1'b0);

assign empty_fu_340_p1 = $signed(tmp_14_i_fu_333_p3);

assign grp_fu_352_p0 = grp_fu_352_p00;

assign grp_fu_352_p00 = $unsigned(sext_ln48_fu_330_p1);

assign grp_fu_352_p1 = grp_fu_352_p10;

assign grp_fu_352_p10 = $unsigned(empty_fu_340_p1);

assign grp_fu_364_p0 = grp_fu_364_p00;

assign grp_fu_364_p00 = $unsigned(select_ln48_reg_1034);

assign grp_fu_364_p1 = grp_fu_364_p10;

assign grp_fu_364_p10 = bound49_i_reg_1057;

assign icmp_ln48_fu_384_p2 = ((indvar_flatten162_i_reg_179 == bound103_i_reg_1093) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_395_p2 = ((indvar_flatten98_i_reg_190 == bound49_cast_i_reg_1088) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_400_p2 = ((indvar_flatten44_i_reg_201 == bound5_i_reg_1083) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_370_p2 = ((select_ln48_reg_1034 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_497_p2 = ((indvar_flatten_i_reg_223 == 13'd2048) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_485_p2 = ((jj_0_i_i_reg_245 == 4'd8) ? 1'b1 : 1'b0);

assign jj_fu_649_p3 = ((or_ln51_1_fu_620_p2[0:0] === 1'b1) ? 4'd1 : add_ln52_fu_643_p2);

assign m_axi_B_p_V_ARADDR = sext_ln176_fu_1001_p1;

assign m_axi_B_p_V_ARBURST = 2'd0;

assign m_axi_B_p_V_ARCACHE = 4'd0;

assign m_axi_B_p_V_ARID = 1'd0;

assign m_axi_B_p_V_ARLEN = 32'd8;

assign m_axi_B_p_V_ARLOCK = 2'd0;

assign m_axi_B_p_V_ARPROT = 3'd0;

assign m_axi_B_p_V_ARQOS = 4'd0;

assign m_axi_B_p_V_ARREGION = 4'd0;

assign m_axi_B_p_V_ARSIZE = 3'd0;

assign m_axi_B_p_V_ARUSER = 1'd0;

assign m_axi_B_p_V_AWADDR = 64'd0;

assign m_axi_B_p_V_AWBURST = 2'd0;

assign m_axi_B_p_V_AWCACHE = 4'd0;

assign m_axi_B_p_V_AWID = 1'd0;

assign m_axi_B_p_V_AWLEN = 32'd0;

assign m_axi_B_p_V_AWLOCK = 2'd0;

assign m_axi_B_p_V_AWPROT = 3'd0;

assign m_axi_B_p_V_AWQOS = 4'd0;

assign m_axi_B_p_V_AWREGION = 4'd0;

assign m_axi_B_p_V_AWSIZE = 3'd0;

assign m_axi_B_p_V_AWUSER = 1'd0;

assign m_axi_B_p_V_AWVALID = 1'b0;

assign m_axi_B_p_V_BREADY = 1'b0;

assign m_axi_B_p_V_WDATA = 512'd0;

assign m_axi_B_p_V_WID = 1'd0;

assign m_axi_B_p_V_WLAST = 1'b0;

assign m_axi_B_p_V_WSTRB = 64'd0;

assign m_axi_B_p_V_WUSER = 1'd0;

assign m_axi_B_p_V_WVALID = 1'b0;

assign or_ln51_1_fu_620_p2 = (or_ln54_reg_1127 | or_ln51_fu_614_p2);

assign or_ln51_fu_614_p2 = (and_ln54_2_fu_594_p2 | and_ln54_1_fu_534_p2);

assign or_ln54_1_fu_546_p2 = (select_ln49_3_reg_1117 | and_ln54_1_fu_534_p2);

assign or_ln54_2_fu_551_p2 = (or_ln54_1_fu_546_p2 | icmp_ln49_reg_1107);

assign or_ln54_3_fu_584_p2 = (xor_ln54_1_fu_578_p2 | icmp_ln49_reg_1107);

assign or_ln54_4_fu_589_p2 = (select_ln49_3_reg_1117 | or_ln54_3_fu_584_p2);

assign or_ln54_fu_412_p2 = (select_ln49_3_fu_405_p3 | icmp_ln49_fu_395_p2);

assign select_ln48_fu_323_p3 = ((tmp_8_reg_1024[0:0] === 1'b1) ? sub_ln48_1_fu_314_p2 : zext_ln48_1_fu_320_p1);

assign select_ln49_1_fu_757_p3 = ((icmp_ln49_reg_1107_pp0_iter5_reg[0:0] === 1'b1) ? 32'd0 : shl_ln54_fu_683_p2);

assign select_ln49_2_fu_822_p3 = ((icmp_ln49_reg_1107_pp0_iter6_reg[0:0] === 1'b1) ? 28'd0 : select_ln54_reg_1208);

assign select_ln49_3_fu_405_p3 = ((icmp_ln49_fu_395_p2[0:0] === 1'b1) ? icmp_ln50_reg_1073 : icmp_ln50_1_fu_400_p2);

assign select_ln49_4_fu_799_p3 = ((select_ln49_3_reg_1117_pp0_iter5_reg[0:0] === 1'b1) ? add_ln49_fu_764_p2 : select_ln49_fu_750_p3);

assign select_ln49_5_fu_456_p3 = ((icmp_ln49_fu_395_p2[0:0] === 1'b1) ? 76'd1 : add_ln49_1_fu_450_p2);

assign select_ln49_fu_750_p3 = ((icmp_ln49_reg_1107_pp0_iter5_reg[0:0] === 1'b1) ? 32'd0 : jb_0_i_i_reg_256);

assign select_ln50_1_fu_442_p3 = ((or_ln54_fu_412_p2[0:0] === 1'b1) ? 44'd1 : add_ln50_1_fu_436_p2);

assign select_ln50_fu_600_p3 = ((and_ln54_1_fu_534_p2[0:0] === 1'b1) ? add_ln50_fu_540_p2 : select_ln54_1_fu_509_p3);

assign select_ln51_1_fu_635_p3 = ((and_ln54_2_fu_594_p2[0:0] === 1'b1) ? add_ln51_fu_608_p2 : select_ln54_6_fu_556_p3);

assign select_ln51_2_fu_663_p3 = ((or_ln54_2_fu_551_p2[0:0] === 1'b1) ? 13'd1 : add_ln51_1_fu_657_p2);

assign select_ln51_fu_985_p3 = ((and_ln54_2_reg_1163_pp0_iter6_reg[0:0] === 1'b1) ? select_ln54_10_fu_977_p3 : select_ln54_9_fu_925_p3);

assign select_ln54_10_fu_977_p3 = ((tmp_12_fu_932_p3[0:0] === 1'b1) ? sub_ln54_7_fu_958_p2 : zext_ln54_6_fu_973_p1);

assign select_ln54_1_fu_509_p3 = ((or_ln54_reg_1127[0:0] === 1'b1) ? 32'd0 : kb_0_i_i_reg_212);

assign select_ln54_2_fu_776_p3 = ((select_ln49_3_reg_1117_pp0_iter5_reg[0:0] === 1'b1) ? shl_ln54_2_fu_770_p2 : select_ln49_1_fu_757_p3);

assign select_ln54_3_fu_516_p3 = ((or_ln54_reg_1127[0:0] === 1'b1) ? 32'd0 : shl_ln54_1_fu_464_p2);

assign select_ln54_4_fu_857_p3 = ((tmp_10_fu_831_p3[0:0] === 1'b1) ? sub_ln54_3_fu_841_p2 : trunc_ln54_2_mid_i_fu_847_p4);

assign select_ln54_5_fu_865_p3 = ((select_ln49_3_reg_1117_pp0_iter6_reg[0:0] === 1'b1) ? select_ln54_4_fu_857_p3 : select_ln49_2_fu_822_p3);

assign select_ln54_6_fu_556_p3 = ((or_ln54_2_fu_551_p2[0:0] === 1'b1) ? 9'd0 : k_0_i_i_reg_234);

assign select_ln54_7_fu_570_p3 = ((and_ln54_1_fu_534_p2[0:0] === 1'b1) ? shl_ln54_3_fu_564_p2 : select_ln54_3_fu_516_p3);

assign select_ln54_8_fu_917_p3 = ((tmp_11_fu_872_p3[0:0] === 1'b1) ? sub_ln54_5_fu_898_p2 : zext_ln54_4_fu_913_p1);

assign select_ln54_9_fu_925_p3 = ((and_ln54_1_reg_1153_pp0_iter6_reg[0:0] === 1'b1) ? select_ln54_8_fu_917_p3 : select_ln54_5_fu_865_p3);

assign select_ln54_fu_742_p3 = ((tmp_9_fu_694_p3[0:0] === 1'b1) ? sub_ln54_1_fu_722_p2 : zext_ln54_1_fu_738_p1);

assign sext_ln176_fu_1001_p1 = $signed(add_ln176_reg_1243);

assign sext_ln48_fu_330_p1 = select_ln48_reg_1034;

assign sext_ln51_fu_992_p1 = $signed(select_ln51_fu_985_p3);

assign shl_ln54_1_fu_464_p2 = kb_0_i_i_reg_212 << 32'd8;

assign shl_ln54_2_fu_770_p2 = add_ln49_fu_764_p2 << 32'd8;

assign shl_ln54_3_fu_564_p2 = add_ln50_fu_540_p2 << 32'd8;

assign shl_ln54_4_fu_806_p2 = mul_ln54_1_reg_1198 << 32'd8;

assign shl_ln54_fu_683_p2 = jb_0_i_i_reg_256 << 32'd8;

assign start_out = real_start;

assign sub_ln48_1_fu_314_p2 = (25'd0 - zext_ln48_fu_310_p1);

assign sub_ln48_fu_295_p2 = ($signed(32'd0) - $signed(N_read_reg_1016));

assign sub_ln54_1_fu_722_p2 = (28'd0 - zext_ln54_fu_718_p1);

assign sub_ln54_2_fu_783_p2 = (32'd0 - shl_ln54_2_fu_770_p2);

assign sub_ln54_3_fu_841_p2 = (28'd0 - zext_ln54_2_fu_838_p1);

assign sub_ln54_4_fu_879_p2 = (32'd0 - add_ln54_2_reg_1229);

assign sub_ln54_5_fu_898_p2 = (28'd0 - zext_ln54_3_fu_894_p1);

assign sub_ln54_6_fu_939_p2 = (32'd0 - add_ln54_4_reg_1236);

assign sub_ln54_7_fu_958_p2 = (28'd0 - zext_ln54_5_fu_954_p1);

assign sub_ln54_fu_702_p2 = (32'd0 - add_ln54_1_fu_689_p2);

assign tmp_10_fu_831_p3 = add_ln49_reg_1213[32'd23];

assign tmp_11_fu_872_p3 = add_ln54_2_reg_1229[32'd31];

assign tmp_12_fu_932_p3 = add_ln54_4_reg_1236[32'd31];

assign tmp_13_fu_422_p3 = {{97'd0}, {empty_18_fu_418_p1}};

assign tmp_13_i_fu_285_p1 = N_dout;

assign tmp_14_i_fu_333_p3 = {{select_ln48_reg_1034}, {11'd0}};

assign tmp_17_i_fu_708_p4 = {{sub_ln54_fu_702_p2[31:5]}};

assign tmp_18_i_fu_728_p4 = {{add_ln54_1_fu_689_p2[31:5]}};

assign tmp_24_i_fu_884_p4 = {{sub_ln54_4_fu_879_p2[31:5]}};

assign tmp_25_i_fu_904_p4 = {{add_ln54_2_reg_1229[31:5]}};

assign tmp_26_i_fu_944_p4 = {{sub_ln54_6_fu_939_p2[31:5]}};

assign tmp_27_i_fu_964_p4 = {{add_ln54_4_reg_1236[31:5]}};

assign tmp_8_fu_277_p1 = N_dout;

assign tmp_9_fu_694_p3 = add_ln54_1_fu_689_p2[32'd31];

assign tmp_i_fu_300_p4 = {{sub_ln48_fu_295_p2[31:8]}};

assign trunc_ln54_2_mid_i_fu_847_p4 = {{{{1'd0}, {trunc_ln54_fu_828_p1}}}, {3'd0}};

assign trunc_ln54_fu_828_p1 = add_ln49_reg_1213[23:0];

assign xor_ln49_fu_480_p2 = (icmp_ln49_reg_1107 ^ 1'd1);

assign xor_ln54_1_fu_578_p2 = (icmp_ln51_fu_497_p2 ^ 1'd1);

assign xor_ln54_fu_523_p2 = (select_ln49_3_reg_1117 ^ 1'd1);

assign zext_ln47_cast_i_fu_375_p1 = tmp_reg_1011;

assign zext_ln48_1_fu_320_p1 = tmp_13_i_reg_1029;

assign zext_ln48_fu_310_p1 = tmp_i_fu_300_p4;

assign zext_ln51_1_fu_625_p1 = add_ln51_fu_608_p2;

assign zext_ln51_fu_470_p1 = k_0_i_i_reg_234;

assign zext_ln54_1_fu_738_p1 = tmp_18_i_fu_728_p4;

assign zext_ln54_2_fu_838_p1 = tmp_20_i_reg_1219;

assign zext_ln54_3_fu_894_p1 = tmp_24_i_fu_884_p4;

assign zext_ln54_4_fu_913_p1 = tmp_25_i_fu_904_p4;

assign zext_ln54_5_fu_954_p1 = tmp_26_i_fu_944_p4;

assign zext_ln54_6_fu_973_p1 = tmp_27_i_fu_964_p4;

assign zext_ln54_fu_718_p1 = tmp_17_i_fu_708_p4;

always @ (posedge ap_clk) begin
    empty_reg_1042[10:0] <= 11'b00000000000;
    zext_ln47_cast_i_reg_1078[59:58] <= 2'b00;
    bound5_i_reg_1083[10:0] <= 11'b00000000000;
    bound5_i_reg_1083[43] <= 1'b0;
    bound49_cast_i_reg_1088[75] <= 1'b0;
    add_ln54_2_reg_1229[7:0] <= 8'b00000000;
end

endmodule //mm_readB
