// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mm_changeARate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AStreamWide_V_V_dout,
        AStreamWide_V_V_empty_n,
        AStreamWide_V_V_read,
        AStream_V_din,
        AStream_V_full_n,
        AStream_V_write,
        N_dout,
        N_empty_n,
        N_read,
        N_out_din,
        N_out_full_n,
        N_out_write
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage0 = 14'd4096;
parameter    ap_ST_fsm_state15 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] AStreamWide_V_V_dout;
input   AStreamWide_V_V_empty_n;
output   AStreamWide_V_V_read;
output  [15:0] AStream_V_din;
input   AStream_V_full_n;
output   AStream_V_write;
input  [31:0] N_dout;
input   N_empty_n;
output   N_read;
output  [31:0] N_out_din;
input   N_out_full_n;
output   N_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg AStreamWide_V_V_read;
reg AStream_V_write;
reg N_read;
reg N_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    AStreamWide_V_V_blk_n;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln13_fu_268_p2;
reg    AStream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln19_reg_475;
reg    N_blk_n;
reg    N_out_blk_n;
reg   [5:0] i_0_i_reg_164;
reg   [0:0] tmp_reg_408;
reg    ap_block_state1;
reg   [23:0] tmp_s_reg_413;
reg   [23:0] tmp_3_reg_418;
wire  signed [24:0] select_ln13_fu_221_p3;
reg  signed [24:0] select_ln13_reg_423;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [74:0] grp_fu_250_p2;
reg   [74:0] bound16_reg_440;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [99:0] grp_fu_262_p2;
reg   [99:0] bound36_reg_455;
wire    ap_CS_fsm_state11;
reg    ap_block_state12;
wire   [99:0] add_ln13_fu_273_p2;
reg   [99:0] add_ln13_reg_464;
reg   [511:0] p_Val2_s_reg_469;
wire   [0:0] icmp_ln19_fu_279_p2;
wire    ap_block_state13_pp0_stage0_iter0;
reg    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] i_fu_285_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] sub_ln647_2_fu_373_p2;
reg   [9:0] sub_ln647_2_reg_484;
wire   [511:0] lshr_ln647_fu_383_p2;
reg   [511:0] lshr_ln647_reg_489;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state13;
reg   [99:0] indvar_flatten59_reg_153;
wire    ap_CS_fsm_state15;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] sub_ln13_fu_183_p2;
wire   [24:0] zext_ln13_fu_209_p1;
wire   [24:0] sub_ln13_1_fu_212_p2;
wire   [24:0] zext_ln13_1_fu_218_p1;
wire   [35:0] tmp_4_fu_231_p3;
wire  signed [31:0] sext_ln13_fu_228_p1;
wire  signed [42:0] empty_fu_238_p1;
wire   [31:0] grp_fu_250_p0;
wire   [42:0] grp_fu_250_p1;
wire   [24:0] grp_fu_262_p0;
wire   [74:0] grp_fu_262_p1;
wire   [4:0] trunc_ln21_fu_291_p1;
wire   [8:0] Lo_assign_fu_295_p3;
wire   [8:0] or_ln21_fu_303_p2;
wire   [9:0] zext_ln647_fu_315_p1;
wire   [9:0] zext_ln647_1_fu_319_p1;
wire   [0:0] icmp_ln647_fu_309_p2;
wire   [9:0] sub_ln647_fu_332_p2;
wire   [9:0] sub_ln647_1_fu_344_p2;
reg   [511:0] tmp_23_fu_323_p4;
wire   [9:0] xor_ln647_fu_338_p2;
wire   [9:0] select_ln647_fu_350_p3;
wire   [9:0] select_ln647_2_fu_365_p3;
wire   [511:0] select_ln647_1_fu_358_p3;
wire   [511:0] zext_ln647_2_fu_379_p1;
wire   [511:0] zext_ln647_3_fu_389_p1;
wire   [511:0] lshr_ln647_1_fu_392_p2;
wire   [511:0] p_Result_s_fu_398_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [74:0] grp_fu_250_p00;
wire   [74:0] grp_fu_250_p10;
wire   [99:0] grp_fu_262_p00;
wire   [99:0] grp_fu_262_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

mm_mm_mul_32ns_43ns_75_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 43 ),
    .dout_WIDTH( 75 ))
mm_mul_32ns_43ns_75_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_250_p0),
    .din1(grp_fu_250_p1),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

mm_mm_mul_25ns_75ns_100_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 75 ),
    .dout_WIDTH( 100 ))
mm_mul_25ns_75ns_100_5_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_262_p0),
    .din1(grp_fu_262_p1),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state13) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_reg_164 <= i_fu_285_p2;
    end else if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_0_i_reg_164 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten59_reg_153 <= add_ln13_reg_464;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten59_reg_153 <= 100'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state12))) begin
        add_ln13_reg_464 <= add_ln13_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bound16_reg_440 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bound36_reg_455 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln19_reg_475 <= icmp_ln19_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln647_reg_489 <= lshr_ln647_fu_383_p2;
        sub_ln647_2_reg_484[9 : 1] <= sub_ln647_2_fu_373_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        p_Val2_s_reg_469 <= AStreamWide_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln13_reg_423 <= select_ln13_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_3_reg_418 <= {{N_dout[31:8]}};
        tmp_reg_408 <= N_dout[32'd31];
        tmp_s_reg_413 <= {{sub_ln13_fu_183_p2[31:8]}};
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        AStreamWide_V_V_blk_n = AStreamWide_V_V_empty_n;
    end else begin
        AStreamWide_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        AStreamWide_V_V_read = 1'b1;
    end else begin
        AStreamWide_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AStream_V_blk_n = AStream_V_full_n;
    end else begin
        AStream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_475 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AStream_V_write = 1'b1;
    end else begin
        AStream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_blk_n = N_out_full_n;
    end else begin
        N_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_out_write = 1'b1;
    end else begin
        N_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_279_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n)) & (icmp_ln13_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln19_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln19_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AStream_V_din = p_Result_s_fu_398_p2[15:0];

assign Lo_assign_fu_295_p3 = {{trunc_ln21_fu_291_p1}, {4'd0}};

assign N_out_din = N_dout;

assign add_ln13_fu_273_p2 = (indvar_flatten59_reg_153 + 100'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln19_reg_475 == 1'd0) & (1'b0 == AStream_V_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln19_reg_475 == 1'd0) & (1'b0 == AStream_V_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln19_reg_475 == 1'd0) & (1'b0 == AStream_V_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == N_out_full_n) | (1'b0 == N_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state12 = ((icmp_ln13_fu_268_p2 == 1'd0) & (1'b0 == AStreamWide_V_V_empty_n));
end

assign ap_block_state13_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter1 = ((icmp_ln19_reg_475 == 1'd0) & (1'b0 == AStream_V_full_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_fu_238_p1 = $signed(tmp_4_fu_231_p3);

assign grp_fu_250_p0 = grp_fu_250_p00;

assign grp_fu_250_p00 = $unsigned(sext_ln13_fu_228_p1);

assign grp_fu_250_p1 = grp_fu_250_p10;

assign grp_fu_250_p10 = $unsigned(empty_fu_238_p1);

assign grp_fu_262_p0 = grp_fu_262_p00;

assign grp_fu_262_p00 = $unsigned(select_ln13_reg_423);

assign grp_fu_262_p1 = grp_fu_262_p10;

assign grp_fu_262_p10 = bound16_reg_440;

assign i_fu_285_p2 = (i_0_i_reg_164 + 6'd1);

assign icmp_ln13_fu_268_p2 = ((indvar_flatten59_reg_153 == bound36_reg_455) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_279_p2 = ((i_0_i_reg_164 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_309_p2 = ((Lo_assign_fu_295_p3 > or_ln21_fu_303_p2) ? 1'b1 : 1'b0);

assign lshr_ln647_1_fu_392_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln647_3_fu_389_p1;

assign lshr_ln647_fu_383_p2 = select_ln647_1_fu_358_p3 >> zext_ln647_2_fu_379_p1;

assign or_ln21_fu_303_p2 = (9'd15 | Lo_assign_fu_295_p3);

assign p_Result_s_fu_398_p2 = (lshr_ln647_reg_489 & lshr_ln647_1_fu_392_p2);

assign select_ln13_fu_221_p3 = ((tmp_reg_408[0:0] === 1'b1) ? sub_ln13_1_fu_212_p2 : zext_ln13_1_fu_218_p1);

assign select_ln647_1_fu_358_p3 = ((icmp_ln647_fu_309_p2[0:0] === 1'b1) ? tmp_23_fu_323_p4 : p_Val2_s_reg_469);

assign select_ln647_2_fu_365_p3 = ((icmp_ln647_fu_309_p2[0:0] === 1'b1) ? xor_ln647_fu_338_p2 : zext_ln647_fu_315_p1);

assign select_ln647_fu_350_p3 = ((icmp_ln647_fu_309_p2[0:0] === 1'b1) ? sub_ln647_fu_332_p2 : sub_ln647_1_fu_344_p2);

assign sext_ln13_fu_228_p1 = select_ln13_reg_423;

assign sub_ln13_1_fu_212_p2 = (25'd0 - zext_ln13_fu_209_p1);

assign sub_ln13_fu_183_p2 = (32'd0 - N_dout);

assign sub_ln647_1_fu_344_p2 = (zext_ln647_1_fu_319_p1 - zext_ln647_fu_315_p1);

assign sub_ln647_2_fu_373_p2 = (10'd511 - select_ln647_fu_350_p3);

assign sub_ln647_fu_332_p2 = (zext_ln647_fu_315_p1 - zext_ln647_1_fu_319_p1);

integer ap_tvar_int_0;

always @ (p_Val2_s_reg_469) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_23_fu_323_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_23_fu_323_p4[ap_tvar_int_0] = p_Val2_s_reg_469[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_4_fu_231_p3 = {{select_ln13_reg_423}, {11'd0}};

assign trunc_ln21_fu_291_p1 = i_0_i_reg_164[4:0];

assign xor_ln647_fu_338_p2 = (zext_ln647_fu_315_p1 ^ 10'd511);

assign zext_ln13_1_fu_218_p1 = tmp_3_reg_418;

assign zext_ln13_fu_209_p1 = tmp_s_reg_413;

assign zext_ln647_1_fu_319_p1 = or_ln21_fu_303_p2;

assign zext_ln647_2_fu_379_p1 = select_ln647_2_fu_365_p3;

assign zext_ln647_3_fu_389_p1 = sub_ln647_2_reg_484;

assign zext_ln647_fu_315_p1 = Lo_assign_fu_295_p3;

always @ (posedge ap_clk) begin
    sub_ln647_2_reg_484[0] <= 1'b0;
end

endmodule //mm_changeARate
