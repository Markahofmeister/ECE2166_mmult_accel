// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mm_changeARate_HH_
#define _mm_changeARate_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mm_mm_mul_32ns_43ns_75_4_1.h"
#include "mm_mm_mul_25ns_75ns_100_5_1.h"

namespace ap_rtl {

struct mm_changeARate : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<512> > AStreamWide_V_V_dout;
    sc_in< sc_logic > AStreamWide_V_V_empty_n;
    sc_out< sc_logic > AStreamWide_V_V_read;
    sc_out< sc_lv<16> > AStream_V_din;
    sc_in< sc_logic > AStream_V_full_n;
    sc_out< sc_logic > AStream_V_write;
    sc_in< sc_lv<32> > N_dout;
    sc_in< sc_logic > N_empty_n;
    sc_out< sc_logic > N_read;
    sc_out< sc_lv<32> > N_out_din;
    sc_in< sc_logic > N_out_full_n;
    sc_out< sc_logic > N_out_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mm_changeARate(sc_module_name name);
    SC_HAS_PROCESS(mm_changeARate);

    ~mm_changeARate();

    sc_trace_file* mVcdFile;

    mm_mm_mul_32ns_43ns_75_4_1<1,4,32,43,75>* mm_mul_32ns_43ns_75_4_1_U23;
    mm_mm_mul_25ns_75ns_100_5_1<1,5,25,75,100>* mm_mul_25ns_75ns_100_5_1_U24;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > AStreamWide_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > icmp_ln13_fu_268_p2;
    sc_signal< sc_logic > AStream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln19_reg_475;
    sc_signal< sc_logic > N_blk_n;
    sc_signal< sc_logic > N_out_blk_n;
    sc_signal< sc_lv<6> > i_0_i_reg_164;
    sc_signal< sc_lv<1> > tmp_reg_408;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<24> > tmp_s_reg_413;
    sc_signal< sc_lv<24> > tmp_3_reg_418;
    sc_signal< sc_lv<25> > select_ln13_fu_221_p3;
    sc_signal< sc_lv<25> > select_ln13_reg_423;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<75> > grp_fu_250_p2;
    sc_signal< sc_lv<75> > bound16_reg_440;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<100> > grp_fu_262_p2;
    sc_signal< sc_lv<100> > bound36_reg_455;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< bool > ap_block_state12;
    sc_signal< sc_lv<100> > add_ln13_fu_273_p2;
    sc_signal< sc_lv<100> > add_ln13_reg_464;
    sc_signal< sc_lv<512> > p_Val2_s_reg_469;
    sc_signal< sc_lv<1> > icmp_ln19_fu_279_p2;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > i_fu_285_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<10> > sub_ln647_2_fu_373_p2;
    sc_signal< sc_lv<10> > sub_ln647_2_reg_484;
    sc_signal< sc_lv<512> > lshr_ln647_fu_383_p2;
    sc_signal< sc_lv<512> > lshr_ln647_reg_489;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state13;
    sc_signal< sc_lv<100> > indvar_flatten59_reg_153;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > sub_ln13_fu_183_p2;
    sc_signal< sc_lv<25> > zext_ln13_fu_209_p1;
    sc_signal< sc_lv<25> > sub_ln13_1_fu_212_p2;
    sc_signal< sc_lv<25> > zext_ln13_1_fu_218_p1;
    sc_signal< sc_lv<36> > tmp_4_fu_231_p3;
    sc_signal< sc_lv<32> > sext_ln13_fu_228_p1;
    sc_signal< sc_lv<43> > empty_fu_238_p1;
    sc_signal< sc_lv<32> > grp_fu_250_p0;
    sc_signal< sc_lv<43> > grp_fu_250_p1;
    sc_signal< sc_lv<25> > grp_fu_262_p0;
    sc_signal< sc_lv<75> > grp_fu_262_p1;
    sc_signal< sc_lv<5> > trunc_ln21_fu_291_p1;
    sc_signal< sc_lv<9> > Lo_assign_fu_295_p3;
    sc_signal< sc_lv<9> > or_ln21_fu_303_p2;
    sc_signal< sc_lv<10> > zext_ln647_fu_315_p1;
    sc_signal< sc_lv<10> > zext_ln647_1_fu_319_p1;
    sc_signal< sc_lv<1> > icmp_ln647_fu_309_p2;
    sc_signal< sc_lv<10> > sub_ln647_fu_332_p2;
    sc_signal< sc_lv<10> > sub_ln647_1_fu_344_p2;
    sc_signal< sc_lv<512> > tmp_23_fu_323_p4;
    sc_signal< sc_lv<10> > xor_ln647_fu_338_p2;
    sc_signal< sc_lv<10> > select_ln647_fu_350_p3;
    sc_signal< sc_lv<10> > select_ln647_2_fu_365_p3;
    sc_signal< sc_lv<512> > select_ln647_1_fu_358_p3;
    sc_signal< sc_lv<512> > zext_ln647_2_fu_379_p1;
    sc_signal< sc_lv<512> > zext_ln647_3_fu_389_p1;
    sc_signal< sc_lv<512> > lshr_ln647_1_fu_392_p2;
    sc_signal< sc_lv<512> > p_Result_s_fu_398_p2;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<75> > grp_fu_250_p00;
    sc_signal< sc_lv<75> > grp_fu_250_p10;
    sc_signal< sc_lv<100> > grp_fu_262_p00;
    sc_signal< sc_lv<100> > grp_fu_262_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_pp0_stage0;
    static const sc_lv<14> ap_ST_fsm_state15;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<100> ap_const_lv100_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<100> ap_const_lv100_1;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<9> ap_const_lv9_F;
    static const sc_lv<32> ap_const_lv32_1FF;
    static const sc_lv<10> ap_const_lv10_1FF;
    static const sc_lv<512> ap_const_lv512_lc_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_AStreamWide_V_V_blk_n();
    void thread_AStreamWide_V_V_read();
    void thread_AStream_V_blk_n();
    void thread_AStream_V_din();
    void thread_AStream_V_write();
    void thread_Lo_assign_fu_295_p3();
    void thread_N_blk_n();
    void thread_N_out_blk_n();
    void thread_N_out_din();
    void thread_N_out_write();
    void thread_N_read();
    void thread_add_ln13_fu_273_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state12();
    void thread_ap_block_state13_pp0_stage0_iter0();
    void thread_ap_block_state14_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state13();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_empty_fu_238_p1();
    void thread_grp_fu_250_p0();
    void thread_grp_fu_250_p00();
    void thread_grp_fu_250_p1();
    void thread_grp_fu_250_p10();
    void thread_grp_fu_262_p0();
    void thread_grp_fu_262_p00();
    void thread_grp_fu_262_p1();
    void thread_grp_fu_262_p10();
    void thread_i_fu_285_p2();
    void thread_icmp_ln13_fu_268_p2();
    void thread_icmp_ln19_fu_279_p2();
    void thread_icmp_ln647_fu_309_p2();
    void thread_lshr_ln647_1_fu_392_p2();
    void thread_lshr_ln647_fu_383_p2();
    void thread_or_ln21_fu_303_p2();
    void thread_p_Result_s_fu_398_p2();
    void thread_select_ln13_fu_221_p3();
    void thread_select_ln647_1_fu_358_p3();
    void thread_select_ln647_2_fu_365_p3();
    void thread_select_ln647_fu_350_p3();
    void thread_sext_ln13_fu_228_p1();
    void thread_sub_ln13_1_fu_212_p2();
    void thread_sub_ln13_fu_183_p2();
    void thread_sub_ln647_1_fu_344_p2();
    void thread_sub_ln647_2_fu_373_p2();
    void thread_sub_ln647_fu_332_p2();
    void thread_tmp_23_fu_323_p4();
    void thread_tmp_4_fu_231_p3();
    void thread_trunc_ln21_fu_291_p1();
    void thread_xor_ln647_fu_338_p2();
    void thread_zext_ln13_1_fu_218_p1();
    void thread_zext_ln13_fu_209_p1();
    void thread_zext_ln647_1_fu_319_p1();
    void thread_zext_ln647_2_fu_379_p1();
    void thread_zext_ln647_3_fu_389_p1();
    void thread_zext_ln647_fu_315_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
