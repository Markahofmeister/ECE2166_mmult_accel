-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_mm is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of mm_mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mm_mm,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.433000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=433,HLS_SYN_DSP=326,HLS_SYN_FF=28262,HLS_SYN_LUT=30385,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal A_p_V : STD_LOGIC_VECTOR (63 downto 0);
    signal B_p_V : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_p_V : STD_LOGIC_VECTOR (63 downto 0);
    signal N : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mm_entry616_U0_ap_start : STD_LOGIC;
    signal mm_entry616_U0_ap_done : STD_LOGIC;
    signal mm_entry616_U0_ap_continue : STD_LOGIC;
    signal mm_entry616_U0_ap_idle : STD_LOGIC;
    signal mm_entry616_U0_ap_ready : STD_LOGIC;
    signal mm_entry616_U0_start_out : STD_LOGIC;
    signal mm_entry616_U0_start_write : STD_LOGIC;
    signal mm_entry616_U0_N_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mm_entry616_U0_N_out_write : STD_LOGIC;
    signal mm_entry616_U0_N_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mm_entry616_U0_N_out1_write : STD_LOGIC;
    signal mm_entry616_U0_A_p_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal mm_entry616_U0_A_p_V_out_write : STD_LOGIC;
    signal mm_entry616_U0_B_p_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal mm_entry616_U0_B_p_V_out_write : STD_LOGIC;
    signal mm_entry616_U0_AB_p_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal mm_entry616_U0_AB_p_V_out_write : STD_LOGIC;
    signal readA_U0_ap_start : STD_LOGIC;
    signal readA_U0_ap_done : STD_LOGIC;
    signal readA_U0_ap_continue : STD_LOGIC;
    signal readA_U0_ap_idle : STD_LOGIC;
    signal readA_U0_ap_ready : STD_LOGIC;
    signal readA_U0_start_out : STD_LOGIC;
    signal readA_U0_start_write : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_AWVALID : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readA_U0_m_axi_A_p_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readA_U0_m_axi_A_p_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_A_p_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_A_p_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_A_p_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_A_p_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_WVALID : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_m_axi_A_p_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal readA_U0_m_axi_A_p_V_WLAST : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_ARVALID : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readA_U0_m_axi_A_p_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readA_U0_m_axi_A_p_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_A_p_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_A_p_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readA_U0_m_axi_A_p_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readA_U0_m_axi_A_p_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readA_U0_m_axi_A_p_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readA_U0_m_axi_A_p_V_RREADY : STD_LOGIC;
    signal readA_U0_m_axi_A_p_V_BREADY : STD_LOGIC;
    signal readA_U0_A_p_V_offset_read : STD_LOGIC;
    signal readA_U0_AStreamWide_V_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal readA_U0_AStreamWide_V_V_write : STD_LOGIC;
    signal readA_U0_N_read : STD_LOGIC;
    signal readA_U0_N_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readA_U0_N_out_write : STD_LOGIC;
    signal changeARate_U0_ap_start : STD_LOGIC;
    signal changeARate_U0_ap_done : STD_LOGIC;
    signal changeARate_U0_ap_continue : STD_LOGIC;
    signal changeARate_U0_ap_idle : STD_LOGIC;
    signal changeARate_U0_ap_ready : STD_LOGIC;
    signal changeARate_U0_AStreamWide_V_V_read : STD_LOGIC;
    signal changeARate_U0_AStream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal changeARate_U0_AStream_V_write : STD_LOGIC;
    signal changeARate_U0_N_read : STD_LOGIC;
    signal changeARate_U0_N_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal changeARate_U0_N_out_write : STD_LOGIC;
    signal readB_U0_ap_start : STD_LOGIC;
    signal readB_U0_ap_done : STD_LOGIC;
    signal readB_U0_ap_continue : STD_LOGIC;
    signal readB_U0_ap_idle : STD_LOGIC;
    signal readB_U0_ap_ready : STD_LOGIC;
    signal readB_U0_start_out : STD_LOGIC;
    signal readB_U0_start_write : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_AWVALID : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readB_U0_m_axi_B_p_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readB_U0_m_axi_B_p_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_B_p_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_B_p_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_B_p_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_B_p_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_WVALID : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_m_axi_B_p_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal readB_U0_m_axi_B_p_V_WLAST : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_ARVALID : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal readB_U0_m_axi_B_p_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal readB_U0_m_axi_B_p_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_B_p_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_B_p_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal readB_U0_m_axi_B_p_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal readB_U0_m_axi_B_p_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal readB_U0_m_axi_B_p_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal readB_U0_m_axi_B_p_V_RREADY : STD_LOGIC;
    signal readB_U0_m_axi_B_p_V_BREADY : STD_LOGIC;
    signal readB_U0_B_p_V_offset_read : STD_LOGIC;
    signal readB_U0_BStream_V_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal readB_U0_BStream_V_V_write : STD_LOGIC;
    signal readB_U0_N_read : STD_LOGIC;
    signal comp_U0_ap_start : STD_LOGIC;
    signal comp_U0_ap_done : STD_LOGIC;
    signal comp_U0_ap_continue : STD_LOGIC;
    signal comp_U0_ap_idle : STD_LOGIC;
    signal comp_U0_ap_ready : STD_LOGIC;
    signal comp_U0_AStream_V_read : STD_LOGIC;
    signal comp_U0_BStream_V_V_read : STD_LOGIC;
    signal comp_U0_ABStream_V_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal comp_U0_ABStream_V_V_write : STD_LOGIC;
    signal comp_U0_N_read : STD_LOGIC;
    signal comp_U0_N_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal comp_U0_N_out_write : STD_LOGIC;
    signal writeAB_U0_ap_start : STD_LOGIC;
    signal writeAB_U0_ap_done : STD_LOGIC;
    signal writeAB_U0_ap_continue : STD_LOGIC;
    signal writeAB_U0_ap_idle : STD_LOGIC;
    signal writeAB_U0_ap_ready : STD_LOGIC;
    signal writeAB_U0_ABStream_V_V_read : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_AWVALID : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_WVALID : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal writeAB_U0_m_axi_AB_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal writeAB_U0_m_axi_AB_V_WLAST : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARVALID : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeAB_U0_m_axi_AB_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeAB_U0_m_axi_AB_V_RREADY : STD_LOGIC;
    signal writeAB_U0_m_axi_AB_V_BREADY : STD_LOGIC;
    signal writeAB_U0_AB_V_offset_read : STD_LOGIC;
    signal writeAB_U0_N_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal N_c_full_n : STD_LOGIC;
    signal N_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c_empty_n : STD_LOGIC;
    signal N_c8_full_n : STD_LOGIC;
    signal N_c8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c8_empty_n : STD_LOGIC;
    signal A_p_V_c_full_n : STD_LOGIC;
    signal A_p_V_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal A_p_V_c_empty_n : STD_LOGIC;
    signal B_p_V_c_full_n : STD_LOGIC;
    signal B_p_V_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal B_p_V_c_empty_n : STD_LOGIC;
    signal AB_p_V_c_full_n : STD_LOGIC;
    signal AB_p_V_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_p_V_c_empty_n : STD_LOGIC;
    signal AStreamWide_V_V_full_n : STD_LOGIC;
    signal AStreamWide_V_V_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal AStreamWide_V_V_empty_n : STD_LOGIC;
    signal N_c9_full_n : STD_LOGIC;
    signal N_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c9_empty_n : STD_LOGIC;
    signal AStream_V_full_n : STD_LOGIC;
    signal AStream_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal AStream_V_empty_n : STD_LOGIC;
    signal N_c10_full_n : STD_LOGIC;
    signal N_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c10_empty_n : STD_LOGIC;
    signal BStream_V_V_full_n : STD_LOGIC;
    signal BStream_V_V_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal BStream_V_V_empty_n : STD_LOGIC;
    signal ABStream_V_V_full_n : STD_LOGIC;
    signal ABStream_V_V_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal ABStream_V_V_empty_n : STD_LOGIC;
    signal N_c11_full_n : STD_LOGIC;
    signal N_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c11_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_mm_entry616_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_mm_entry616_U0_ap_ready : STD_LOGIC;
    signal mm_entry616_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readA_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readA_U0_ap_ready : STD_LOGIC;
    signal readA_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readB_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readB_U0_ap_ready : STD_LOGIC;
    signal readB_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_writeAB_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeAB_U0_full_n : STD_LOGIC;
    signal start_for_writeAB_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_writeAB_U0_empty_n : STD_LOGIC;
    signal start_for_changeARate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_changeARate_U0_full_n : STD_LOGIC;
    signal start_for_changeARate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_changeARate_U0_empty_n : STD_LOGIC;
    signal changeARate_U0_start_full_n : STD_LOGIC;
    signal changeARate_U0_start_write : STD_LOGIC;
    signal start_for_comp_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_comp_U0_full_n : STD_LOGIC;
    signal start_for_comp_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_comp_U0_empty_n : STD_LOGIC;
    signal comp_U0_start_full_n : STD_LOGIC;
    signal comp_U0_start_write : STD_LOGIC;
    signal writeAB_U0_start_full_n : STD_LOGIC;
    signal writeAB_U0_start_write : STD_LOGIC;

    component mm_mm_entry616 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        N : IN STD_LOGIC_VECTOR (31 downto 0);
        N_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_out_full_n : IN STD_LOGIC;
        N_out_write : OUT STD_LOGIC;
        N_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_out1_full_n : IN STD_LOGIC;
        N_out1_write : OUT STD_LOGIC;
        A_p_V : IN STD_LOGIC_VECTOR (63 downto 0);
        B_p_V : IN STD_LOGIC_VECTOR (63 downto 0);
        AB_p_V : IN STD_LOGIC_VECTOR (63 downto 0);
        A_p_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_p_V_out_full_n : IN STD_LOGIC;
        A_p_V_out_write : OUT STD_LOGIC;
        B_p_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        B_p_V_out_full_n : IN STD_LOGIC;
        B_p_V_out_write : OUT STD_LOGIC;
        AB_p_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB_p_V_out_full_n : IN STD_LOGIC;
        AB_p_V_out_write : OUT STD_LOGIC );
    end component;


    component mm_readA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_A_p_V_AWVALID : OUT STD_LOGIC;
        m_axi_A_p_V_AWREADY : IN STD_LOGIC;
        m_axi_A_p_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_p_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_p_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_p_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_p_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_WVALID : OUT STD_LOGIC;
        m_axi_A_p_V_WREADY : IN STD_LOGIC;
        m_axi_A_p_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_A_p_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_p_V_WLAST : OUT STD_LOGIC;
        m_axi_A_p_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_ARVALID : OUT STD_LOGIC;
        m_axi_A_p_V_ARREADY : IN STD_LOGIC;
        m_axi_A_p_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_A_p_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_A_p_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_p_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_A_p_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_A_p_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_RVALID : IN STD_LOGIC;
        m_axi_A_p_V_RREADY : OUT STD_LOGIC;
        m_axi_A_p_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_A_p_V_RLAST : IN STD_LOGIC;
        m_axi_A_p_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_BVALID : IN STD_LOGIC;
        m_axi_A_p_V_BREADY : OUT STD_LOGIC;
        m_axi_A_p_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_A_p_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_A_p_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A_p_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        A_p_V_offset_empty_n : IN STD_LOGIC;
        A_p_V_offset_read : OUT STD_LOGIC;
        AStreamWide_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        AStreamWide_V_V_full_n : IN STD_LOGIC;
        AStreamWide_V_V_write : OUT STD_LOGIC;
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC;
        N_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_out_full_n : IN STD_LOGIC;
        N_out_write : OUT STD_LOGIC );
    end component;


    component mm_changeARate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AStreamWide_V_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        AStreamWide_V_V_empty_n : IN STD_LOGIC;
        AStreamWide_V_V_read : OUT STD_LOGIC;
        AStream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        AStream_V_full_n : IN STD_LOGIC;
        AStream_V_write : OUT STD_LOGIC;
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC;
        N_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_out_full_n : IN STD_LOGIC;
        N_out_write : OUT STD_LOGIC );
    end component;


    component mm_readB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_B_p_V_AWVALID : OUT STD_LOGIC;
        m_axi_B_p_V_AWREADY : IN STD_LOGIC;
        m_axi_B_p_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_p_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_p_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_p_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_p_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_WVALID : OUT STD_LOGIC;
        m_axi_B_p_V_WREADY : IN STD_LOGIC;
        m_axi_B_p_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_B_p_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_p_V_WLAST : OUT STD_LOGIC;
        m_axi_B_p_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_ARVALID : OUT STD_LOGIC;
        m_axi_B_p_V_ARREADY : IN STD_LOGIC;
        m_axi_B_p_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_B_p_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_B_p_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_p_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_B_p_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_B_p_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_RVALID : IN STD_LOGIC;
        m_axi_B_p_V_RREADY : OUT STD_LOGIC;
        m_axi_B_p_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_B_p_V_RLAST : IN STD_LOGIC;
        m_axi_B_p_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_BVALID : IN STD_LOGIC;
        m_axi_B_p_V_BREADY : OUT STD_LOGIC;
        m_axi_B_p_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_B_p_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_B_p_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        B_p_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        B_p_V_offset_empty_n : IN STD_LOGIC;
        B_p_V_offset_read : OUT STD_LOGIC;
        BStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        BStream_V_V_full_n : IN STD_LOGIC;
        BStream_V_V_write : OUT STD_LOGIC;
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC );
    end component;


    component mm_comp IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AStream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        AStream_V_empty_n : IN STD_LOGIC;
        AStream_V_read : OUT STD_LOGIC;
        BStream_V_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        BStream_V_V_empty_n : IN STD_LOGIC;
        BStream_V_V_read : OUT STD_LOGIC;
        ABStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        ABStream_V_V_full_n : IN STD_LOGIC;
        ABStream_V_V_write : OUT STD_LOGIC;
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC;
        N_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_out_full_n : IN STD_LOGIC;
        N_out_write : OUT STD_LOGIC );
    end component;


    component mm_writeAB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ABStream_V_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        ABStream_V_V_empty_n : IN STD_LOGIC;
        ABStream_V_V_read : OUT STD_LOGIC;
        m_axi_AB_V_AWVALID : OUT STD_LOGIC;
        m_axi_AB_V_AWREADY : IN STD_LOGIC;
        m_axi_AB_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_AB_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_WVALID : OUT STD_LOGIC;
        m_axi_AB_V_WREADY : IN STD_LOGIC;
        m_axi_AB_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_AB_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_AB_V_WLAST : OUT STD_LOGIC;
        m_axi_AB_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_ARVALID : OUT STD_LOGIC;
        m_axi_AB_V_ARREADY : IN STD_LOGIC;
        m_axi_AB_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_AB_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_AB_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_AB_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_AB_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_RVALID : IN STD_LOGIC;
        m_axi_AB_V_RREADY : OUT STD_LOGIC;
        m_axi_AB_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_AB_V_RLAST : IN STD_LOGIC;
        m_axi_AB_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_BVALID : IN STD_LOGIC;
        m_axi_AB_V_BREADY : OUT STD_LOGIC;
        m_axi_AB_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_AB_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_AB_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        AB_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        AB_V_offset_empty_n : IN STD_LOGIC;
        AB_V_offset_read : OUT STD_LOGIC;
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC );
    end component;


    component mm_fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_fifo_w64_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_fifo_w512_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_start_for_writeAB_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_start_for_changeARate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_start_for_comp_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mm_mm_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        A_p_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        B_p_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB_p_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        N : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mm_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mm_mm_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mm_mm_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mm_control_s_axi_U : component mm_mm_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        A_p_V => A_p_V,
        B_p_V => B_p_V,
        AB_p_V => AB_p_V,
        N => N);

    mm_gmem0_m_axi_U : component mm_mm_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readA_U0_m_axi_A_p_V_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => readA_U0_m_axi_A_p_V_ARADDR,
        I_ARID => readA_U0_m_axi_A_p_V_ARID,
        I_ARLEN => readA_U0_m_axi_A_p_V_ARLEN,
        I_ARSIZE => readA_U0_m_axi_A_p_V_ARSIZE,
        I_ARLOCK => readA_U0_m_axi_A_p_V_ARLOCK,
        I_ARCACHE => readA_U0_m_axi_A_p_V_ARCACHE,
        I_ARQOS => readA_U0_m_axi_A_p_V_ARQOS,
        I_ARPROT => readA_U0_m_axi_A_p_V_ARPROT,
        I_ARUSER => readA_U0_m_axi_A_p_V_ARUSER,
        I_ARBURST => readA_U0_m_axi_A_p_V_ARBURST,
        I_ARREGION => readA_U0_m_axi_A_p_V_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => readA_U0_m_axi_A_p_V_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    mm_gmem1_m_axi_U : component mm_mm_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => readB_U0_m_axi_B_p_V_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => readB_U0_m_axi_B_p_V_ARADDR,
        I_ARID => readB_U0_m_axi_B_p_V_ARID,
        I_ARLEN => readB_U0_m_axi_B_p_V_ARLEN,
        I_ARSIZE => readB_U0_m_axi_B_p_V_ARSIZE,
        I_ARLOCK => readB_U0_m_axi_B_p_V_ARLOCK,
        I_ARCACHE => readB_U0_m_axi_B_p_V_ARCACHE,
        I_ARQOS => readB_U0_m_axi_B_p_V_ARQOS,
        I_ARPROT => readB_U0_m_axi_B_p_V_ARPROT,
        I_ARUSER => readB_U0_m_axi_B_p_V_ARUSER,
        I_ARBURST => readB_U0_m_axi_B_p_V_ARBURST,
        I_ARREGION => readB_U0_m_axi_B_p_V_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => readB_U0_m_axi_B_p_V_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    mm_gmem2_m_axi_U : component mm_mm_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => writeAB_U0_m_axi_AB_V_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => writeAB_U0_m_axi_AB_V_AWADDR,
        I_AWID => writeAB_U0_m_axi_AB_V_AWID,
        I_AWLEN => writeAB_U0_m_axi_AB_V_AWLEN,
        I_AWSIZE => writeAB_U0_m_axi_AB_V_AWSIZE,
        I_AWLOCK => writeAB_U0_m_axi_AB_V_AWLOCK,
        I_AWCACHE => writeAB_U0_m_axi_AB_V_AWCACHE,
        I_AWQOS => writeAB_U0_m_axi_AB_V_AWQOS,
        I_AWPROT => writeAB_U0_m_axi_AB_V_AWPROT,
        I_AWUSER => writeAB_U0_m_axi_AB_V_AWUSER,
        I_AWBURST => writeAB_U0_m_axi_AB_V_AWBURST,
        I_AWREGION => writeAB_U0_m_axi_AB_V_AWREGION,
        I_WVALID => writeAB_U0_m_axi_AB_V_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => writeAB_U0_m_axi_AB_V_WDATA,
        I_WID => writeAB_U0_m_axi_AB_V_WID,
        I_WUSER => writeAB_U0_m_axi_AB_V_WUSER,
        I_WLAST => writeAB_U0_m_axi_AB_V_WLAST,
        I_WSTRB => writeAB_U0_m_axi_AB_V_WSTRB,
        I_BVALID => gmem2_BVALID,
        I_BREADY => writeAB_U0_m_axi_AB_V_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    mm_entry616_U0 : component mm_mm_entry616
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mm_entry616_U0_ap_start,
        start_full_n => start_for_writeAB_U0_full_n,
        ap_done => mm_entry616_U0_ap_done,
        ap_continue => mm_entry616_U0_ap_continue,
        ap_idle => mm_entry616_U0_ap_idle,
        ap_ready => mm_entry616_U0_ap_ready,
        start_out => mm_entry616_U0_start_out,
        start_write => mm_entry616_U0_start_write,
        N => N,
        N_out_din => mm_entry616_U0_N_out_din,
        N_out_full_n => N_c_full_n,
        N_out_write => mm_entry616_U0_N_out_write,
        N_out1_din => mm_entry616_U0_N_out1_din,
        N_out1_full_n => N_c8_full_n,
        N_out1_write => mm_entry616_U0_N_out1_write,
        A_p_V => A_p_V,
        B_p_V => B_p_V,
        AB_p_V => AB_p_V,
        A_p_V_out_din => mm_entry616_U0_A_p_V_out_din,
        A_p_V_out_full_n => A_p_V_c_full_n,
        A_p_V_out_write => mm_entry616_U0_A_p_V_out_write,
        B_p_V_out_din => mm_entry616_U0_B_p_V_out_din,
        B_p_V_out_full_n => B_p_V_c_full_n,
        B_p_V_out_write => mm_entry616_U0_B_p_V_out_write,
        AB_p_V_out_din => mm_entry616_U0_AB_p_V_out_din,
        AB_p_V_out_full_n => AB_p_V_c_full_n,
        AB_p_V_out_write => mm_entry616_U0_AB_p_V_out_write);

    readA_U0 : component mm_readA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readA_U0_ap_start,
        start_full_n => start_for_changeARate_U0_full_n,
        ap_done => readA_U0_ap_done,
        ap_continue => readA_U0_ap_continue,
        ap_idle => readA_U0_ap_idle,
        ap_ready => readA_U0_ap_ready,
        start_out => readA_U0_start_out,
        start_write => readA_U0_start_write,
        m_axi_A_p_V_AWVALID => readA_U0_m_axi_A_p_V_AWVALID,
        m_axi_A_p_V_AWREADY => ap_const_logic_0,
        m_axi_A_p_V_AWADDR => readA_U0_m_axi_A_p_V_AWADDR,
        m_axi_A_p_V_AWID => readA_U0_m_axi_A_p_V_AWID,
        m_axi_A_p_V_AWLEN => readA_U0_m_axi_A_p_V_AWLEN,
        m_axi_A_p_V_AWSIZE => readA_U0_m_axi_A_p_V_AWSIZE,
        m_axi_A_p_V_AWBURST => readA_U0_m_axi_A_p_V_AWBURST,
        m_axi_A_p_V_AWLOCK => readA_U0_m_axi_A_p_V_AWLOCK,
        m_axi_A_p_V_AWCACHE => readA_U0_m_axi_A_p_V_AWCACHE,
        m_axi_A_p_V_AWPROT => readA_U0_m_axi_A_p_V_AWPROT,
        m_axi_A_p_V_AWQOS => readA_U0_m_axi_A_p_V_AWQOS,
        m_axi_A_p_V_AWREGION => readA_U0_m_axi_A_p_V_AWREGION,
        m_axi_A_p_V_AWUSER => readA_U0_m_axi_A_p_V_AWUSER,
        m_axi_A_p_V_WVALID => readA_U0_m_axi_A_p_V_WVALID,
        m_axi_A_p_V_WREADY => ap_const_logic_0,
        m_axi_A_p_V_WDATA => readA_U0_m_axi_A_p_V_WDATA,
        m_axi_A_p_V_WSTRB => readA_U0_m_axi_A_p_V_WSTRB,
        m_axi_A_p_V_WLAST => readA_U0_m_axi_A_p_V_WLAST,
        m_axi_A_p_V_WID => readA_U0_m_axi_A_p_V_WID,
        m_axi_A_p_V_WUSER => readA_U0_m_axi_A_p_V_WUSER,
        m_axi_A_p_V_ARVALID => readA_U0_m_axi_A_p_V_ARVALID,
        m_axi_A_p_V_ARREADY => gmem0_ARREADY,
        m_axi_A_p_V_ARADDR => readA_U0_m_axi_A_p_V_ARADDR,
        m_axi_A_p_V_ARID => readA_U0_m_axi_A_p_V_ARID,
        m_axi_A_p_V_ARLEN => readA_U0_m_axi_A_p_V_ARLEN,
        m_axi_A_p_V_ARSIZE => readA_U0_m_axi_A_p_V_ARSIZE,
        m_axi_A_p_V_ARBURST => readA_U0_m_axi_A_p_V_ARBURST,
        m_axi_A_p_V_ARLOCK => readA_U0_m_axi_A_p_V_ARLOCK,
        m_axi_A_p_V_ARCACHE => readA_U0_m_axi_A_p_V_ARCACHE,
        m_axi_A_p_V_ARPROT => readA_U0_m_axi_A_p_V_ARPROT,
        m_axi_A_p_V_ARQOS => readA_U0_m_axi_A_p_V_ARQOS,
        m_axi_A_p_V_ARREGION => readA_U0_m_axi_A_p_V_ARREGION,
        m_axi_A_p_V_ARUSER => readA_U0_m_axi_A_p_V_ARUSER,
        m_axi_A_p_V_RVALID => gmem0_RVALID,
        m_axi_A_p_V_RREADY => readA_U0_m_axi_A_p_V_RREADY,
        m_axi_A_p_V_RDATA => gmem0_RDATA,
        m_axi_A_p_V_RLAST => gmem0_RLAST,
        m_axi_A_p_V_RID => gmem0_RID,
        m_axi_A_p_V_RUSER => gmem0_RUSER,
        m_axi_A_p_V_RRESP => gmem0_RRESP,
        m_axi_A_p_V_BVALID => ap_const_logic_0,
        m_axi_A_p_V_BREADY => readA_U0_m_axi_A_p_V_BREADY,
        m_axi_A_p_V_BRESP => ap_const_lv2_0,
        m_axi_A_p_V_BID => ap_const_lv1_0,
        m_axi_A_p_V_BUSER => ap_const_lv1_0,
        A_p_V_offset_dout => A_p_V_c_dout,
        A_p_V_offset_empty_n => A_p_V_c_empty_n,
        A_p_V_offset_read => readA_U0_A_p_V_offset_read,
        AStreamWide_V_V_din => readA_U0_AStreamWide_V_V_din,
        AStreamWide_V_V_full_n => AStreamWide_V_V_full_n,
        AStreamWide_V_V_write => readA_U0_AStreamWide_V_V_write,
        N_dout => N_c_dout,
        N_empty_n => N_c_empty_n,
        N_read => readA_U0_N_read,
        N_out_din => readA_U0_N_out_din,
        N_out_full_n => N_c9_full_n,
        N_out_write => readA_U0_N_out_write);

    changeARate_U0 : component mm_changeARate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => changeARate_U0_ap_start,
        ap_done => changeARate_U0_ap_done,
        ap_continue => changeARate_U0_ap_continue,
        ap_idle => changeARate_U0_ap_idle,
        ap_ready => changeARate_U0_ap_ready,
        AStreamWide_V_V_dout => AStreamWide_V_V_dout,
        AStreamWide_V_V_empty_n => AStreamWide_V_V_empty_n,
        AStreamWide_V_V_read => changeARate_U0_AStreamWide_V_V_read,
        AStream_V_din => changeARate_U0_AStream_V_din,
        AStream_V_full_n => AStream_V_full_n,
        AStream_V_write => changeARate_U0_AStream_V_write,
        N_dout => N_c9_dout,
        N_empty_n => N_c9_empty_n,
        N_read => changeARate_U0_N_read,
        N_out_din => changeARate_U0_N_out_din,
        N_out_full_n => N_c10_full_n,
        N_out_write => changeARate_U0_N_out_write);

    readB_U0 : component mm_readB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readB_U0_ap_start,
        start_full_n => start_for_comp_U0_full_n,
        ap_done => readB_U0_ap_done,
        ap_continue => readB_U0_ap_continue,
        ap_idle => readB_U0_ap_idle,
        ap_ready => readB_U0_ap_ready,
        start_out => readB_U0_start_out,
        start_write => readB_U0_start_write,
        m_axi_B_p_V_AWVALID => readB_U0_m_axi_B_p_V_AWVALID,
        m_axi_B_p_V_AWREADY => ap_const_logic_0,
        m_axi_B_p_V_AWADDR => readB_U0_m_axi_B_p_V_AWADDR,
        m_axi_B_p_V_AWID => readB_U0_m_axi_B_p_V_AWID,
        m_axi_B_p_V_AWLEN => readB_U0_m_axi_B_p_V_AWLEN,
        m_axi_B_p_V_AWSIZE => readB_U0_m_axi_B_p_V_AWSIZE,
        m_axi_B_p_V_AWBURST => readB_U0_m_axi_B_p_V_AWBURST,
        m_axi_B_p_V_AWLOCK => readB_U0_m_axi_B_p_V_AWLOCK,
        m_axi_B_p_V_AWCACHE => readB_U0_m_axi_B_p_V_AWCACHE,
        m_axi_B_p_V_AWPROT => readB_U0_m_axi_B_p_V_AWPROT,
        m_axi_B_p_V_AWQOS => readB_U0_m_axi_B_p_V_AWQOS,
        m_axi_B_p_V_AWREGION => readB_U0_m_axi_B_p_V_AWREGION,
        m_axi_B_p_V_AWUSER => readB_U0_m_axi_B_p_V_AWUSER,
        m_axi_B_p_V_WVALID => readB_U0_m_axi_B_p_V_WVALID,
        m_axi_B_p_V_WREADY => ap_const_logic_0,
        m_axi_B_p_V_WDATA => readB_U0_m_axi_B_p_V_WDATA,
        m_axi_B_p_V_WSTRB => readB_U0_m_axi_B_p_V_WSTRB,
        m_axi_B_p_V_WLAST => readB_U0_m_axi_B_p_V_WLAST,
        m_axi_B_p_V_WID => readB_U0_m_axi_B_p_V_WID,
        m_axi_B_p_V_WUSER => readB_U0_m_axi_B_p_V_WUSER,
        m_axi_B_p_V_ARVALID => readB_U0_m_axi_B_p_V_ARVALID,
        m_axi_B_p_V_ARREADY => gmem1_ARREADY,
        m_axi_B_p_V_ARADDR => readB_U0_m_axi_B_p_V_ARADDR,
        m_axi_B_p_V_ARID => readB_U0_m_axi_B_p_V_ARID,
        m_axi_B_p_V_ARLEN => readB_U0_m_axi_B_p_V_ARLEN,
        m_axi_B_p_V_ARSIZE => readB_U0_m_axi_B_p_V_ARSIZE,
        m_axi_B_p_V_ARBURST => readB_U0_m_axi_B_p_V_ARBURST,
        m_axi_B_p_V_ARLOCK => readB_U0_m_axi_B_p_V_ARLOCK,
        m_axi_B_p_V_ARCACHE => readB_U0_m_axi_B_p_V_ARCACHE,
        m_axi_B_p_V_ARPROT => readB_U0_m_axi_B_p_V_ARPROT,
        m_axi_B_p_V_ARQOS => readB_U0_m_axi_B_p_V_ARQOS,
        m_axi_B_p_V_ARREGION => readB_U0_m_axi_B_p_V_ARREGION,
        m_axi_B_p_V_ARUSER => readB_U0_m_axi_B_p_V_ARUSER,
        m_axi_B_p_V_RVALID => gmem1_RVALID,
        m_axi_B_p_V_RREADY => readB_U0_m_axi_B_p_V_RREADY,
        m_axi_B_p_V_RDATA => gmem1_RDATA,
        m_axi_B_p_V_RLAST => gmem1_RLAST,
        m_axi_B_p_V_RID => gmem1_RID,
        m_axi_B_p_V_RUSER => gmem1_RUSER,
        m_axi_B_p_V_RRESP => gmem1_RRESP,
        m_axi_B_p_V_BVALID => ap_const_logic_0,
        m_axi_B_p_V_BREADY => readB_U0_m_axi_B_p_V_BREADY,
        m_axi_B_p_V_BRESP => ap_const_lv2_0,
        m_axi_B_p_V_BID => ap_const_lv1_0,
        m_axi_B_p_V_BUSER => ap_const_lv1_0,
        B_p_V_offset_dout => B_p_V_c_dout,
        B_p_V_offset_empty_n => B_p_V_c_empty_n,
        B_p_V_offset_read => readB_U0_B_p_V_offset_read,
        BStream_V_V_din => readB_U0_BStream_V_V_din,
        BStream_V_V_full_n => BStream_V_V_full_n,
        BStream_V_V_write => readB_U0_BStream_V_V_write,
        N_dout => N_c8_dout,
        N_empty_n => N_c8_empty_n,
        N_read => readB_U0_N_read);

    comp_U0 : component mm_comp
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => comp_U0_ap_start,
        ap_done => comp_U0_ap_done,
        ap_continue => comp_U0_ap_continue,
        ap_idle => comp_U0_ap_idle,
        ap_ready => comp_U0_ap_ready,
        AStream_V_dout => AStream_V_dout,
        AStream_V_empty_n => AStream_V_empty_n,
        AStream_V_read => comp_U0_AStream_V_read,
        BStream_V_V_dout => BStream_V_V_dout,
        BStream_V_V_empty_n => BStream_V_V_empty_n,
        BStream_V_V_read => comp_U0_BStream_V_V_read,
        ABStream_V_V_din => comp_U0_ABStream_V_V_din,
        ABStream_V_V_full_n => ABStream_V_V_full_n,
        ABStream_V_V_write => comp_U0_ABStream_V_V_write,
        N_dout => N_c10_dout,
        N_empty_n => N_c10_empty_n,
        N_read => comp_U0_N_read,
        N_out_din => comp_U0_N_out_din,
        N_out_full_n => N_c11_full_n,
        N_out_write => comp_U0_N_out_write);

    writeAB_U0 : component mm_writeAB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => writeAB_U0_ap_start,
        ap_done => writeAB_U0_ap_done,
        ap_continue => writeAB_U0_ap_continue,
        ap_idle => writeAB_U0_ap_idle,
        ap_ready => writeAB_U0_ap_ready,
        ABStream_V_V_dout => ABStream_V_V_dout,
        ABStream_V_V_empty_n => ABStream_V_V_empty_n,
        ABStream_V_V_read => writeAB_U0_ABStream_V_V_read,
        m_axi_AB_V_AWVALID => writeAB_U0_m_axi_AB_V_AWVALID,
        m_axi_AB_V_AWREADY => gmem2_AWREADY,
        m_axi_AB_V_AWADDR => writeAB_U0_m_axi_AB_V_AWADDR,
        m_axi_AB_V_AWID => writeAB_U0_m_axi_AB_V_AWID,
        m_axi_AB_V_AWLEN => writeAB_U0_m_axi_AB_V_AWLEN,
        m_axi_AB_V_AWSIZE => writeAB_U0_m_axi_AB_V_AWSIZE,
        m_axi_AB_V_AWBURST => writeAB_U0_m_axi_AB_V_AWBURST,
        m_axi_AB_V_AWLOCK => writeAB_U0_m_axi_AB_V_AWLOCK,
        m_axi_AB_V_AWCACHE => writeAB_U0_m_axi_AB_V_AWCACHE,
        m_axi_AB_V_AWPROT => writeAB_U0_m_axi_AB_V_AWPROT,
        m_axi_AB_V_AWQOS => writeAB_U0_m_axi_AB_V_AWQOS,
        m_axi_AB_V_AWREGION => writeAB_U0_m_axi_AB_V_AWREGION,
        m_axi_AB_V_AWUSER => writeAB_U0_m_axi_AB_V_AWUSER,
        m_axi_AB_V_WVALID => writeAB_U0_m_axi_AB_V_WVALID,
        m_axi_AB_V_WREADY => gmem2_WREADY,
        m_axi_AB_V_WDATA => writeAB_U0_m_axi_AB_V_WDATA,
        m_axi_AB_V_WSTRB => writeAB_U0_m_axi_AB_V_WSTRB,
        m_axi_AB_V_WLAST => writeAB_U0_m_axi_AB_V_WLAST,
        m_axi_AB_V_WID => writeAB_U0_m_axi_AB_V_WID,
        m_axi_AB_V_WUSER => writeAB_U0_m_axi_AB_V_WUSER,
        m_axi_AB_V_ARVALID => writeAB_U0_m_axi_AB_V_ARVALID,
        m_axi_AB_V_ARREADY => ap_const_logic_0,
        m_axi_AB_V_ARADDR => writeAB_U0_m_axi_AB_V_ARADDR,
        m_axi_AB_V_ARID => writeAB_U0_m_axi_AB_V_ARID,
        m_axi_AB_V_ARLEN => writeAB_U0_m_axi_AB_V_ARLEN,
        m_axi_AB_V_ARSIZE => writeAB_U0_m_axi_AB_V_ARSIZE,
        m_axi_AB_V_ARBURST => writeAB_U0_m_axi_AB_V_ARBURST,
        m_axi_AB_V_ARLOCK => writeAB_U0_m_axi_AB_V_ARLOCK,
        m_axi_AB_V_ARCACHE => writeAB_U0_m_axi_AB_V_ARCACHE,
        m_axi_AB_V_ARPROT => writeAB_U0_m_axi_AB_V_ARPROT,
        m_axi_AB_V_ARQOS => writeAB_U0_m_axi_AB_V_ARQOS,
        m_axi_AB_V_ARREGION => writeAB_U0_m_axi_AB_V_ARREGION,
        m_axi_AB_V_ARUSER => writeAB_U0_m_axi_AB_V_ARUSER,
        m_axi_AB_V_RVALID => ap_const_logic_0,
        m_axi_AB_V_RREADY => writeAB_U0_m_axi_AB_V_RREADY,
        m_axi_AB_V_RDATA => ap_const_lv512_lc_1,
        m_axi_AB_V_RLAST => ap_const_logic_0,
        m_axi_AB_V_RID => ap_const_lv1_0,
        m_axi_AB_V_RUSER => ap_const_lv1_0,
        m_axi_AB_V_RRESP => ap_const_lv2_0,
        m_axi_AB_V_BVALID => gmem2_BVALID,
        m_axi_AB_V_BREADY => writeAB_U0_m_axi_AB_V_BREADY,
        m_axi_AB_V_BRESP => gmem2_BRESP,
        m_axi_AB_V_BID => gmem2_BID,
        m_axi_AB_V_BUSER => gmem2_BUSER,
        AB_V_offset_dout => AB_p_V_c_dout,
        AB_V_offset_empty_n => AB_p_V_c_empty_n,
        AB_V_offset_read => writeAB_U0_AB_V_offset_read,
        N_dout => N_c11_dout,
        N_empty_n => N_c11_empty_n,
        N_read => writeAB_U0_N_read);

    N_c_U : component mm_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mm_entry616_U0_N_out_din,
        if_full_n => N_c_full_n,
        if_write => mm_entry616_U0_N_out_write,
        if_dout => N_c_dout,
        if_empty_n => N_c_empty_n,
        if_read => readA_U0_N_read);

    N_c8_U : component mm_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mm_entry616_U0_N_out1_din,
        if_full_n => N_c8_full_n,
        if_write => mm_entry616_U0_N_out1_write,
        if_dout => N_c8_dout,
        if_empty_n => N_c8_empty_n,
        if_read => readB_U0_N_read);

    A_p_V_c_U : component mm_fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mm_entry616_U0_A_p_V_out_din,
        if_full_n => A_p_V_c_full_n,
        if_write => mm_entry616_U0_A_p_V_out_write,
        if_dout => A_p_V_c_dout,
        if_empty_n => A_p_V_c_empty_n,
        if_read => readA_U0_A_p_V_offset_read);

    B_p_V_c_U : component mm_fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mm_entry616_U0_B_p_V_out_din,
        if_full_n => B_p_V_c_full_n,
        if_write => mm_entry616_U0_B_p_V_out_write,
        if_dout => B_p_V_c_dout,
        if_empty_n => B_p_V_c_empty_n,
        if_read => readB_U0_B_p_V_offset_read);

    AB_p_V_c_U : component mm_fifo_w64_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mm_entry616_U0_AB_p_V_out_din,
        if_full_n => AB_p_V_c_full_n,
        if_write => mm_entry616_U0_AB_p_V_out_write,
        if_dout => AB_p_V_c_dout,
        if_empty_n => AB_p_V_c_empty_n,
        if_read => writeAB_U0_AB_V_offset_read);

    AStreamWide_V_V_U : component mm_fifo_w512_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readA_U0_AStreamWide_V_V_din,
        if_full_n => AStreamWide_V_V_full_n,
        if_write => readA_U0_AStreamWide_V_V_write,
        if_dout => AStreamWide_V_V_dout,
        if_empty_n => AStreamWide_V_V_empty_n,
        if_read => changeARate_U0_AStreamWide_V_V_read);

    N_c9_U : component mm_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readA_U0_N_out_din,
        if_full_n => N_c9_full_n,
        if_write => readA_U0_N_out_write,
        if_dout => N_c9_dout,
        if_empty_n => N_c9_empty_n,
        if_read => changeARate_U0_N_read);

    AStream_V_U : component mm_fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => changeARate_U0_AStream_V_din,
        if_full_n => AStream_V_full_n,
        if_write => changeARate_U0_AStream_V_write,
        if_dout => AStream_V_dout,
        if_empty_n => AStream_V_empty_n,
        if_read => comp_U0_AStream_V_read);

    N_c10_U : component mm_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => changeARate_U0_N_out_din,
        if_full_n => N_c10_full_n,
        if_write => changeARate_U0_N_out_write,
        if_dout => N_c10_dout,
        if_empty_n => N_c10_empty_n,
        if_read => comp_U0_N_read);

    BStream_V_V_U : component mm_fifo_w512_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readB_U0_BStream_V_V_din,
        if_full_n => BStream_V_V_full_n,
        if_write => readB_U0_BStream_V_V_write,
        if_dout => BStream_V_V_dout,
        if_empty_n => BStream_V_V_empty_n,
        if_read => comp_U0_BStream_V_V_read);

    ABStream_V_V_U : component mm_fifo_w512_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => comp_U0_ABStream_V_V_din,
        if_full_n => ABStream_V_V_full_n,
        if_write => comp_U0_ABStream_V_V_write,
        if_dout => ABStream_V_V_dout,
        if_empty_n => ABStream_V_V_empty_n,
        if_read => writeAB_U0_ABStream_V_V_read);

    N_c11_U : component mm_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => comp_U0_N_out_din,
        if_full_n => N_c11_full_n,
        if_write => comp_U0_N_out_write,
        if_dout => N_c11_dout,
        if_empty_n => N_c11_empty_n,
        if_read => writeAB_U0_N_read);

    start_for_writeAB_U0_U : component mm_start_for_writeAB_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_writeAB_U0_din,
        if_full_n => start_for_writeAB_U0_full_n,
        if_write => mm_entry616_U0_start_write,
        if_dout => start_for_writeAB_U0_dout,
        if_empty_n => start_for_writeAB_U0_empty_n,
        if_read => writeAB_U0_ap_ready);

    start_for_changeARate_U0_U : component mm_start_for_changeARate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_changeARate_U0_din,
        if_full_n => start_for_changeARate_U0_full_n,
        if_write => readA_U0_start_write,
        if_dout => start_for_changeARate_U0_dout,
        if_empty_n => start_for_changeARate_U0_empty_n,
        if_read => changeARate_U0_ap_ready);

    start_for_comp_U0_U : component mm_start_for_comp_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_comp_U0_din,
        if_full_n => start_for_comp_U0_full_n,
        if_write => readB_U0_start_write,
        if_dout => start_for_comp_U0_dout,
        if_empty_n => start_for_comp_U0_empty_n,
        if_read => comp_U0_ap_ready);





    ap_sync_reg_mm_entry616_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_mm_entry616_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_mm_entry616_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_mm_entry616_U0_ap_ready <= ap_sync_mm_entry616_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readA_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_readA_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readA_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readA_U0_ap_ready <= ap_sync_readA_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readB_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_readB_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_readB_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readB_U0_ap_ready <= ap_sync_readB_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    mm_entry616_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mm_entry616_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                mm_entry616_U0_ap_ready_count <= std_logic_vector(unsigned(mm_entry616_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (mm_entry616_U0_ap_ready = ap_const_logic_1))) then 
                mm_entry616_U0_ap_ready_count <= std_logic_vector(unsigned(mm_entry616_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readA_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((readA_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                readA_U0_ap_ready_count <= std_logic_vector(unsigned(readA_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (readA_U0_ap_ready = ap_const_logic_1))) then 
                readA_U0_ap_ready_count <= std_logic_vector(unsigned(readA_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readB_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((readB_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                readB_U0_ap_ready_count <= std_logic_vector(unsigned(readB_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (readB_U0_ap_ready = ap_const_logic_1))) then 
                readB_U0_ap_ready_count <= std_logic_vector(unsigned(readB_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= writeAB_U0_ap_done;
    ap_idle <= (writeAB_U0_ap_idle and readB_U0_ap_idle and readA_U0_ap_idle and mm_entry616_U0_ap_idle and comp_U0_ap_idle and changeARate_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= writeAB_U0_ap_done;
    ap_sync_mm_entry616_U0_ap_ready <= (mm_entry616_U0_ap_ready or ap_sync_reg_mm_entry616_U0_ap_ready);
    ap_sync_readA_U0_ap_ready <= (readA_U0_ap_ready or ap_sync_reg_readA_U0_ap_ready);
    ap_sync_readB_U0_ap_ready <= (readB_U0_ap_ready or ap_sync_reg_readB_U0_ap_ready);
    ap_sync_ready <= (ap_sync_readB_U0_ap_ready and ap_sync_readA_U0_ap_ready and ap_sync_mm_entry616_U0_ap_ready);
    changeARate_U0_ap_continue <= ap_const_logic_1;
    changeARate_U0_ap_start <= start_for_changeARate_U0_empty_n;
    changeARate_U0_start_full_n <= ap_const_logic_1;
    changeARate_U0_start_write <= ap_const_logic_0;
    comp_U0_ap_continue <= ap_const_logic_1;
    comp_U0_ap_start <= start_for_comp_U0_empty_n;
    comp_U0_start_full_n <= ap_const_logic_1;
    comp_U0_start_write <= ap_const_logic_0;
    mm_entry616_U0_ap_continue <= ap_const_logic_1;
    mm_entry616_U0_ap_start <= ((ap_sync_reg_mm_entry616_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readA_U0_ap_continue <= ap_const_logic_1;
    readA_U0_ap_start <= ((ap_sync_reg_readA_U0_ap_ready xor ap_const_logic_1) and ap_start);
    readB_U0_ap_continue <= ap_const_logic_1;
    readB_U0_ap_start <= ((ap_sync_reg_readB_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_changeARate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_comp_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_writeAB_U0_din <= (0=>ap_const_logic_1, others=>'-');
    writeAB_U0_ap_continue <= ap_const_logic_1;
    writeAB_U0_ap_start <= start_for_writeAB_U0_empty_n;
    writeAB_U0_start_full_n <= ap_const_logic_1;
    writeAB_U0_start_write <= ap_const_logic_0;
end behav;
