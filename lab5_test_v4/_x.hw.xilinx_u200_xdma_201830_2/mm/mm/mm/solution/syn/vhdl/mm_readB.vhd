-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_readB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_B_p_V_AWVALID : OUT STD_LOGIC;
    m_axi_B_p_V_AWREADY : IN STD_LOGIC;
    m_axi_B_p_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_p_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_p_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_p_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_p_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_WVALID : OUT STD_LOGIC;
    m_axi_B_p_V_WREADY : IN STD_LOGIC;
    m_axi_B_p_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_B_p_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_p_V_WLAST : OUT STD_LOGIC;
    m_axi_B_p_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_ARVALID : OUT STD_LOGIC;
    m_axi_B_p_V_ARREADY : IN STD_LOGIC;
    m_axi_B_p_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_B_p_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_B_p_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_p_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_p_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_p_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_RVALID : IN STD_LOGIC;
    m_axi_B_p_V_RREADY : OUT STD_LOGIC;
    m_axi_B_p_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_B_p_V_RLAST : IN STD_LOGIC;
    m_axi_B_p_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_BVALID : IN STD_LOGIC;
    m_axi_B_p_V_BREADY : OUT STD_LOGIC;
    m_axi_B_p_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_p_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_B_p_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    B_p_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    B_p_V_offset_empty_n : IN STD_LOGIC;
    B_p_V_offset_read : OUT STD_LOGIC;
    BStream_V_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    BStream_V_V_full_n : IN STD_LOGIC;
    BStream_V_V_write : OUT STD_LOGIC;
    N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC );
end;


architecture behav of mm_readB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv100_0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv76_0 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv100_1 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv97_0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv44_1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_const_lv76_1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal B_p_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_19_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_p_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal icmp_ln48_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_p_V_offset_blk_n : STD_LOGIC;
    signal BStream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal icmp_ln48_reg_1098_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal N_blk_n : STD_LOGIC;
    signal indvar_flatten162_i_reg_179 : STD_LOGIC_VECTOR (99 downto 0);
    signal indvar_flatten98_i_reg_190 : STD_LOGIC_VECTOR (75 downto 0);
    signal indvar_flatten44_i_reg_201 : STD_LOGIC_VECTOR (43 downto 0);
    signal kb_0_i_i_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_i_reg_223 : STD_LOGIC_VECTOR (12 downto 0);
    signal k_0_i_i_reg_234 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_0_i_i_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal jb_0_i_i_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1011 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal N_read_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_reg_1029 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln48_fu_323_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln48_reg_1034 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_340_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal empty_reg_1042 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal bound49_i_reg_1057 : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln50_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln50_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_cast_i_fu_375_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln47_cast_i_reg_1078 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bound5_i_fu_378_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal bound5_i_reg_1083 : STD_LOGIC_VECTOR (43 downto 0);
    signal bound49_cast_i_fu_381_p1 : STD_LOGIC_VECTOR (75 downto 0);
    signal bound49_cast_i_reg_1088 : STD_LOGIC_VECTOR (75 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal bound103_i_reg_1093 : STD_LOGIC_VECTOR (99 downto 0);
    signal icmp_ln48_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln48_reg_1098_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_1098_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_389_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln49_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1107_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_reg_1117_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_1134_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_1_fu_442_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal select_ln49_5_fu_456_p3 : STD_LOGIC_VECTOR (75 downto 0);
    signal add_ln54_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_1_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_1_reg_1153_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_2_reg_1163_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln54_3_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_3_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_1_fu_635_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_fu_649_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_2_fu_663_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_1_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln54_2_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_fu_742_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_reg_1208 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln49_fu_764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_reg_1219 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln49_4_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal add_ln54_2_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_2_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_4_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_4_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_fu_996_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln176_reg_1243 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_V_reg_1254 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter6_state18 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal sext_ln176_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_8_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_300_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln48_fu_310_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln48_1_fu_314_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln48_1_fu_320_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_14_i_fu_333_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln48_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (74 downto 0);
    signal icmp_ln50_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_418_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_422_p3 : STD_LOGIC_VECTOR (99 downto 0);
    signal add_ln50_1_fu_436_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln49_1_fu_450_p2 : STD_LOGIC_VECTOR (75 downto 0);
    signal shl_ln54_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln51_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln52_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_1_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_1_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln54_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_2_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln54_3_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_3_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_3_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_4_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_6_fu_556_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln51_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_fu_608_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_1_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_7_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln51_1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_643_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln51_1_fu_657_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln54_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln54_1_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln54_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_fu_708_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln54_fu_718_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_18_i_fu_728_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_9_fu_694_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln54_1_fu_722_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln54_1_fu_738_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln49_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_2_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_1_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln54_2_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_4_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_2_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_2_fu_838_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln54_fu_828_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_831_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln54_3_fu_841_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln54_2_mid_i_fu_847_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_4_fu_857_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln49_2_fu_822_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln54_4_fu_879_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_fu_884_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln54_3_fu_894_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_25_i_fu_904_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_11_fu_872_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln54_5_fu_898_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln54_4_fu_913_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_8_fu_917_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_5_fu_865_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln54_6_fu_939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_fu_944_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln54_5_fu_954_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_27_i_fu_964_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_fu_932_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln54_7_fu_958_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln54_6_fu_973_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_10_fu_977_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln54_9_fu_925_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln51_fu_985_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln51_fu_992_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_671_ce : STD_LOGIC;
    signal grp_fu_675_ce : STD_LOGIC;
    signal grp_fu_679_ce : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_352_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_352_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_364_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_364_p10 : STD_LOGIC_VECTOR (99 downto 0);

    component mm_mm_mul_32ns_43ns_75_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component mm_mm_mul_25ns_75ns_100_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (74 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component mm_mm_mul_32s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mm_mul_32ns_43ns_75_4_1_U29 : component mm_mm_mul_32ns_43ns_75_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 43,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_352_p0,
        din1 => grp_fu_352_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_352_p2);

    mm_mul_25ns_75ns_100_5_1_U30 : component mm_mm_mul_25ns_75ns_100_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 25,
        din1_WIDTH => 75,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    mm_mul_32s_32s_32_4_1_U31 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => N_read_reg_1016,
        din1 => add_ln54_reg_1148,
        ce => grp_fu_671_ce,
        dout => grp_fu_671_p2);

    mm_mul_32s_32s_32_4_1_U32 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => N_read_reg_1016,
        din1 => add_ln50_reg_1158,
        ce => grp_fu_675_ce,
        dout => grp_fu_675_p2);

    mm_mul_32s_32s_32_4_1_U33 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln54_3_reg_1173,
        din1 => N_read_reg_1016,
        ce => grp_fu_679_ce,
        dout => grp_fu_679_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_384_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter6_state18)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten162_i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_384_p2 = ap_const_lv1_0))) then 
                indvar_flatten162_i_reg_179 <= add_ln48_fu_389_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten162_i_reg_179 <= ap_const_lv100_0;
            end if; 
        end if;
    end process;

    indvar_flatten44_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_384_p2 = ap_const_lv1_0))) then 
                indvar_flatten44_i_reg_201 <= select_ln50_1_fu_442_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten44_i_reg_201 <= ap_const_lv44_0;
            end if; 
        end if;
    end process;

    indvar_flatten98_i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_384_p2 = ap_const_lv1_0))) then 
                indvar_flatten98_i_reg_190 <= select_ln49_5_fu_456_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten98_i_reg_190 <= ap_const_lv76_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_reg_1098 = ap_const_lv1_0))) then 
                indvar_flatten_i_reg_223 <= select_ln51_2_fu_663_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten_i_reg_223 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    jb_0_i_i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter5_reg = ap_const_lv1_0))) then 
                jb_0_i_i_reg_256 <= select_ln49_4_fu_799_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                jb_0_i_i_reg_256 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    jj_0_i_i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_reg_1098 = ap_const_lv1_0))) then 
                jj_0_i_i_reg_245 <= jj_fu_649_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                jj_0_i_i_reg_245 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_i_i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_reg_1098 = ap_const_lv1_0))) then 
                k_0_i_i_reg_234 <= select_ln51_1_fu_635_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_0_i_i_reg_234 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    kb_0_i_i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_reg_1098 = ap_const_lv1_0))) then 
                kb_0_i_i_reg_212 <= select_ln50_fu_600_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                kb_0_i_i_reg_212 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = B_p_V_offset_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                N_read_reg_1016 <= N_dout;
                tmp_13_i_reg_1029 <= tmp_13_i_fu_285_p1(31 downto 8);
                tmp_8_reg_1024 <= tmp_8_fu_277_p1(31 downto 31);
                tmp_reg_1011 <= B_p_V_offset_dout(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln48_reg_1098_pp0_iter6_reg = ap_const_lv1_0))) then
                add_ln176_reg_1243 <= add_ln176_fu_996_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln48_reg_1098_pp0_iter5_reg = ap_const_lv1_0))) then
                add_ln49_reg_1213 <= add_ln49_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_reg_1098 = ap_const_lv1_0))) then
                add_ln50_reg_1158 <= add_ln50_fu_540_p2;
                add_ln54_3_reg_1173 <= add_ln54_3_fu_629_p2;
                and_ln54_1_reg_1153 <= and_ln54_1_fu_534_p2;
                and_ln54_2_reg_1163 <= and_ln54_2_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln54_1_reg_1153_pp0_iter5_reg) and (ap_const_lv1_0 = and_ln54_2_reg_1163_pp0_iter5_reg) and (icmp_ln48_reg_1098_pp0_iter5_reg = ap_const_lv1_0))) then
                    add_ln54_2_reg_1229(31 downto 8) <= add_ln54_2_fu_811_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln54_2_reg_1163_pp0_iter5_reg) and (icmp_ln48_reg_1098_pp0_iter5_reg = ap_const_lv1_0))) then
                add_ln54_4_reg_1236 <= add_ln54_4_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln49_3_reg_1117 = ap_const_lv1_0) and (icmp_ln49_reg_1107 = ap_const_lv1_0))) then
                add_ln54_reg_1148 <= add_ln54_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln54_1_reg_1153_pp0_iter2_reg <= and_ln54_1_reg_1153;
                and_ln54_1_reg_1153_pp0_iter3_reg <= and_ln54_1_reg_1153_pp0_iter2_reg;
                and_ln54_1_reg_1153_pp0_iter4_reg <= and_ln54_1_reg_1153_pp0_iter3_reg;
                and_ln54_1_reg_1153_pp0_iter5_reg <= and_ln54_1_reg_1153_pp0_iter4_reg;
                and_ln54_1_reg_1153_pp0_iter6_reg <= and_ln54_1_reg_1153_pp0_iter5_reg;
                and_ln54_2_reg_1163_pp0_iter2_reg <= and_ln54_2_reg_1163;
                and_ln54_2_reg_1163_pp0_iter3_reg <= and_ln54_2_reg_1163_pp0_iter2_reg;
                and_ln54_2_reg_1163_pp0_iter4_reg <= and_ln54_2_reg_1163_pp0_iter3_reg;
                and_ln54_2_reg_1163_pp0_iter5_reg <= and_ln54_2_reg_1163_pp0_iter4_reg;
                and_ln54_2_reg_1163_pp0_iter6_reg <= and_ln54_2_reg_1163_pp0_iter5_reg;
                empty_19_reg_1134_pp0_iter2_reg <= empty_19_reg_1134_pp0_iter1_reg;
                empty_19_reg_1134_pp0_iter3_reg <= empty_19_reg_1134_pp0_iter2_reg;
                empty_19_reg_1134_pp0_iter4_reg <= empty_19_reg_1134_pp0_iter3_reg;
                empty_19_reg_1134_pp0_iter5_reg <= empty_19_reg_1134_pp0_iter4_reg;
                empty_19_reg_1134_pp0_iter6_reg <= empty_19_reg_1134_pp0_iter5_reg;
                empty_19_reg_1134_pp0_iter7_reg <= empty_19_reg_1134_pp0_iter6_reg;
                icmp_ln48_reg_1098_pp0_iter10_reg <= icmp_ln48_reg_1098_pp0_iter9_reg;
                icmp_ln48_reg_1098_pp0_iter11_reg <= icmp_ln48_reg_1098_pp0_iter10_reg;
                icmp_ln48_reg_1098_pp0_iter12_reg <= icmp_ln48_reg_1098_pp0_iter11_reg;
                icmp_ln48_reg_1098_pp0_iter13_reg <= icmp_ln48_reg_1098_pp0_iter12_reg;
                icmp_ln48_reg_1098_pp0_iter14_reg <= icmp_ln48_reg_1098_pp0_iter13_reg;
                icmp_ln48_reg_1098_pp0_iter15_reg <= icmp_ln48_reg_1098_pp0_iter14_reg;
                icmp_ln48_reg_1098_pp0_iter2_reg <= icmp_ln48_reg_1098_pp0_iter1_reg;
                icmp_ln48_reg_1098_pp0_iter3_reg <= icmp_ln48_reg_1098_pp0_iter2_reg;
                icmp_ln48_reg_1098_pp0_iter4_reg <= icmp_ln48_reg_1098_pp0_iter3_reg;
                icmp_ln48_reg_1098_pp0_iter5_reg <= icmp_ln48_reg_1098_pp0_iter4_reg;
                icmp_ln48_reg_1098_pp0_iter6_reg <= icmp_ln48_reg_1098_pp0_iter5_reg;
                icmp_ln48_reg_1098_pp0_iter7_reg <= icmp_ln48_reg_1098_pp0_iter6_reg;
                icmp_ln48_reg_1098_pp0_iter8_reg <= icmp_ln48_reg_1098_pp0_iter7_reg;
                icmp_ln48_reg_1098_pp0_iter9_reg <= icmp_ln48_reg_1098_pp0_iter8_reg;
                icmp_ln49_reg_1107_pp0_iter2_reg <= icmp_ln49_reg_1107_pp0_iter1_reg;
                icmp_ln49_reg_1107_pp0_iter3_reg <= icmp_ln49_reg_1107_pp0_iter2_reg;
                icmp_ln49_reg_1107_pp0_iter4_reg <= icmp_ln49_reg_1107_pp0_iter3_reg;
                icmp_ln49_reg_1107_pp0_iter5_reg <= icmp_ln49_reg_1107_pp0_iter4_reg;
                icmp_ln49_reg_1107_pp0_iter6_reg <= icmp_ln49_reg_1107_pp0_iter5_reg;
                select_ln49_3_reg_1117_pp0_iter2_reg <= select_ln49_3_reg_1117_pp0_iter1_reg;
                select_ln49_3_reg_1117_pp0_iter3_reg <= select_ln49_3_reg_1117_pp0_iter2_reg;
                select_ln49_3_reg_1117_pp0_iter4_reg <= select_ln49_3_reg_1117_pp0_iter3_reg;
                select_ln49_3_reg_1117_pp0_iter5_reg <= select_ln49_3_reg_1117_pp0_iter4_reg;
                select_ln49_3_reg_1117_pp0_iter6_reg <= select_ln49_3_reg_1117_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                bound103_i_reg_1093 <= grp_fu_364_p2;
                    bound49_cast_i_reg_1088(74 downto 0) <= bound49_cast_i_fu_381_p1(74 downto 0);
                    bound5_i_reg_1083(42 downto 11) <= bound5_i_fu_378_p1(42 downto 11);
                    zext_ln47_cast_i_reg_1078(57 downto 0) <= zext_ln47_cast_i_fu_375_p1(57 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound49_i_reg_1057 <= grp_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln48_fu_384_p2 = ap_const_lv1_0))) then
                empty_19_reg_1134 <= empty_19_fu_430_p2;
                icmp_ln49_reg_1107 <= icmp_ln49_fu_395_p2;
                or_ln54_reg_1127 <= or_ln54_fu_412_p2;
                select_ln49_3_reg_1117 <= select_ln49_3_fu_405_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_19_reg_1134_pp0_iter1_reg <= empty_19_reg_1134;
                icmp_ln48_reg_1098 <= icmp_ln48_fu_384_p2;
                icmp_ln48_reg_1098_pp0_iter1_reg <= icmp_ln48_reg_1098;
                icmp_ln49_reg_1107_pp0_iter1_reg <= icmp_ln49_reg_1107;
                select_ln49_3_reg_1117_pp0_iter1_reg <= select_ln49_3_reg_1117;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    empty_reg_1042(42 downto 11) <= empty_fu_340_p1(42 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln50_reg_1073 <= icmp_ln50_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln54_1_reg_1153_pp0_iter4_reg) and (ap_const_lv1_0 = and_ln54_2_reg_1163_pp0_iter4_reg) and (icmp_ln48_reg_1098_pp0_iter4_reg = ap_const_lv1_0))) then
                mul_ln54_1_reg_1198 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln54_2_reg_1163_pp0_iter4_reg) and (icmp_ln48_reg_1098_pp0_iter4_reg = ap_const_lv1_0))) then
                mul_ln54_2_reg_1203 <= grp_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln54_2_reg_1163_pp0_iter4_reg) and (ap_const_lv1_0 = and_ln54_1_reg_1153_pp0_iter4_reg) and (select_ln49_3_reg_1117_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln49_reg_1107_pp0_iter4_reg = ap_const_lv1_0))) then
                mul_ln54_reg_1193 <= grp_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln48_reg_1034 <= select_ln48_fu_323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln54_2_reg_1163_pp0_iter5_reg) and (ap_const_lv1_0 = and_ln54_1_reg_1153_pp0_iter5_reg) and (select_ln49_3_reg_1117_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln49_reg_1107_pp0_iter5_reg = ap_const_lv1_0))) then
                select_ln54_reg_1208 <= select_ln54_fu_742_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (select_ln49_3_reg_1117_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln54_2_reg_1163_pp0_iter5_reg) and (ap_const_lv1_0 = and_ln54_1_reg_1153_pp0_iter5_reg) and (icmp_ln48_reg_1098_pp0_iter5_reg = ap_const_lv1_0))) then
                tmp_20_i_reg_1219 <= sub_ln54_2_fu_783_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0))) then
                tmp_V_reg_1254 <= m_axi_B_p_V_RDATA;
            end if;
        end if;
    end process;
    empty_reg_1042(10 downto 0) <= "00000000000";
    zext_ln47_cast_i_reg_1078(59 downto 58) <= "00";
    bound5_i_reg_1083(10 downto 0) <= "00000000000";
    bound5_i_reg_1083(43) <= '0';
    bound49_cast_i_reg_1088(75) <= '0';
    add_ln54_2_reg_1229(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, B_p_V_offset_empty_n, N_empty_n, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = B_p_V_offset_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    BStream_V_V_blk_n_assign_proc : process(BStream_V_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, icmp_ln48_reg_1098_pp0_iter15_reg)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0))) then 
            BStream_V_V_blk_n <= BStream_V_V_full_n;
        else 
            BStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    BStream_V_V_din <= tmp_V_reg_1254;

    BStream_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter16, icmp_ln48_reg_1098_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0))) then 
            BStream_V_V_write <= ap_const_logic_1;
        else 
            BStream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    B_p_V_blk_n_AR_assign_proc : process(m_axi_B_p_V_ARREADY, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, empty_19_reg_1134_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_19_reg_1134_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_p_V_blk_n_AR <= m_axi_B_p_V_ARREADY;
        else 
            B_p_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_p_V_blk_n_R_assign_proc : process(m_axi_B_p_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, icmp_ln48_reg_1098_pp0_iter14_reg)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0))) then 
            B_p_V_blk_n_R <= m_axi_B_p_V_RVALID;
        else 
            B_p_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    B_p_V_offset_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, B_p_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_p_V_offset_blk_n <= B_p_V_offset_empty_n;
        else 
            B_p_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    B_p_V_offset_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, B_p_V_offset_empty_n, N_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = B_p_V_offset_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            B_p_V_offset_read <= ap_const_logic_1;
        else 
            B_p_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    N_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, B_p_V_offset_empty_n, N_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = B_p_V_offset_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln176_fu_996_p2 <= std_logic_vector(unsigned(zext_ln47_cast_i_reg_1078) + unsigned(sext_ln51_fu_992_p1));
    add_ln48_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv100_1) + unsigned(indvar_flatten162_i_reg_179));
    add_ln49_1_fu_450_p2 <= std_logic_vector(unsigned(indvar_flatten98_i_reg_190) + unsigned(ap_const_lv76_1));
    add_ln49_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln49_fu_750_p3));
    add_ln50_1_fu_436_p2 <= std_logic_vector(unsigned(indvar_flatten44_i_reg_201) + unsigned(ap_const_lv44_1));
    add_ln50_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln54_1_fu_509_p3));
    add_ln51_1_fu_657_p2 <= std_logic_vector(unsigned(indvar_flatten_i_reg_223) + unsigned(ap_const_lv13_1));
    add_ln51_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln54_6_fu_556_p3));
    add_ln52_fu_643_p2 <= std_logic_vector(unsigned(jj_0_i_i_reg_245) + unsigned(ap_const_lv4_1));
    add_ln54_1_fu_689_p2 <= std_logic_vector(unsigned(shl_ln54_fu_683_p2) + unsigned(mul_ln54_reg_1193));
    add_ln54_2_fu_811_p2 <= std_logic_vector(unsigned(shl_ln54_4_fu_806_p2) + unsigned(select_ln54_2_fu_776_p3));
    add_ln54_3_fu_629_p2 <= std_logic_vector(unsigned(zext_ln51_1_fu_625_p1) + unsigned(select_ln54_7_fu_570_p3));
    add_ln54_4_fu_817_p2 <= std_logic_vector(unsigned(mul_ln54_2_reg_1203) + unsigned(select_ln54_2_fu_776_p3));
    add_ln54_fu_474_p2 <= std_logic_vector(unsigned(shl_ln54_1_fu_464_p2) + unsigned(zext_ln51_fu_470_p1));
    and_ln49_1_fu_503_p2 <= (xor_ln49_fu_480_p2 and icmp_ln51_fu_497_p2);
    and_ln49_fu_491_p2 <= (xor_ln49_fu_480_p2 and icmp_ln52_fu_485_p2);
    and_ln54_1_fu_534_p2 <= (xor_ln54_fu_523_p2 and and_ln49_1_fu_503_p2);
    and_ln54_2_fu_594_p2 <= (or_ln54_4_fu_589_p2 and and_ln54_fu_528_p2);
    and_ln54_fu_528_p2 <= (xor_ln54_fu_523_p2 and and_ln49_fu_491_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(12);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_B_p_V_RVALID, BStream_V_V_full_n, ap_enable_reg_pp0_iter15, icmp_ln48_reg_1098_pp0_iter14_reg, ap_enable_reg_pp0_iter16, icmp_ln48_reg_1098_pp0_iter15_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_0 = BStream_V_V_full_n) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0)) or ((m_axi_B_p_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_B_p_V_RVALID, BStream_V_V_full_n, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, icmp_ln48_reg_1098_pp0_iter14_reg, ap_enable_reg_pp0_iter16, icmp_ln48_reg_1098_pp0_iter15_reg, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = BStream_V_V_full_n) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0)) or ((m_axi_B_p_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_B_p_V_RVALID, BStream_V_V_full_n, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, icmp_ln48_reg_1098_pp0_iter14_reg, ap_enable_reg_pp0_iter16, icmp_ln48_reg_1098_pp0_iter15_reg, ap_block_state20_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = BStream_V_V_full_n) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0)) or ((m_axi_B_p_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, B_p_V_offset_empty_n, N_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = B_p_V_offset_empty_n));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(m_axi_B_p_V_ARREADY, empty_19_reg_1134_pp0_iter7_reg)
    begin
                ap_block_state20_io <= ((m_axi_B_p_V_ARREADY = ap_const_logic_0) and (empty_19_reg_1134_pp0_iter7_reg = ap_const_lv1_1));
    end process;

        ap_block_state20_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp0_stage0_iter15_assign_proc : process(m_axi_B_p_V_RVALID, icmp_ln48_reg_1098_pp0_iter14_reg)
    begin
                ap_block_state27_pp0_stage0_iter15 <= ((m_axi_B_p_V_RVALID = ap_const_logic_0) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0));
    end process;


    ap_block_state28_pp0_stage0_iter16_assign_proc : process(BStream_V_V_full_n, icmp_ln48_reg_1098_pp0_iter15_reg)
    begin
                ap_block_state28_pp0_stage0_iter16 <= ((ap_const_logic_0 = BStream_V_V_full_n) and (icmp_ln48_reg_1098_pp0_iter15_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter6_state18_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter6_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter6_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound49_cast_i_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound49_i_reg_1057),76));
    bound5_i_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1042),44));
    empty_18_fu_418_p1 <= indvar_flatten162_i_reg_179(3 - 1 downto 0);
    empty_19_fu_430_p2 <= "1" when (tmp_13_fu_422_p3 = ap_const_lv100_0) else "0";
        empty_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i_fu_333_p3),43));

    grp_fu_352_p0 <= grp_fu_352_p00(32 - 1 downto 0);
    grp_fu_352_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln48_fu_330_p1),75));
    grp_fu_352_p1 <= grp_fu_352_p10(43 - 1 downto 0);
    grp_fu_352_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_340_p1),75));
    grp_fu_364_p0 <= grp_fu_364_p00(25 - 1 downto 0);
    grp_fu_364_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_reg_1034),100));
    grp_fu_364_p1 <= grp_fu_364_p10(75 - 1 downto 0);
    grp_fu_364_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound49_i_reg_1057),100));

    grp_fu_671_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_671_ce <= ap_const_logic_1;
        else 
            grp_fu_671_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_675_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_675_ce <= ap_const_logic_1;
        else 
            grp_fu_675_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_679_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_679_ce <= ap_const_logic_1;
        else 
            grp_fu_679_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln48_fu_384_p2 <= "1" when (indvar_flatten162_i_reg_179 = bound103_i_reg_1093) else "0";
    icmp_ln49_fu_395_p2 <= "1" when (indvar_flatten98_i_reg_190 = bound49_cast_i_reg_1088) else "0";
    icmp_ln50_1_fu_400_p2 <= "1" when (indvar_flatten44_i_reg_201 = bound5_i_reg_1083) else "0";
    icmp_ln50_fu_370_p2 <= "1" when (select_ln48_reg_1034 = ap_const_lv25_0) else "0";
    icmp_ln51_fu_497_p2 <= "1" when (indvar_flatten_i_reg_223 = ap_const_lv13_800) else "0";
    icmp_ln52_fu_485_p2 <= "1" when (jj_0_i_i_reg_245 = ap_const_lv4_8) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    jj_fu_649_p3 <= 
        ap_const_lv4_1 when (or_ln51_1_fu_620_p2(0) = '1') else 
        add_ln52_fu_643_p2;
    m_axi_B_p_V_ARADDR <= sext_ln176_fu_1001_p1;
    m_axi_B_p_V_ARBURST <= ap_const_lv2_0;
    m_axi_B_p_V_ARCACHE <= ap_const_lv4_0;
    m_axi_B_p_V_ARID <= ap_const_lv1_0;
    m_axi_B_p_V_ARLEN <= ap_const_lv32_8;
    m_axi_B_p_V_ARLOCK <= ap_const_lv2_0;
    m_axi_B_p_V_ARPROT <= ap_const_lv3_0;
    m_axi_B_p_V_ARQOS <= ap_const_lv4_0;
    m_axi_B_p_V_ARREGION <= ap_const_lv4_0;
    m_axi_B_p_V_ARSIZE <= ap_const_lv3_0;
    m_axi_B_p_V_ARUSER <= ap_const_lv1_0;

    m_axi_B_p_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter8, empty_19_reg_1134_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_19_reg_1134_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_B_p_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_B_p_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B_p_V_AWADDR <= ap_const_lv64_0;
    m_axi_B_p_V_AWBURST <= ap_const_lv2_0;
    m_axi_B_p_V_AWCACHE <= ap_const_lv4_0;
    m_axi_B_p_V_AWID <= ap_const_lv1_0;
    m_axi_B_p_V_AWLEN <= ap_const_lv32_0;
    m_axi_B_p_V_AWLOCK <= ap_const_lv2_0;
    m_axi_B_p_V_AWPROT <= ap_const_lv3_0;
    m_axi_B_p_V_AWQOS <= ap_const_lv4_0;
    m_axi_B_p_V_AWREGION <= ap_const_lv4_0;
    m_axi_B_p_V_AWSIZE <= ap_const_lv3_0;
    m_axi_B_p_V_AWUSER <= ap_const_lv1_0;
    m_axi_B_p_V_AWVALID <= ap_const_logic_0;
    m_axi_B_p_V_BREADY <= ap_const_logic_0;

    m_axi_B_p_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln48_reg_1098_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln48_reg_1098_pp0_iter14_reg = ap_const_lv1_0))) then 
            m_axi_B_p_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_B_p_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_B_p_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_B_p_V_WID <= ap_const_lv1_0;
    m_axi_B_p_V_WLAST <= ap_const_logic_0;
    m_axi_B_p_V_WSTRB <= ap_const_lv64_0;
    m_axi_B_p_V_WUSER <= ap_const_lv1_0;
    m_axi_B_p_V_WVALID <= ap_const_logic_0;
    or_ln51_1_fu_620_p2 <= (or_ln54_reg_1127 or or_ln51_fu_614_p2);
    or_ln51_fu_614_p2 <= (and_ln54_2_fu_594_p2 or and_ln54_1_fu_534_p2);
    or_ln54_1_fu_546_p2 <= (select_ln49_3_reg_1117 or and_ln54_1_fu_534_p2);
    or_ln54_2_fu_551_p2 <= (or_ln54_1_fu_546_p2 or icmp_ln49_reg_1107);
    or_ln54_3_fu_584_p2 <= (xor_ln54_1_fu_578_p2 or icmp_ln49_reg_1107);
    or_ln54_4_fu_589_p2 <= (select_ln49_3_reg_1117 or or_ln54_3_fu_584_p2);
    or_ln54_fu_412_p2 <= (select_ln49_3_fu_405_p3 or icmp_ln49_fu_395_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln48_fu_323_p3 <= 
        sub_ln48_1_fu_314_p2 when (tmp_8_reg_1024(0) = '1') else 
        zext_ln48_1_fu_320_p1;
    select_ln49_1_fu_757_p3 <= 
        ap_const_lv32_0 when (icmp_ln49_reg_1107_pp0_iter5_reg(0) = '1') else 
        shl_ln54_fu_683_p2;
    select_ln49_2_fu_822_p3 <= 
        ap_const_lv28_0 when (icmp_ln49_reg_1107_pp0_iter6_reg(0) = '1') else 
        select_ln54_reg_1208;
    select_ln49_3_fu_405_p3 <= 
        icmp_ln50_reg_1073 when (icmp_ln49_fu_395_p2(0) = '1') else 
        icmp_ln50_1_fu_400_p2;
    select_ln49_4_fu_799_p3 <= 
        add_ln49_fu_764_p2 when (select_ln49_3_reg_1117_pp0_iter5_reg(0) = '1') else 
        select_ln49_fu_750_p3;
    select_ln49_5_fu_456_p3 <= 
        ap_const_lv76_1 when (icmp_ln49_fu_395_p2(0) = '1') else 
        add_ln49_1_fu_450_p2;
    select_ln49_fu_750_p3 <= 
        ap_const_lv32_0 when (icmp_ln49_reg_1107_pp0_iter5_reg(0) = '1') else 
        jb_0_i_i_reg_256;
    select_ln50_1_fu_442_p3 <= 
        ap_const_lv44_1 when (or_ln54_fu_412_p2(0) = '1') else 
        add_ln50_1_fu_436_p2;
    select_ln50_fu_600_p3 <= 
        add_ln50_fu_540_p2 when (and_ln54_1_fu_534_p2(0) = '1') else 
        select_ln54_1_fu_509_p3;
    select_ln51_1_fu_635_p3 <= 
        add_ln51_fu_608_p2 when (and_ln54_2_fu_594_p2(0) = '1') else 
        select_ln54_6_fu_556_p3;
    select_ln51_2_fu_663_p3 <= 
        ap_const_lv13_1 when (or_ln54_2_fu_551_p2(0) = '1') else 
        add_ln51_1_fu_657_p2;
    select_ln51_fu_985_p3 <= 
        select_ln54_10_fu_977_p3 when (and_ln54_2_reg_1163_pp0_iter6_reg(0) = '1') else 
        select_ln54_9_fu_925_p3;
    select_ln54_10_fu_977_p3 <= 
        sub_ln54_7_fu_958_p2 when (tmp_12_fu_932_p3(0) = '1') else 
        zext_ln54_6_fu_973_p1;
    select_ln54_1_fu_509_p3 <= 
        ap_const_lv32_0 when (or_ln54_reg_1127(0) = '1') else 
        kb_0_i_i_reg_212;
    select_ln54_2_fu_776_p3 <= 
        shl_ln54_2_fu_770_p2 when (select_ln49_3_reg_1117_pp0_iter5_reg(0) = '1') else 
        select_ln49_1_fu_757_p3;
    select_ln54_3_fu_516_p3 <= 
        ap_const_lv32_0 when (or_ln54_reg_1127(0) = '1') else 
        shl_ln54_1_fu_464_p2;
    select_ln54_4_fu_857_p3 <= 
        sub_ln54_3_fu_841_p2 when (tmp_10_fu_831_p3(0) = '1') else 
        trunc_ln54_2_mid_i_fu_847_p4;
    select_ln54_5_fu_865_p3 <= 
        select_ln54_4_fu_857_p3 when (select_ln49_3_reg_1117_pp0_iter6_reg(0) = '1') else 
        select_ln49_2_fu_822_p3;
    select_ln54_6_fu_556_p3 <= 
        ap_const_lv9_0 when (or_ln54_2_fu_551_p2(0) = '1') else 
        k_0_i_i_reg_234;
    select_ln54_7_fu_570_p3 <= 
        shl_ln54_3_fu_564_p2 when (and_ln54_1_fu_534_p2(0) = '1') else 
        select_ln54_3_fu_516_p3;
    select_ln54_8_fu_917_p3 <= 
        sub_ln54_5_fu_898_p2 when (tmp_11_fu_872_p3(0) = '1') else 
        zext_ln54_4_fu_913_p1;
    select_ln54_9_fu_925_p3 <= 
        select_ln54_8_fu_917_p3 when (and_ln54_1_reg_1153_pp0_iter6_reg(0) = '1') else 
        select_ln54_5_fu_865_p3;
    select_ln54_fu_742_p3 <= 
        sub_ln54_1_fu_722_p2 when (tmp_9_fu_694_p3(0) = '1') else 
        zext_ln54_1_fu_738_p1;
        sext_ln176_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln176_reg_1243),64));

        sext_ln48_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln48_reg_1034),32));

        sext_ln51_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln51_fu_985_p3),60));

    shl_ln54_1_fu_464_p2 <= std_logic_vector(shift_left(unsigned(kb_0_i_i_reg_212),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln54_2_fu_770_p2 <= std_logic_vector(shift_left(unsigned(add_ln49_fu_764_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln54_3_fu_564_p2 <= std_logic_vector(shift_left(unsigned(add_ln50_fu_540_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln54_4_fu_806_p2 <= std_logic_vector(shift_left(unsigned(mul_ln54_1_reg_1198),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln54_fu_683_p2 <= std_logic_vector(shift_left(unsigned(jb_0_i_i_reg_256),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln48_1_fu_314_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(zext_ln48_fu_310_p1));
    sub_ln48_fu_295_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(N_read_reg_1016));
    sub_ln54_1_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln54_fu_718_p1));
    sub_ln54_2_fu_783_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln54_2_fu_770_p2));
    sub_ln54_3_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln54_2_fu_838_p1));
    sub_ln54_4_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln54_2_reg_1229));
    sub_ln54_5_fu_898_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln54_3_fu_894_p1));
    sub_ln54_6_fu_939_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln54_4_reg_1236));
    sub_ln54_7_fu_958_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln54_5_fu_954_p1));
    sub_ln54_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln54_1_fu_689_p2));
    tmp_10_fu_831_p3 <= add_ln49_reg_1213(23 downto 23);
    tmp_11_fu_872_p3 <= add_ln54_2_reg_1229(31 downto 31);
    tmp_12_fu_932_p3 <= add_ln54_4_reg_1236(31 downto 31);
    tmp_13_fu_422_p3 <= (ap_const_lv97_0 & empty_18_fu_418_p1);
    tmp_13_i_fu_285_p1 <= N_dout;
    tmp_14_i_fu_333_p3 <= (select_ln48_reg_1034 & ap_const_lv11_0);
    tmp_17_i_fu_708_p4 <= sub_ln54_fu_702_p2(31 downto 5);
    tmp_18_i_fu_728_p4 <= add_ln54_1_fu_689_p2(31 downto 5);
    tmp_24_i_fu_884_p4 <= sub_ln54_4_fu_879_p2(31 downto 5);
    tmp_25_i_fu_904_p4 <= add_ln54_2_reg_1229(31 downto 5);
    tmp_26_i_fu_944_p4 <= sub_ln54_6_fu_939_p2(31 downto 5);
    tmp_27_i_fu_964_p4 <= add_ln54_4_reg_1236(31 downto 5);
    tmp_8_fu_277_p1 <= N_dout;
    tmp_9_fu_694_p3 <= add_ln54_1_fu_689_p2(31 downto 31);
    tmp_i_fu_300_p4 <= sub_ln48_fu_295_p2(31 downto 8);
    trunc_ln54_2_mid_i_fu_847_p4 <= ((ap_const_lv1_0 & trunc_ln54_fu_828_p1) & ap_const_lv3_0);
    trunc_ln54_fu_828_p1 <= add_ln49_reg_1213(24 - 1 downto 0);
    xor_ln49_fu_480_p2 <= (icmp_ln49_reg_1107 xor ap_const_lv1_1);
    xor_ln54_1_fu_578_p2 <= (icmp_ln51_fu_497_p2 xor ap_const_lv1_1);
    xor_ln54_fu_523_p2 <= (select_ln49_3_reg_1117 xor ap_const_lv1_1);
    zext_ln47_cast_i_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1011),60));
    zext_ln48_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_i_reg_1029),25));
    zext_ln48_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_300_p4),25));
    zext_ln51_1_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_fu_608_p2),32));
    zext_ln51_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_i_reg_234),32));
    zext_ln54_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_i_fu_728_p4),28));
    zext_ln54_2_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_i_reg_1219),28));
    zext_ln54_3_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_i_fu_884_p4),28));
    zext_ln54_4_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_i_fu_904_p4),28));
    zext_ln54_5_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_i_fu_944_p4),28));
    zext_ln54_6_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_i_fu_964_p4),28));
    zext_ln54_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_i_fu_708_p4),28));
end behav;
