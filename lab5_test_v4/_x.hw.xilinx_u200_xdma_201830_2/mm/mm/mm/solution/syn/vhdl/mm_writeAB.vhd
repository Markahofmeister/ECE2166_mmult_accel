-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mm_writeAB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ABStream_V_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    ABStream_V_V_empty_n : IN STD_LOGIC;
    ABStream_V_V_read : OUT STD_LOGIC;
    m_axi_AB_V_AWVALID : OUT STD_LOGIC;
    m_axi_AB_V_AWREADY : IN STD_LOGIC;
    m_axi_AB_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_AB_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_AB_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_WVALID : OUT STD_LOGIC;
    m_axi_AB_V_WREADY : IN STD_LOGIC;
    m_axi_AB_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_AB_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_AB_V_WLAST : OUT STD_LOGIC;
    m_axi_AB_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_ARVALID : OUT STD_LOGIC;
    m_axi_AB_V_ARREADY : IN STD_LOGIC;
    m_axi_AB_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_AB_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_AB_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AB_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AB_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_RVALID : IN STD_LOGIC;
    m_axi_AB_V_RREADY : OUT STD_LOGIC;
    m_axi_AB_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_AB_V_RLAST : IN STD_LOGIC;
    m_axi_AB_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_BVALID : IN STD_LOGIC;
    m_axi_AB_V_BREADY : OUT STD_LOGIC;
    m_axi_AB_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AB_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_AB_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    AB_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    AB_V_offset_empty_n : IN STD_LOGIC;
    AB_V_offset_read : OUT STD_LOGIC;
    N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC );
end;


architecture behav of mm_writeAB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv68_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv44_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv68_1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv44_1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv13_800 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ABStream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln120_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_V_blk_n_AW : STD_LOGIC;
    signal empty_14_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln120_reg_993_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_V_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal empty_17_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal AB_V_offset_blk_n : STD_LOGIC;
    signal N_blk_n : STD_LOGIC;
    signal indvar_flatten98_i_reg_188 : STD_LOGIC_VECTOR (67 downto 0);
    signal indvar_flatten44_i_reg_199 : STD_LOGIC_VECTOR (43 downto 0);
    signal ib_0_i_i_reg_210 : STD_LOGIC_VECTOR (23 downto 0);
    signal indvar_flatten_i_reg_221 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i_i_reg_232 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_0_i_i_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal jb_0_i_i_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_933 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal N_read_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_952 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln120_fu_321_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln120_reg_957 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_335_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal empty_reg_963 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln119_cast_i_fu_352_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln119_cast_i_reg_978 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bound5_i_fu_355_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal bound5_i_reg_983 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal bound49_i_reg_988 : STD_LOGIC_VECTOR (67 downto 0);
    signal icmp_ln120_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln120_reg_993_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_993_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln120_fu_363_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal add_ln120_reg_997 : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln121_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1003_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_1016_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_1_fu_398_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln125_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln120_1_fu_424_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln120_1_reg_1030 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln120_2_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln120_2_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln120_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_1_reg_1040_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln120_4_fu_474_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal and_ln125_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln125_reg_1052_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_3_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_3_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln122_1_fu_538_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal jj_fu_552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_2_fu_566_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_17_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_1077_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln125_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln125_1_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln125_1_reg_1091_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln125_2_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln125_3_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln125_fu_670_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln125_reg_1108 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_7_i_reg_1113 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln125_2_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_2_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln121_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal add_ln125_4_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_4_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_fu_918_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln180_reg_1137 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_V_reg_1142 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter6_state13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 : STD_LOGIC_VECTOR (67 downto 0);
    signal sext_ln180_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_1_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln120_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_298_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln120_fu_308_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln120_1_fu_312_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln120_1_fu_318_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_i_fu_328_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal empty_13_fu_374_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_378_p3 : STD_LOGIC_VECTOR (67 downto 0);
    signal add_ln121_1_fu_392_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln122_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_i_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln125_mid1_i_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln123_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln120_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln125_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln125_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln125_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln125_1_fu_486_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln122_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_511_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln122_1_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln123_fu_546_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln122_1_fu_560_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_16_fu_574_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_577_p3 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_598_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln125_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_1_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln125_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_636_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln125_fu_646_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_i_fu_656_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln125_1_fu_650_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln125_1_fu_666_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln125_1_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln125_2_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln120_1_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln125_2_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln120_3_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln125_2_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln125_2_fu_759_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln125_fu_749_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln125_2_mid_i_fu_768_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln125_4_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_fu_792_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln125_4_fu_802_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_10_i_fu_812_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln125_6_fu_832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_fu_837_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln125_6_fu_847_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_i_fu_857_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_fu_825_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln125_7_fu_851_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln125_7_fu_866_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_4_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln125_5_fu_806_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln125_5_fu_821_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_3_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln125_3_fu_762_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln125_3_fu_776_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln125_5_fu_886_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln125_4_fu_878_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln120_5_fu_894_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln125_3_fu_870_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln125_6_fu_900_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln122_fu_907_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln122_fu_914_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_591_ce : STD_LOGIC;
    signal grp_fu_598_ce : STD_LOGIC;
    signal grp_fu_603_ce : STD_LOGIC;
    signal grp_fu_607_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_346_p00 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_346_p10 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_598_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component mm_mm_mul_25ns_43ns_68_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (42 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;


    component mm_mm_mul_32s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mm_mm_mul_32s_24ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mm_mul_25ns_43ns_68_4_1_U335 : component mm_mm_mul_25ns_43ns_68_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 43,
        dout_WIDTH => 68)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    mm_mul_32s_32s_32_4_1_U336 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln125_reg_1025,
        din1 => N_read_reg_938,
        ce => grp_fu_591_ce,
        dout => grp_fu_591_p2);

    mm_mul_32s_24ns_32_4_1_U337 : component mm_mm_mul_32s_24ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => N_read_reg_938,
        din1 => grp_fu_598_p1,
        ce => grp_fu_598_ce,
        dout => grp_fu_598_p2);

    mm_mul_32s_32s_32_4_1_U338 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln120_2_reg_1035,
        din1 => N_read_reg_938,
        ce => grp_fu_603_ce,
        dout => grp_fu_603_p2);

    mm_mul_32s_32s_32_4_1_U339 : component mm_mm_mul_32s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln125_3_reg_1057,
        din1 => N_read_reg_938,
        ce => grp_fu_607_ce,
        dout => grp_fu_607_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln120_fu_358_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter6_state13)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_i_reg_232 <= select_ln122_1_fu_538_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_i_reg_232 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ib_0_i_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ib_0_i_i_reg_210 <= select_ln120_4_fu_474_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ib_0_i_i_reg_210 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    indvar_flatten44_i_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_358_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten44_i_reg_199 <= select_ln121_1_fu_398_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten44_i_reg_199 <= ap_const_lv44_0;
            end if; 
        end if;
    end process;

    indvar_flatten98_i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten98_i_reg_188 <= add_ln120_reg_997;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten98_i_reg_188 <= ap_const_lv68_0;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_i_reg_221 <= select_ln122_2_fu_566_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_i_reg_221 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    jb_0_i_i_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
                jb_0_i_i_reg_254 <= select_ln121_fu_737_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                jb_0_i_i_reg_254 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    jj_0_i_i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                jj_0_i_i_reg_243 <= jj_fu_552_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                jj_0_i_i_reg_243 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = AB_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                N_read_reg_938 <= N_dout;
                tmp_1_i_reg_952 <= tmp_1_i_fu_283_p1(31 downto 8);
                tmp_1_reg_947 <= tmp_1_fu_275_p1(31 downto 31);
                tmp_reg_933 <= AB_V_offset_dout(63 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln120_1_reg_1030 <= add_ln120_1_fu_424_p2;
                add_ln125_3_reg_1057 <= add_ln125_3_fu_532_p2;
                and_ln120_1_reg_1040 <= and_ln120_1_fu_468_p2;
                and_ln125_reg_1052 <= and_ln125_fu_505_p2;
                empty_17_reg_1077 <= empty_17_fu_585_p2;
                    select_ln120_2_reg_1035(31 downto 8) <= select_ln120_2_fu_438_p3(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln120_reg_997 <= add_ln120_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter5_reg) and (icmp_ln120_reg_993_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln120_1_reg_1040_pp0_iter5_reg))) then
                add_ln125_2_reg_1118 <= add_ln125_2_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln125_reg_1052_pp0_iter5_reg))) then
                add_ln125_4_reg_1130 <= add_ln125_4_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln121_reg_1003 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln125_reg_1025 <= add_ln125_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln180_reg_1137 <= add_ln180_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln120_1_reg_1040_pp0_iter2_reg <= and_ln120_1_reg_1040;
                and_ln120_1_reg_1040_pp0_iter3_reg <= and_ln120_1_reg_1040_pp0_iter2_reg;
                and_ln120_1_reg_1040_pp0_iter4_reg <= and_ln120_1_reg_1040_pp0_iter3_reg;
                and_ln120_1_reg_1040_pp0_iter5_reg <= and_ln120_1_reg_1040_pp0_iter4_reg;
                and_ln120_1_reg_1040_pp0_iter6_reg <= and_ln120_1_reg_1040_pp0_iter5_reg;
                and_ln125_reg_1052_pp0_iter2_reg <= and_ln125_reg_1052;
                and_ln125_reg_1052_pp0_iter3_reg <= and_ln125_reg_1052_pp0_iter2_reg;
                and_ln125_reg_1052_pp0_iter4_reg <= and_ln125_reg_1052_pp0_iter3_reg;
                and_ln125_reg_1052_pp0_iter5_reg <= and_ln125_reg_1052_pp0_iter4_reg;
                and_ln125_reg_1052_pp0_iter6_reg <= and_ln125_reg_1052_pp0_iter5_reg;
                empty_14_reg_1016_pp0_iter2_reg <= empty_14_reg_1016_pp0_iter1_reg;
                empty_14_reg_1016_pp0_iter3_reg <= empty_14_reg_1016_pp0_iter2_reg;
                empty_14_reg_1016_pp0_iter4_reg <= empty_14_reg_1016_pp0_iter3_reg;
                empty_14_reg_1016_pp0_iter5_reg <= empty_14_reg_1016_pp0_iter4_reg;
                empty_14_reg_1016_pp0_iter6_reg <= empty_14_reg_1016_pp0_iter5_reg;
                empty_14_reg_1016_pp0_iter7_reg <= empty_14_reg_1016_pp0_iter6_reg;
                empty_17_reg_1077_pp0_iter10_reg <= empty_17_reg_1077_pp0_iter9_reg;
                empty_17_reg_1077_pp0_iter11_reg <= empty_17_reg_1077_pp0_iter10_reg;
                empty_17_reg_1077_pp0_iter12_reg <= empty_17_reg_1077_pp0_iter11_reg;
                empty_17_reg_1077_pp0_iter13_reg <= empty_17_reg_1077_pp0_iter12_reg;
                empty_17_reg_1077_pp0_iter2_reg <= empty_17_reg_1077;
                empty_17_reg_1077_pp0_iter3_reg <= empty_17_reg_1077_pp0_iter2_reg;
                empty_17_reg_1077_pp0_iter4_reg <= empty_17_reg_1077_pp0_iter3_reg;
                empty_17_reg_1077_pp0_iter5_reg <= empty_17_reg_1077_pp0_iter4_reg;
                empty_17_reg_1077_pp0_iter6_reg <= empty_17_reg_1077_pp0_iter5_reg;
                empty_17_reg_1077_pp0_iter7_reg <= empty_17_reg_1077_pp0_iter6_reg;
                empty_17_reg_1077_pp0_iter8_reg <= empty_17_reg_1077_pp0_iter7_reg;
                empty_17_reg_1077_pp0_iter9_reg <= empty_17_reg_1077_pp0_iter8_reg;
                icmp_ln120_reg_993_pp0_iter2_reg <= icmp_ln120_reg_993_pp0_iter1_reg;
                icmp_ln120_reg_993_pp0_iter3_reg <= icmp_ln120_reg_993_pp0_iter2_reg;
                icmp_ln120_reg_993_pp0_iter4_reg <= icmp_ln120_reg_993_pp0_iter3_reg;
                icmp_ln120_reg_993_pp0_iter5_reg <= icmp_ln120_reg_993_pp0_iter4_reg;
                icmp_ln120_reg_993_pp0_iter6_reg <= icmp_ln120_reg_993_pp0_iter5_reg;
                icmp_ln120_reg_993_pp0_iter7_reg <= icmp_ln120_reg_993_pp0_iter6_reg;
                icmp_ln120_reg_993_pp0_iter8_reg <= icmp_ln120_reg_993_pp0_iter7_reg;
                icmp_ln121_reg_1003_pp0_iter2_reg <= icmp_ln121_reg_1003_pp0_iter1_reg;
                icmp_ln121_reg_1003_pp0_iter3_reg <= icmp_ln121_reg_1003_pp0_iter2_reg;
                icmp_ln121_reg_1003_pp0_iter4_reg <= icmp_ln121_reg_1003_pp0_iter3_reg;
                icmp_ln121_reg_1003_pp0_iter5_reg <= icmp_ln121_reg_1003_pp0_iter4_reg;
                icmp_ln121_reg_1003_pp0_iter6_reg <= icmp_ln121_reg_1003_pp0_iter5_reg;
                mul_ln125_1_reg_1091_pp0_iter6_reg <= mul_ln125_1_reg_1091;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound49_i_reg_988 <= grp_fu_346_p2;
                    bound5_i_reg_983(42 downto 11) <= bound5_i_fu_355_p1(42 downto 11);
                    zext_ln119_cast_i_reg_978(57 downto 0) <= zext_ln119_cast_i_fu_352_p1(57 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_358_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_14_reg_1016 <= empty_14_fu_386_p2;
                icmp_ln121_reg_1003 <= icmp_ln121_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_14_reg_1016_pp0_iter1_reg <= empty_14_reg_1016;
                icmp_ln120_reg_993 <= icmp_ln120_fu_358_p2;
                icmp_ln120_reg_993_pp0_iter1_reg <= icmp_ln120_reg_993;
                icmp_ln121_reg_1003_pp0_iter1_reg <= icmp_ln121_reg_1003;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    empty_reg_963(42 downto 11) <= empty_fu_335_p1(42 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter4_reg) and (ap_const_lv1_0 = and_ln120_1_reg_1040_pp0_iter4_reg) and (icmp_ln120_reg_993_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1003_pp0_iter4_reg = ap_const_lv1_1))) then
                mul_ln125_1_reg_1091 <= grp_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter4_reg) and (icmp_ln120_reg_993_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln120_1_reg_1040_pp0_iter4_reg))) then
                mul_ln125_2_reg_1098 <= grp_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln125_reg_1052_pp0_iter4_reg))) then
                mul_ln125_3_reg_1103 <= grp_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter4_reg) and (ap_const_lv1_0 = and_ln120_1_reg_1040_pp0_iter4_reg) and (icmp_ln121_reg_1003_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln125_reg_1086 <= grp_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln120_reg_957 <= select_ln120_fu_321_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter5_reg) and (ap_const_lv1_0 = and_ln120_1_reg_1040_pp0_iter5_reg) and (icmp_ln121_reg_1003_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln125_reg_1108 <= select_ln125_fu_670_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln125_reg_1052_pp0_iter5_reg) and (ap_const_lv1_0 = and_ln120_1_reg_1040_pp0_iter5_reg) and (icmp_ln120_reg_993_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln121_reg_1003_pp0_iter5_reg = ap_const_lv1_1))) then
                tmp_7_i_reg_1113 <= sub_ln125_2_fu_697_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_1142 <= ABStream_V_V_dout;
            end if;
        end if;
    end process;
    empty_reg_963(10 downto 0) <= "00000000000";
    zext_ln119_cast_i_reg_978(59 downto 58) <= "00";
    bound5_i_reg_983(10 downto 0) <= "00000000000";
    bound5_i_reg_983(43) <= '0';
    select_ln120_2_reg_1035(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, AB_V_offset_empty_n, N_empty_n, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = AB_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    ABStream_V_V_blk_n_assign_proc : process(ABStream_V_V_empty_n, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, icmp_ln120_reg_993_pp0_iter7_reg)
    begin
        if (((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ABStream_V_V_blk_n <= ABStream_V_V_empty_n;
        else 
            ABStream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ABStream_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln120_reg_993_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ABStream_V_V_read <= ap_const_logic_1;
        else 
            ABStream_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    AB_V_blk_n_AW_assign_proc : process(m_axi_AB_V_AWREADY, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, empty_14_reg_1016_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_14_reg_1016_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            AB_V_blk_n_AW <= m_axi_AB_V_AWREADY;
        else 
            AB_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AB_V_blk_n_B_assign_proc : process(m_axi_AB_V_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, empty_17_reg_1077_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            AB_V_blk_n_B <= m_axi_AB_V_BVALID;
        else 
            AB_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    AB_V_blk_n_W_assign_proc : process(m_axi_AB_V_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln120_reg_993_pp0_iter8_reg)
    begin
        if (((icmp_ln120_reg_993_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            AB_V_blk_n_W <= m_axi_AB_V_WREADY;
        else 
            AB_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    AB_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, AB_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            AB_V_offset_blk_n <= AB_V_offset_empty_n;
        else 
            AB_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    AB_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, AB_V_offset_empty_n, N_empty_n)
    begin
        if ((not(((ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = AB_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            AB_V_offset_read <= ap_const_logic_1;
        else 
            AB_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    N_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, AB_V_offset_empty_n, N_empty_n)
    begin
        if ((not(((ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = AB_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln120_1_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(ib_0_i_i_reg_210));
    add_ln120_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv68_1) + unsigned(ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4));
    add_ln121_1_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv44_1) + unsigned(indvar_flatten44_i_reg_199));
    add_ln121_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln120_1_fu_678_p3));
    add_ln122_1_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(indvar_flatten_i_reg_221));
    add_ln122_fu_511_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(select_ln125_1_fu_486_p3));
    add_ln123_fu_546_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(jj_0_i_i_reg_243));
    add_ln125_1_fu_617_p2 <= std_logic_vector(unsigned(mul_ln125_reg_1086) + unsigned(shl_ln125_fu_611_p2));
    add_ln125_2_fu_732_p2 <= std_logic_vector(unsigned(mul_ln125_2_reg_1098) + unsigned(shl_ln125_2_fu_719_p2));
    add_ln125_3_fu_532_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_528_p1) + unsigned(select_ln120_2_fu_438_p3));
    add_ln125_4_fu_744_p2 <= std_logic_vector(unsigned(mul_ln125_3_reg_1103) + unsigned(select_ln125_2_fu_725_p3));
    add_ln125_fu_418_p2 <= std_logic_vector(unsigned(zext_ln122_fu_414_p1) + unsigned(shl_ln_i_fu_406_p3));
    add_ln180_fu_918_p2 <= std_logic_vector(unsigned(zext_ln119_cast_i_reg_978) + unsigned(sext_ln122_fu_914_p1));
    and_ln120_1_fu_468_p2 <= (xor_ln120_fu_445_p2 and icmp_ln122_fu_462_p2);
    and_ln120_fu_456_p2 <= (xor_ln120_fu_445_p2 and icmp_ln123_fu_450_p2);
    and_ln125_fu_505_p2 <= (or_ln125_1_fu_500_p2 and and_ln120_fu_456_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(7);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ABStream_V_V_empty_n, m_axi_AB_V_BVALID, ap_enable_reg_pp0_iter8, icmp_ln120_reg_993_pp0_iter7_reg, ap_enable_reg_pp0_iter14, empty_17_reg_1077_pp0_iter13_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((m_axi_AB_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1)) or ((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = ABStream_V_V_empty_n) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ABStream_V_V_empty_n, m_axi_AB_V_BVALID, ap_enable_reg_pp0_iter8, icmp_ln120_reg_993_pp0_iter7_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, empty_17_reg_1077_pp0_iter13_reg, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_AB_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state15_io) or ((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = ABStream_V_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ABStream_V_V_empty_n, m_axi_AB_V_BVALID, ap_enable_reg_pp0_iter8, icmp_ln120_reg_993_pp0_iter7_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, empty_17_reg_1077_pp0_iter13_reg, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_AB_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state15_io) or ((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = ABStream_V_V_empty_n)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, AB_V_offset_empty_n, N_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = AB_V_offset_empty_n) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(m_axi_AB_V_AWREADY, empty_14_reg_1016_pp0_iter7_reg)
    begin
                ap_block_state15_io <= ((m_axi_AB_V_AWREADY = ap_const_logic_0) and (empty_14_reg_1016_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_state15_pp0_stage0_iter8_assign_proc : process(ABStream_V_V_empty_n, icmp_ln120_reg_993_pp0_iter7_reg)
    begin
                ap_block_state15_pp0_stage0_iter8 <= ((icmp_ln120_reg_993_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = ABStream_V_V_empty_n));
    end process;


    ap_block_state16_io_assign_proc : process(m_axi_AB_V_WREADY, icmp_ln120_reg_993_pp0_iter8_reg)
    begin
                ap_block_state16_io <= ((icmp_ln120_reg_993_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_AB_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter14_assign_proc : process(m_axi_AB_V_BVALID, empty_17_reg_1077_pp0_iter13_reg)
    begin
                ap_block_state21_pp0_stage0_iter14 <= ((m_axi_AB_V_BVALID = ap_const_logic_0) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter6_state13_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter6_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter6_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln120_reg_993, indvar_flatten98_i_reg_188, ap_CS_fsm_pp0_stage0, add_ln120_reg_997, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln120_reg_993 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 <= add_ln120_reg_997;
        else 
            ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 <= indvar_flatten98_i_reg_188;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound5_i_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_963),44));
    empty_13_fu_374_p1 <= ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4(3 - 1 downto 0);
    empty_14_fu_386_p2 <= "1" when (tmp_6_fu_378_p3 = ap_const_lv68_0) else "0";
    empty_16_fu_574_p1 <= add_ln120_reg_997(3 - 1 downto 0);
    empty_17_fu_585_p2 <= "1" when (tmp_7_fu_577_p3 = ap_const_lv68_0) else "0";
        empty_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_fu_328_p3),43));

    grp_fu_346_p0 <= grp_fu_346_p00(25 - 1 downto 0);
    grp_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln120_reg_957),68));
    grp_fu_346_p1 <= grp_fu_346_p10(43 - 1 downto 0);
    grp_fu_346_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_335_p1),68));

    grp_fu_591_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_591_ce <= ap_const_logic_1;
        else 
            grp_fu_591_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_598_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_598_ce <= ap_const_logic_1;
        else 
            grp_fu_598_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_598_p1 <= grp_fu_598_p10(24 - 1 downto 0);
    grp_fu_598_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln120_1_reg_1030),32));

    grp_fu_603_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_603_ce <= ap_const_logic_1;
        else 
            grp_fu_603_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_607_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_607_ce <= ap_const_logic_1;
        else 
            grp_fu_607_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln120_fu_358_p2 <= "1" when (ap_phi_mux_indvar_flatten98_i_phi_fu_192_p4 = bound49_i_reg_988) else "0";
    icmp_ln121_fu_369_p2 <= "1" when (indvar_flatten44_i_reg_199 = bound5_i_reg_983) else "0";
    icmp_ln122_fu_462_p2 <= "1" when (indvar_flatten_i_reg_221 = ap_const_lv13_800) else "0";
    icmp_ln123_fu_450_p2 <= "1" when (jj_0_i_i_reg_243 = ap_const_lv4_8) else "0";
    jj_fu_552_p3 <= 
        ap_const_lv4_1 when (or_ln122_1_fu_523_p2(0) = '1') else 
        add_ln123_fu_546_p2;
    lshr_ln125_2_mid_i_fu_768_p3 <= (trunc_ln125_fu_749_p1 & ap_const_lv3_0);
    m_axi_AB_V_ARADDR <= ap_const_lv64_0;
    m_axi_AB_V_ARBURST <= ap_const_lv2_0;
    m_axi_AB_V_ARCACHE <= ap_const_lv4_0;
    m_axi_AB_V_ARID <= ap_const_lv1_0;
    m_axi_AB_V_ARLEN <= ap_const_lv32_0;
    m_axi_AB_V_ARLOCK <= ap_const_lv2_0;
    m_axi_AB_V_ARPROT <= ap_const_lv3_0;
    m_axi_AB_V_ARQOS <= ap_const_lv4_0;
    m_axi_AB_V_ARREGION <= ap_const_lv4_0;
    m_axi_AB_V_ARSIZE <= ap_const_lv3_0;
    m_axi_AB_V_ARUSER <= ap_const_lv1_0;
    m_axi_AB_V_ARVALID <= ap_const_logic_0;
    m_axi_AB_V_AWADDR <= sext_ln180_fu_923_p1;
    m_axi_AB_V_AWBURST <= ap_const_lv2_0;
    m_axi_AB_V_AWCACHE <= ap_const_lv4_0;
    m_axi_AB_V_AWID <= ap_const_lv1_0;
    m_axi_AB_V_AWLEN <= ap_const_lv32_8;
    m_axi_AB_V_AWLOCK <= ap_const_lv2_0;
    m_axi_AB_V_AWPROT <= ap_const_lv3_0;
    m_axi_AB_V_AWQOS <= ap_const_lv4_0;
    m_axi_AB_V_AWREGION <= ap_const_lv4_0;
    m_axi_AB_V_AWSIZE <= ap_const_lv3_0;
    m_axi_AB_V_AWUSER <= ap_const_lv1_0;

    m_axi_AB_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter8, empty_14_reg_1016_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (empty_14_reg_1016_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_AB_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_AB_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_AB_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter14, empty_17_reg_1077_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (empty_17_reg_1077_pp0_iter13_reg = ap_const_lv1_1))) then 
            m_axi_AB_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_AB_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_AB_V_RREADY <= ap_const_logic_0;
    m_axi_AB_V_WDATA <= tmp_V_reg_1142;
    m_axi_AB_V_WID <= ap_const_lv1_0;
    m_axi_AB_V_WLAST <= ap_const_logic_0;
    m_axi_AB_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_AB_V_WUSER <= ap_const_lv1_0;

    m_axi_AB_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln120_reg_993_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln120_reg_993_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            m_axi_AB_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_AB_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln122_1_fu_523_p2 <= (or_ln122_fu_517_p2 or icmp_ln121_reg_1003);
    or_ln122_fu_517_p2 <= (and_ln125_fu_505_p2 or and_ln120_1_fu_468_p2);
    or_ln125_1_fu_500_p2 <= (xor_ln125_fu_494_p2 or icmp_ln121_reg_1003);
    or_ln125_fu_481_p2 <= (icmp_ln121_reg_1003 or and_ln120_1_fu_468_p2);
    select_ln120_1_fu_678_p3 <= 
        ap_const_lv32_0 when (icmp_ln121_reg_1003_pp0_iter5_reg(0) = '1') else 
        jb_0_i_i_reg_254;
    select_ln120_2_fu_438_p3 <= 
        shl_ln125_mid1_i_fu_430_p3 when (icmp_ln121_reg_1003(0) = '1') else 
        shl_ln_i_fu_406_p3;
    select_ln120_3_fu_685_p3 <= 
        ap_const_lv32_0 when (icmp_ln121_reg_1003_pp0_iter5_reg(0) = '1') else 
        shl_ln125_fu_611_p2;
    select_ln120_4_fu_474_p3 <= 
        add_ln120_1_fu_424_p2 when (icmp_ln121_reg_1003(0) = '1') else 
        ib_0_i_i_reg_210;
    select_ln120_5_fu_894_p3 <= 
        select_ln125_5_fu_886_p3 when (icmp_ln121_reg_1003_pp0_iter6_reg(0) = '1') else 
        select_ln125_reg_1108;
    select_ln120_fu_321_p3 <= 
        sub_ln120_1_fu_312_p2 when (tmp_1_reg_947(0) = '1') else 
        zext_ln120_1_fu_318_p1;
    select_ln121_1_fu_398_p3 <= 
        ap_const_lv44_1 when (icmp_ln121_fu_369_p2(0) = '1') else 
        add_ln121_1_fu_392_p2;
    select_ln121_fu_737_p3 <= 
        add_ln121_fu_713_p2 when (and_ln120_1_reg_1040_pp0_iter5_reg(0) = '1') else 
        select_ln120_1_fu_678_p3;
    select_ln122_1_fu_538_p3 <= 
        add_ln122_fu_511_p2 when (and_ln125_fu_505_p2(0) = '1') else 
        select_ln125_1_fu_486_p3;
    select_ln122_2_fu_566_p3 <= 
        ap_const_lv13_1 when (or_ln125_fu_481_p2(0) = '1') else 
        add_ln122_1_fu_560_p2;
    select_ln122_fu_907_p3 <= 
        select_ln125_3_fu_870_p3 when (and_ln125_reg_1052_pp0_iter6_reg(0) = '1') else 
        select_ln125_6_fu_900_p3;
    select_ln125_1_fu_486_p3 <= 
        ap_const_lv9_0 when (or_ln125_fu_481_p2(0) = '1') else 
        i_0_i_i_reg_232;
    select_ln125_2_fu_725_p3 <= 
        shl_ln125_2_fu_719_p2 when (and_ln120_1_reg_1040_pp0_iter5_reg(0) = '1') else 
        select_ln120_3_fu_685_p3;
    select_ln125_3_fu_870_p3 <= 
        sub_ln125_7_fu_851_p2 when (tmp_5_fu_825_p3(0) = '1') else 
        zext_ln125_7_fu_866_p1;
    select_ln125_4_fu_878_p3 <= 
        sub_ln125_5_fu_806_p2 when (tmp_4_fu_780_p3(0) = '1') else 
        zext_ln125_5_fu_821_p1;
    select_ln125_5_fu_886_p3 <= 
        sub_ln125_3_fu_762_p2 when (tmp_3_fu_752_p3(0) = '1') else 
        zext_ln125_3_fu_776_p1;
    select_ln125_6_fu_900_p3 <= 
        select_ln125_4_fu_878_p3 when (and_ln120_1_reg_1040_pp0_iter6_reg(0) = '1') else 
        select_ln120_5_fu_894_p3;
    select_ln125_fu_670_p3 <= 
        sub_ln125_1_fu_650_p2 when (tmp_2_fu_622_p3(0) = '1') else 
        zext_ln125_1_fu_666_p1;
        sext_ln122_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln122_fu_907_p3),60));

        sext_ln180_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln180_reg_1137),64));

    shl_ln125_1_fu_692_p2 <= std_logic_vector(shift_left(unsigned(mul_ln125_1_reg_1091),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln125_2_fu_719_p2 <= std_logic_vector(shift_left(unsigned(add_ln121_fu_713_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln125_fu_611_p2 <= std_logic_vector(shift_left(unsigned(jb_0_i_i_reg_254),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln125_mid1_i_fu_430_p3 <= (add_ln120_1_fu_424_p2 & ap_const_lv8_0);
    shl_ln_i_fu_406_p3 <= (ib_0_i_i_reg_210 & ap_const_lv8_0);
    sub_ln120_1_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(zext_ln120_fu_308_p1));
    sub_ln120_fu_293_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(N_read_reg_938));
    sub_ln125_1_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln125_fu_646_p1));
    sub_ln125_2_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln125_1_fu_692_p2));
    sub_ln125_3_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln125_2_fu_759_p1));
    sub_ln125_4_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln125_2_reg_1118));
    sub_ln125_5_fu_806_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln125_4_fu_802_p1));
    sub_ln125_6_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln125_4_reg_1130));
    sub_ln125_7_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln125_6_fu_847_p1));
    sub_ln125_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(add_ln125_1_fu_617_p2));
    tmp_10_i_fu_812_p4 <= add_ln125_2_reg_1118(31 downto 5);
    tmp_11_i_fu_837_p4 <= sub_ln125_6_fu_832_p2(31 downto 5);
    tmp_12_i_fu_857_p4 <= add_ln125_4_reg_1130(31 downto 5);
    tmp_1_fu_275_p1 <= N_dout;
    tmp_1_i_fu_283_p1 <= N_dout;
    tmp_2_fu_622_p3 <= add_ln125_1_fu_617_p2(31 downto 31);
    tmp_2_i_fu_328_p3 <= (select_ln120_reg_957 & ap_const_lv11_0);
    tmp_3_fu_752_p3 <= mul_ln125_1_reg_1091_pp0_iter6_reg(23 downto 23);
    tmp_4_fu_780_p3 <= add_ln125_2_reg_1118(31 downto 31);
    tmp_4_i_fu_636_p4 <= sub_ln125_fu_630_p2(31 downto 5);
    tmp_5_fu_825_p3 <= add_ln125_4_reg_1130(31 downto 31);
    tmp_5_i_fu_656_p4 <= add_ln125_1_fu_617_p2(31 downto 5);
    tmp_6_fu_378_p3 <= (ap_const_lv65_0 & empty_13_fu_374_p1);
    tmp_7_fu_577_p3 <= (ap_const_lv65_0 & empty_16_fu_574_p1);
    tmp_9_i_fu_792_p4 <= sub_ln125_4_fu_787_p2(31 downto 5);
    tmp_i_fu_298_p4 <= sub_ln120_fu_293_p2(31 downto 8);
    trunc_ln125_fu_749_p1 <= mul_ln125_1_reg_1091_pp0_iter6_reg(24 - 1 downto 0);
    xor_ln120_fu_445_p2 <= (icmp_ln121_reg_1003 xor ap_const_lv1_1);
    xor_ln125_fu_494_p2 <= (icmp_ln122_fu_462_p2 xor ap_const_lv1_1);
    zext_ln119_cast_i_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_933),60));
    zext_ln120_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_reg_952),25));
    zext_ln120_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_298_p4),25));
    zext_ln122_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln122_fu_511_p2),32));
    zext_ln122_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_232),32));
    zext_ln125_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_i_fu_656_p4),28));
    zext_ln125_2_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_reg_1113),28));
    zext_ln125_3_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln125_2_mid_i_fu_768_p3),28));
    zext_ln125_4_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_fu_792_p4),28));
    zext_ln125_5_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_i_fu_812_p4),28));
    zext_ln125_6_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_i_fu_837_p4),28));
    zext_ln125_7_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_i_fu_857_p4),28));
    zext_ln125_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_fu_636_p4),28));
end behav;
